#line 2 "lex.yy.c"

#line 4 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer p4FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file; 

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *p4alloc (yy_size_t  );
void *p4realloc (void *,yy_size_t  );
void p4free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int P4::P4Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[315] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  118,  116,    1,    3,
        1,  108,   16,    9,   94,   96,   99,  100,   92,   88,
      110,   90,  112,   93,   72,   72,  109,  114,  105,  113,
      107,  111,  115,   67,  101,  102,   97,   66,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,  103,   95,  104,   98,  116,  116,
       20,   21,   19,   20,   13,   12,   15,   10,   11,   14,
        2,    1,    1,    9,   84,    8,    0,   81,   87,   79,
        5,    4,   72,    0,    0,    0,    0,   72,    0,   80,

       86,   83,   85,  106,    0,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   41,
       42,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,    0,    0,   82,    0,
        0,    6,   17,   18,   10,   11,    0,   78,    4,   71,
       69,   70,   68,   77,   77,    0,   67,   67,   67,   28,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   44,   45,   67,   48,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   89,   91,    0,    0,    0,    0,    0,    0,

       67,   67,   67,   27,   67,   67,   67,   32,   67,   34,
       67,   36,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   58,   67,   60,   67,
       47,   67,   67,   65,    7,   76,   74,   75,   73,    0,
       67,   67,   26,   29,   67,   67,   67,   35,   67,   38,
       67,   43,   67,   67,   67,   67,   67,   53,   67,   67,
       67,   57,   67,   61,   67,   67,   67,    0,   67,   24,
       67,   67,   67,   37,   39,   67,   67,   49,   51,   52,
       54,   55,   56,   67,   67,   67,   63,   22,   67,   25,
       30,   31,   33,   67,   67,   50,   67,   62,   67,   23,

       67,   67,   67,   67,   67,   67,   67,   64,   67,   46,
       59,   67,   40,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   30,   32,   30,   30,
       33,   33,   33,   33,   33,   33,   33,   33,   34,   33,
       33,   33,   33,   33,   33,   33,   33,   35,   33,   33,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   33,   50,   51,   52,   53,
       54,   55,   33,   56,   57,   58,   59,   60,   61,   62,
       63,   33,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    4,
        4,    4,    5,    5,    5,    1,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[325] =
    {   0,
        0,    0,  472,  471,   65,   66,   72,   76,   80,  102,
      480,  479,  106,  108,  115,  119,  481,  486,  124,  486,
       84,  454,  486,   79,  486,  469,  486,  486,  486,  464,
      486,  486,  460,   58,  114,  120,  486,  486,   74,  450,
      111,  486,  420,    0,  486,  486,  486,    0,  108,   52,
      420,  428,  108,  431,  426,   66,  425,  428,  409,  426,
      421,   86,  124,  112,  486,  141,  486,  486,  452,  149,
      486,  486,  486,  136,  486,  486,  486,  169,    0,  486,
      486,  190,  180,  486,  486,  486,  415,  453,  486,  486,
      486,    0,  180,  177,  188,  184,    0,  192,  214,  486,

      486,  486,  486,  486,  406,    0,  404,  402,  404,  400,
      403,  403,  409,  397,  120,  397,  167,  401,  410,    0,
      161,  387,  391,  390,  175,  389,  395,  182,  396,  402,
      394,  180,  387,  386,  118,  391,  374,  373,  486,  424,
      209,  486,  486,  486,  223,    0,  383,  486,    0,  210,
      227,  232,    0,  254,  237,  394,  376,  384,  381,    0,
      380,  203,  389,  384,  372,  375,  372,  367,  379,  366,
      378,  362,    0,    0,  377,    0,  369,  361,  358,  371,
      357,   21,  356,  362,  355,  358,  365,  358,  363,  348,
      364,  361,  486,  486,  359,  243,  259,  250,    0,  356,

      346,  347,  337,    0,  341,  342,  338,    0,  347,    0,
      339,    0,  338,  348,  347,  333,  342,  348,  343,  331,
      343,  340,  331,  340,  339,  336,    0,  323,    0,  334,
      334,  332,  327,    0,  486,  272,  281,  285,    0,  323,
      333,  320,    0,    0,  318,  320,  325,    0,  316,    0,
      312,    0,  327,  319,  309,  311,  305,    0,  312,  297,
      276,    0,  274,    0,  277,  280,  261,  277,  274,  258,
      263,  255,  254,    0,  270,  259,  262,    0,    0,    0,
        0,    0,    0,  239,  249,  236,    0,  486,  229,    0,
        0,    0,    0,  225,  233,    0,  219,    0,  221,    0,

      212,  211,  201,  182,  177,  149,  133,    0,   98,    0,
        0,   72,    0,  486,  325,  330,  335,  340,  342,  347,
      352,  357,  111,   86
    } ;

static yyconst flex_int16_t yy_def[325] =
    {   0,
      314,    1,  315,  315,  316,  316,  317,  317,  317,  317,
      318,  318,    1,    1,    1,    1,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  319,  314,  314,  314,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  314,  314,  314,  314,  320,  320,
      314,  314,  314,  314,  314,  314,  314,  314,  321,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  322,  314,  314,  314,  314,  323,  314,  314,  314,

      314,  314,  314,  314,  314,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  314,  314,  314,  320,
      320,  314,  314,  314,  314,  321,  314,  314,  322,  314,
      314,  314,  323,  314,  314,  314,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  314,  314,  314,  314,  314,  314,  324,  314,

      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  314,  314,  314,  314,  324,  314,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  314,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  314,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,    0,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314
    } ;

static yyconst flex_uint16_t yy_nxt[554] =
    {   0,
       18,   19,   20,   21,   19,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       36,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       44,   44,   44,   44,   44,   45,   18,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   44,   55,   56,   57,
       44,   58,   44,   59,   60,   61,   62,   63,   44,   64,
       44,   44,   44,   65,   66,   67,   68,   72,   72,  223,
       91,   73,   73,   76,   77,   92,   76,   76,   77,  224,
       76,   76,   77,   86,   76,   83,   79,   83,   83,  239,
       78,   78,   78,   78,   78,   78,   78,   78,  100,  101,

      110,   74,   74,   76,   77,  111,   76,   21,   79,   21,
       21,  120,   21,   18,  153,   18,   21,   81,  121,   21,
       21,   81,   18,   21,  313,   82,   18,   83,   82,   87,
      127,   84,   93,   93,   93,   93,  103,  104,   93,   93,
       93,   93,  143,  128,   94,   95,  129,   96,   97,  107,
      108,  312,  135,   98,  137,   94,  138,   95,  114,   98,
      115,  141,  109,  116,  130,  136,  142,   96,  190,  117,
       99,  131,  144,  191,   99,   97,   99,  165,  166,  132,
       99,   83,  133,   83,   83,  311,  134,  145,  145,  145,
      145,   82,  310,   83,   82,  150,  150,   84,   93,   93,

       93,   93,  152,  152,  152,  139,  151,  151,  151,  151,
       98,   98,   98,   98,  172,  168,  150,  177,  173,   98,
      186,  141,  181,  152,  169,  309,  142,  151,  150,  150,
      178,   98,  154,  155,  155,  155,   99,  182,  187,  308,
       99,  145,  145,  145,  145,  151,  151,  151,  151,  150,
      152,  152,  152,  155,  307,  155,  155,  155,  155,  205,
      206,  236,  236,  306,  305,  304,  151,  303,  238,  238,
      238,  152,  155,  155,  155,  155,  155,  237,  237,  237,
      237,  302,  236,  301,  196,  197,  300,  198,  199,  238,
      236,  236,  299,  155,  298,  196,  297,  197,  237,  237,

      237,  237,  237,  238,  238,  238,  296,  198,  295,  294,
      293,  236,  292,  291,  290,  199,  289,  288,  287,  286,
      237,  285,  284,  283,  238,   69,   69,   69,   69,   69,
       71,   71,   71,   71,   71,   75,   75,   75,   75,   75,
       80,   80,   80,   80,   80,  106,  106,  140,  140,  140,
      140,  140,  146,  146,  282,  146,  146,  149,  281,  149,
      149,  149,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,

      242,  241,  240,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      204,  203,  202,  201,  200,  195,  141,  194,  193,  192,
      189,  188,  185,  184,  183,  180,  179,  176,  175,  174,
      171,  170,  167,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  148,  147,  141,  126,  125,  124,  123,  122,
      119,  118,  113,  112,  105,  102,   90,   89,   88,   85,
      314,   77,   77,   70,   70,   17,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314
    } ;

static yyconst flex_int16_t yy_chk[554] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    6,  182,
       34,    5,    6,    7,    7,   34,    7,    8,    8,  182,
        8,    9,    9,   24,    9,   21,    9,   21,   21,  324,
        7,    7,    7,    7,    8,    8,    8,    8,   39,   39,

       50,    5,    6,   10,   10,   50,   10,   13,   10,   14,
       13,   56,   14,   13,  323,   14,   15,   15,   56,   15,
       16,   16,   15,   16,  312,   19,   16,   19,   19,   24,
       62,   19,   35,   35,   35,   35,   41,   41,   36,   36,
       36,   36,   74,   62,   35,   35,   62,   35,   35,   49,
       49,  309,   64,   35,   66,   35,   66,   35,   53,   36,
       53,   70,   49,   53,   63,   64,   70,   35,  135,   53,
       35,   63,   74,  135,   35,   35,   36,  115,  115,   63,
       36,   83,   63,   83,   83,  307,   63,   78,   78,   78,
       78,   82,  306,   82,   82,   94,   94,   82,   93,   93,

       93,   93,   96,   96,   96,   66,   95,   95,   95,   95,
       98,   98,   98,   98,  121,  117,   94,  125,  121,   93,
      132,  141,  128,   96,  117,  305,  141,   95,  150,  150,
      125,   98,   99,   99,   99,   99,   93,  128,  132,  304,
       93,  145,  145,  145,  145,  151,  151,  151,  151,  150,
      152,  152,  152,   99,  303,  155,  155,  155,  155,  162,
      162,  196,  196,  302,  301,  299,  151,  297,  198,  198,
      198,  152,  154,  154,  154,  154,  155,  197,  197,  197,
      197,  295,  196,  294,  154,  154,  289,  154,  154,  198,
      236,  236,  286,  154,  285,  154,  284,  154,  197,  237,

      237,  237,  237,  238,  238,  238,  277,  154,  276,  275,
      273,  236,  272,  271,  270,  154,  269,  268,  267,  266,
      237,  265,  263,  261,  238,  315,  315,  315,  315,  315,
      316,  316,  316,  316,  316,  317,  317,  317,  317,  317,
      318,  318,  318,  318,  318,  319,  319,  320,  320,  320,
      320,  320,  321,  321,  260,  321,  321,  322,  259,  322,
      322,  322,  257,  256,  255,  254,  253,  251,  249,  247,
      246,  245,  242,  241,  240,  233,  232,  231,  230,  228,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  211,  209,  207,  206,  205,  203,

      202,  201,  200,  195,  192,  191,  190,  189,  188,  187,
      186,  185,  184,  183,  181,  180,  179,  178,  177,  175,
      172,  171,  170,  169,  168,  167,  166,  165,  164,  163,
      161,  159,  158,  157,  156,  147,  140,  138,  137,  136,
      134,  133,  131,  130,  129,  127,  126,  124,  123,  122,
      119,  118,  116,  114,  113,  112,  111,  110,  109,  108,
      107,  105,   88,   87,   69,   61,   60,   59,   58,   57,
       55,   54,   52,   51,   43,   40,   33,   30,   26,   22,
       17,   12,   11,    4,    3,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
#line 2 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
#include "frontends/common/constantParsing.h"
#include "frontends/parsers/parserDriver.h"
#include "frontends/parsers/p4/p4lexer.hpp"
#include "frontends/parsers/p4/p4parser.hpp"

using Parser = P4::P4Parser;

#undef  YY_DECL
#define YY_DECL Parser::symbol_type P4::P4Lexer::yylex(P4::P4ParserDriver& driver)

#define YY_USER_ACTION driver.onReadToken(yytext);
#define YY_USER_INIT driver.saveState = NORMAL
#define yyterminate() return Parser::make_END(driver.yylloc);

#define makeToken(symbol) \
    Parser::make_ ## symbol( \
        P4::Token(Parser::token::TOK_ ## symbol, yytext), \
        driver.yylloc)

// Silence the warnings triggered by the code flex generates.
#pragma GCC diagnostic ignored "-Wpragmas"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wtautological-undefined-compare"
#ifdef __clang__
#pragma clang diagnostic ignored "-Wnull-conversion"
#endif

#define YY_NO_INPUT 1



#line 689 "lex.yy.c"

#define INITIAL 0
#define COMMENT 1
#define STRING 2
#define LINE1 3
#define LINE2 4
#define LINE3 5
#define NORMAL 6
#define PRAGMA_LINE 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 46 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"



    // Insert a token at the beginning of the stream to tell the parser that
    // the stream should be parsed as a program.
    if (needStartToken) {
        needStartToken = false;
        return Parser::make_START_PROGRAM(driver.yylloc);
    }


#line 840 "lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 315 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 486 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 57 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 58 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN INITIAL;
                        driver.saveState = NORMAL;
                        return makeToken(END_PRAGMA); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN INITIAL; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ driver.onReadComment(yytext+2, true); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN COMMENT; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 64 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{
                         /* http://www.cs.dartmouth.edu/~mckeeman/cs118/assignments/comment.html */
                         driver.onReadComment(yytext, false);
                         if (driver.saveState == PRAGMA_LINE) {
                             // If the comment contains a newline, end the pragma line.
                             for (int i = 0; i < strlen(yytext); i++) {
                                 if (yytext[i] == '\n') {
                                     driver.saveState = NORMAL;
                                     BEGIN driver.saveState;
                                     return makeToken(END_PRAGMA);
                                 }
                             }
                         }
                         BEGIN driver.saveState; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 79 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(LINE1); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 80 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(LINE1); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 81 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(LINE3); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 82 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(LINE2); driver.onReadLineNumber(yytext); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 83 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(LINE3); driver.onReadFileName(yytext+1); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 84 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(LINE3); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 86 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 87 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(LINE1):
case YY_STATE_EOF(LINE2):
case YY_STATE_EOF(LINE3):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(NORMAL):
#line 88 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(INITIAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 90 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(STRING); driver.stringLiteral = ""; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 91 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ driver.stringLiteral += yytext; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 92 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ driver.stringLiteral += yytext; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 93 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                  driver.template_args = false;
                  auto string = cstring(driver.stringLiteral);
                  return Parser::make_STRING_LITERAL(string, driver.yylloc); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 97 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ driver.stringLiteral += yytext; }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 98 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ driver.stringLiteral += yytext; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 100 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN((driver.saveState = PRAGMA_LINE));
                  driver.template_args = false;
                  return makeToken(PRAGMA); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 104 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(ABSTRACT); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 106 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(ACTION); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 108 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(ACTIONS); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(APPLY); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 112 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(BOOL); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 114 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = true;
                  return makeToken(BIT); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 116 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(CONST); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 118 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(CONTROL); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 120 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(DEFAULT); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 122 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(ELSE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(ENTRIES); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 126 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(ENUM); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 128 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(ERROR); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 130 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(EXIT); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 132 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(EXTERN); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 134 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(FALSE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 136 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(HEADER); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 138 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(HEADER_UNION); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 140 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(IF); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 142 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(IN); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 144 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(INOUT); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 146 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = true;
                  return makeToken(INT); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 148 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(KEY); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 150 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(MATCH_KIND); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 152 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(TYPE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 154 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(OUT); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(PARSER); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 158 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(PACKAGE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(RETURN); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 162 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(SELECT); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(STATE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 166 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(STRING); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(STRUCT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 170 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(SWITCH); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 172 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(TABLE); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 174 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(THIS); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 176 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(TRANSITION); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 178 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(TRUE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 180 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = true;
                  return makeToken(TUPLE); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 182 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(TYPEDEF); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 184 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = true;
                  return makeToken(VARBIT); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 186 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = true;
                  return makeToken(VALUESET); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 188 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(VOID); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 190 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false;
                  return makeToken(DONTCARE); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 192 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{
                  BEGIN(driver.saveState);
                  driver.template_args = false;
                  cstring name = yytext;
                  Util::ProgramStructure::SymbolKind kind =
                      driver.structure->lookupIdentifier(name);
                  switch (kind)
                  {
                  /* FIXME: if the type is a reserved keyword this doesn't work */
                  case Util::ProgramStructure::SymbolKind::TemplateIdentifier:
                      driver.template_args = true;
                      driver.onReadIdentifier(name);
                      return Parser::make_IDENTIFIER(name, driver.yylloc);
                  case Util::ProgramStructure::SymbolKind::Identifier:
                      driver.onReadIdentifier(name);
                      return Parser::make_IDENTIFIER(name, driver.yylloc);
                  case Util::ProgramStructure::SymbolKind::TemplateType:
                      driver.template_args = true;
                      return Parser::make_TYPE_IDENTIFIER(name, driver.yylloc);
                  case Util::ProgramStructure::SymbolKind::Type:
                      return Parser::make_TYPE_IDENTIFIER(name, driver.yylloc);
                  default:
                      BUG("Unexpected symbol kind");
                  }
                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 218 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                     driver.template_args = false;
                     UnparsedConstant constant{yytext, 2, 16, false};
                     return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 222 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                     driver.template_args = false;
                     UnparsedConstant constant{yytext, 2, 10, false};
                     return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 226 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                     driver.template_args = false;
                     UnparsedConstant constant{yytext, 2, 8, false};
                     return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 230 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                     driver.template_args = false;
                     UnparsedConstant constant{yytext, 2, 2, false};
                     return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 234 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                     driver.template_args = false;
                     UnparsedConstant constant{yytext, 0, 10, false};
                     return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 239 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                               driver.template_args = false;
                               UnparsedConstant constant{yytext, 2, 16, true};
                               return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 243 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                          driver.template_args = false;
                          UnparsedConstant constant{yytext, 2, 10, true};
                          return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 247 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                          driver.template_args = false;
                          UnparsedConstant constant{yytext, 2, 8, true};
                          return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 251 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                          driver.template_args = false;
                          UnparsedConstant constant{yytext, 2, 2, true};
                          return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 255 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
                          driver.template_args = false;
                          UnparsedConstant constant{yytext, 0, 10, true};
                          return Parser::make_INTEGER(constant, driver.yylloc); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 260 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(MASK); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 261 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(RANGE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 262 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(SHL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 263 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(AND); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 264 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(OR); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 265 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(EQ); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 266 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(NE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 267 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(GE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 268 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(LE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 269 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(PP); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 271 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(PLUS); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 272 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(PLUS_SAT); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 273 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(MINUS); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 274 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(MINUS_SAT); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 275 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(MUL); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 276 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(DIV); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 277 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(MOD); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 279 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(BIT_OR); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 280 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(BIT_AND); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 281 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(BIT_XOR); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 282 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(COMPLEMENT); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 284 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(L_PAREN); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 285 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(R_PAREN); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 286 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(L_BRACKET); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 287 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(R_BRACKET); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 288 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(L_BRACE); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 289 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(R_BRACE); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 290 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState);
          return driver.template_args ? makeToken(L_ANGLE_ARGS) : makeToken(L_ANGLE); }
	YY_BREAK
case 106:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 292 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(R_ANGLE_SHIFT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 293 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(R_ANGLE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 295 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(NOT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 296 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(COLON); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 297 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(COMMA); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 298 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(QUESTION); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 299 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(DOT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 300 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(ASSIGN); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 301 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(SEMICOLON); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 302 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ BEGIN(driver.saveState); driver.template_args = false; return makeToken(AT); }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 304 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
{ return makeToken(UNEXPECTED_TOKEN); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 306 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1619 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(PRAGMA_LINE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( FLEX_STD istream* arg_yyin, FLEX_STD ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	p4free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	p4free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					p4realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) p4realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 315 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 315 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 314);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) p4alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) p4alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		p4free((void *) b->yy_ch_buf  );

	p4free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)p4alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)p4realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) p4alloc(new_size  );

		else
			(yy_start_stack) = (int *) p4realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *p4alloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *p4realloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void p4free (void * ptr )
{
			free( (char *) ptr );	/* see p4realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 306 "/media/yec/WORK/Programs/P4-verification/P4B-Translator/frontends/parsers/p4/p4lexer.ll"



