// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/v1/p4runtime.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "p4/v1/p4runtime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace p4 {
namespace v1 {
class WriteRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WriteRequest> {
} _WriteRequest_default_instance_;
class WriteResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WriteResponse> {
} _WriteResponse_default_instance_;
class ReadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadRequest> {
} _ReadRequest_default_instance_;
class ReadResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReadResponse> {
} _ReadResponse_default_instance_;
class UpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Update> {
} _Update_default_instance_;
class EntityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Entity> {
  public:
  const ::p4::v1::ExternEntry* extern_entry_;
  const ::p4::v1::TableEntry* table_entry_;
  const ::p4::v1::ActionProfileMember* action_profile_member_;
  const ::p4::v1::ActionProfileGroup* action_profile_group_;
  const ::p4::v1::MeterEntry* meter_entry_;
  const ::p4::v1::DirectMeterEntry* direct_meter_entry_;
  const ::p4::v1::CounterEntry* counter_entry_;
  const ::p4::v1::DirectCounterEntry* direct_counter_entry_;
  const ::p4::v1::PacketReplicationEngineEntry* packet_replication_engine_entry_;
  const ::p4::v1::ValueSetEntry* value_set_entry_;
  const ::p4::v1::RegisterEntry* register_entry_;
  const ::p4::v1::DigestEntry* digest_entry_;
} _Entity_default_instance_;
class ExternEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExternEntry> {
} _ExternEntry_default_instance_;
class TableEntry_IdleTimeoutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableEntry_IdleTimeout> {
} _TableEntry_IdleTimeout_default_instance_;
class TableEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableEntry> {
} _TableEntry_default_instance_;
class FieldMatch_ExactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FieldMatch_Exact> {
} _FieldMatch_Exact_default_instance_;
class FieldMatch_TernaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FieldMatch_Ternary> {
} _FieldMatch_Ternary_default_instance_;
class FieldMatch_LPMDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FieldMatch_LPM> {
} _FieldMatch_LPM_default_instance_;
class FieldMatch_RangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FieldMatch_Range> {
} _FieldMatch_Range_default_instance_;
class FieldMatch_OptionalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FieldMatch_Optional> {
} _FieldMatch_Optional_default_instance_;
class FieldMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FieldMatch> {
  public:
  const ::p4::v1::FieldMatch_Exact* exact_;
  const ::p4::v1::FieldMatch_Ternary* ternary_;
  const ::p4::v1::FieldMatch_LPM* lpm_;
  const ::p4::v1::FieldMatch_Range* range_;
  const ::p4::v1::FieldMatch_Optional* optional_;
  const ::google::protobuf::Any* other_;
} _FieldMatch_default_instance_;
class TableActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TableAction> {
  public:
  const ::p4::v1::Action* action_;
  ::google::protobuf::uint32 action_profile_member_id_;
  ::google::protobuf::uint32 action_profile_group_id_;
  const ::p4::v1::ActionProfileActionSet* action_profile_action_set_;
} _TableAction_default_instance_;
class Action_ParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Action_Param> {
} _Action_Param_default_instance_;
class ActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Action> {
} _Action_default_instance_;
class ActionProfileActionSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionProfileActionSet> {
} _ActionProfileActionSet_default_instance_;
class ActionProfileActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionProfileAction> {
} _ActionProfileAction_default_instance_;
class ActionProfileMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionProfileMember> {
} _ActionProfileMember_default_instance_;
class ActionProfileGroup_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionProfileGroup_Member> {
} _ActionProfileGroup_Member_default_instance_;
class ActionProfileGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionProfileGroup> {
} _ActionProfileGroup_default_instance_;
class IndexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Index> {
} _Index_default_instance_;
class MeterEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MeterEntry> {
} _MeterEntry_default_instance_;
class DirectMeterEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectMeterEntry> {
} _DirectMeterEntry_default_instance_;
class MeterConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MeterConfig> {
} _MeterConfig_default_instance_;
class CounterEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CounterEntry> {
} _CounterEntry_default_instance_;
class DirectCounterEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DirectCounterEntry> {
} _DirectCounterEntry_default_instance_;
class CounterDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CounterData> {
} _CounterData_default_instance_;
class PacketReplicationEngineEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketReplicationEngineEntry> {
  public:
  const ::p4::v1::MulticastGroupEntry* multicast_group_entry_;
  const ::p4::v1::CloneSessionEntry* clone_session_entry_;
} _PacketReplicationEngineEntry_default_instance_;
class ReplicaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Replica> {
} _Replica_default_instance_;
class MulticastGroupEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MulticastGroupEntry> {
} _MulticastGroupEntry_default_instance_;
class CloneSessionEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CloneSessionEntry> {
} _CloneSessionEntry_default_instance_;
class ValueSetMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ValueSetMember> {
} _ValueSetMember_default_instance_;
class ValueSetEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ValueSetEntry> {
} _ValueSetEntry_default_instance_;
class RegisterEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RegisterEntry> {
} _RegisterEntry_default_instance_;
class DigestEntry_ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DigestEntry_Config> {
} _DigestEntry_Config_default_instance_;
class DigestEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DigestEntry> {
} _DigestEntry_default_instance_;
class StreamMessageRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamMessageRequest> {
  public:
  const ::p4::v1::MasterArbitrationUpdate* arbitration_;
  const ::p4::v1::PacketOut* packet_;
  const ::p4::v1::DigestListAck* digest_ack_;
  const ::google::protobuf::Any* other_;
} _StreamMessageRequest_default_instance_;
class PacketOutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketOut> {
} _PacketOut_default_instance_;
class DigestListAckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DigestListAck> {
} _DigestListAck_default_instance_;
class StreamMessageResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamMessageResponse> {
  public:
  const ::p4::v1::MasterArbitrationUpdate* arbitration_;
  const ::p4::v1::PacketIn* packet_;
  const ::p4::v1::DigestList* digest_;
  const ::p4::v1::IdleTimeoutNotification* idle_timeout_notification_;
  const ::google::protobuf::Any* other_;
  const ::p4::v1::StreamError* error_;
} _StreamMessageResponse_default_instance_;
class PacketInDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketIn> {
} _PacketIn_default_instance_;
class DigestListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DigestList> {
} _DigestList_default_instance_;
class PacketMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketMetadata> {
} _PacketMetadata_default_instance_;
class MasterArbitrationUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MasterArbitrationUpdate> {
} _MasterArbitrationUpdate_default_instance_;
class RoleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Role> {
} _Role_default_instance_;
class IdleTimeoutNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IdleTimeoutNotification> {
} _IdleTimeoutNotification_default_instance_;
class StreamErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamError> {
  public:
  const ::p4::v1::PacketOutError* packet_out_;
  const ::p4::v1::DigestListAckError* digest_list_ack_;
  const ::p4::v1::StreamOtherError* other_;
} _StreamError_default_instance_;
class PacketOutErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PacketOutError> {
} _PacketOutError_default_instance_;
class DigestListAckErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DigestListAckError> {
} _DigestListAckError_default_instance_;
class StreamOtherErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamOtherError> {
} _StreamOtherError_default_instance_;
class Uint128DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Uint128> {
} _Uint128_default_instance_;
class SetForwardingPipelineConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetForwardingPipelineConfigRequest> {
} _SetForwardingPipelineConfigRequest_default_instance_;
class SetForwardingPipelineConfigResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetForwardingPipelineConfigResponse> {
} _SetForwardingPipelineConfigResponse_default_instance_;
class ForwardingPipelineConfig_CookieDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardingPipelineConfig_Cookie> {
} _ForwardingPipelineConfig_Cookie_default_instance_;
class ForwardingPipelineConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardingPipelineConfig> {
} _ForwardingPipelineConfig_default_instance_;
class GetForwardingPipelineConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetForwardingPipelineConfigRequest> {
} _GetForwardingPipelineConfigRequest_default_instance_;
class GetForwardingPipelineConfigResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetForwardingPipelineConfigResponse> {
} _GetForwardingPipelineConfigResponse_default_instance_;
class ErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Error> {
} _Error_default_instance_;
class CapabilitiesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CapabilitiesRequest> {
} _CapabilitiesRequest_default_instance_;
class CapabilitiesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CapabilitiesResponse> {
} _CapabilitiesResponse_default_instance_;

namespace protobuf_p4_2fv1_2fp4runtime_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[63];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, election_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, updates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, atomicity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, entities_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, entities_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, entity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), extern_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), table_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), action_profile_member_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), action_profile_group_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), meter_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), direct_meter_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), counter_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), direct_counter_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), packet_replication_engine_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), value_set_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), register_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Entity_default_instance_), digest_entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, entity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternEntry, extern_type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternEntry, extern_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternEntry, entry_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry_IdleTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry_IdleTimeout, elapsed_ns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, controller_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, meter_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, counter_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, is_default_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, idle_timeout_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, time_since_last_hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEntry, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Exact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Exact, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Ternary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Ternary, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Ternary, mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_LPM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_LPM, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_LPM, prefix_len_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Range, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Range, high_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Optional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch_Optional, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch, field_id_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FieldMatch_default_instance_), exact_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FieldMatch_default_instance_), ternary_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FieldMatch_default_instance_), lpm_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FieldMatch_default_instance_), range_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FieldMatch_default_instance_), optional_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FieldMatch_default_instance_), other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldMatch, field_match_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableAction, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableAction, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TableAction_default_instance_), action_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TableAction_default_instance_), action_profile_member_id_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TableAction_default_instance_), action_profile_group_id_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_TableAction_default_instance_), action_profile_action_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableAction, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Param, param_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Param, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, params_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileActionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileActionSet, action_profile_actions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileAction, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileAction, watch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileMember, action_profile_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileMember, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileMember, action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup_Member, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup_Member, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup_Member, watch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup, action_profile_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProfileGroup, max_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Index, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterEntry, meter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterEntry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterEntry, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMeterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMeterEntry, table_entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectMeterEntry, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterConfig, cir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterConfig, cburst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterConfig, pir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeterConfig, pburst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterEntry, counter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterEntry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterEntry, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectCounterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectCounterEntry, table_entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectCounterEntry, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterData, byte_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterData, packet_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketReplicationEngineEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketReplicationEngineEntry, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PacketReplicationEngineEntry_default_instance_), multicast_group_entry_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PacketReplicationEngineEntry_default_instance_), clone_session_entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketReplicationEngineEntry, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, egress_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, instance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulticastGroupEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulticastGroupEntry, multicast_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulticastGroupEntry, replicas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneSessionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneSessionEntry, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneSessionEntry, replicas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneSessionEntry, class_of_service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneSessionEntry, packet_length_bytes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSetMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSetMember, match_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSetEntry, value_set_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValueSetEntry, members_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEntry, register_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEntry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterEntry, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestEntry_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestEntry_Config, max_timeout_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestEntry_Config, max_list_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestEntry_Config, ack_timeout_ns_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestEntry, digest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestEntry, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessageRequest, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageRequest_default_instance_), arbitration_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageRequest_default_instance_), packet_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageRequest_default_instance_), digest_ack_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageRequest_default_instance_), other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessageRequest, update_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketOut, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketOut, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestListAck, digest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestListAck, list_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessageResponse, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageResponse_default_instance_), arbitration_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageResponse_default_instance_), packet_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageResponse_default_instance_), digest_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageResponse_default_instance_), idle_timeout_notification_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageResponse_default_instance_), other_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamMessageResponse_default_instance_), error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessageResponse, update_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketIn, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketIn, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestList, digest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestList, list_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestList, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestList, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMetadata, metadata_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketMetadata, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterArbitrationUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterArbitrationUpdate, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterArbitrationUpdate, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterArbitrationUpdate, election_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterArbitrationUpdate, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdleTimeoutNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdleTimeoutNotification, table_entry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdleTimeoutNotification, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamError, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamError, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamError, canonical_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamError, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamError, space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamError, code_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamError_default_instance_), packet_out_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamError_default_instance_), digest_list_ack_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_StreamError_default_instance_), other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamError, details_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketOutError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketOutError, packet_out_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestListAckError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigestListAckError, digest_list_ack_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamOtherError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamOtherError, other_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint128, high_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uint128, low_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForwardingPipelineConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForwardingPipelineConfigRequest, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForwardingPipelineConfigRequest, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForwardingPipelineConfigRequest, election_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForwardingPipelineConfigRequest, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForwardingPipelineConfigRequest, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForwardingPipelineConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPipelineConfig_Cookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPipelineConfig_Cookie, cookie_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPipelineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPipelineConfig, p4info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPipelineConfig, p4_device_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPipelineConfig, cookie_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardingPipelineConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardingPipelineConfigRequest, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardingPipelineConfigRequest, response_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardingPipelineConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetForwardingPipelineConfigResponse, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, canonical_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, details_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapabilitiesResponse, p4runtime_api_version_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WriteRequest)},
  { 9, -1, sizeof(WriteResponse)},
  { 13, -1, sizeof(ReadRequest)},
  { 19, -1, sizeof(ReadResponse)},
  { 24, -1, sizeof(Update)},
  { 30, -1, sizeof(Entity)},
  { 47, -1, sizeof(ExternEntry)},
  { 54, -1, sizeof(TableEntry_IdleTimeout)},
  { 59, -1, sizeof(TableEntry)},
  { 74, -1, sizeof(FieldMatch_Exact)},
  { 79, -1, sizeof(FieldMatch_Ternary)},
  { 85, -1, sizeof(FieldMatch_LPM)},
  { 91, -1, sizeof(FieldMatch_Range)},
  { 97, -1, sizeof(FieldMatch_Optional)},
  { 102, -1, sizeof(FieldMatch)},
  { 114, -1, sizeof(TableAction)},
  { 123, -1, sizeof(Action_Param)},
  { 129, -1, sizeof(Action)},
  { 135, -1, sizeof(ActionProfileActionSet)},
  { 140, -1, sizeof(ActionProfileAction)},
  { 147, -1, sizeof(ActionProfileMember)},
  { 154, -1, sizeof(ActionProfileGroup_Member)},
  { 161, -1, sizeof(ActionProfileGroup)},
  { 169, -1, sizeof(Index)},
  { 174, -1, sizeof(MeterEntry)},
  { 181, -1, sizeof(DirectMeterEntry)},
  { 187, -1, sizeof(MeterConfig)},
  { 195, -1, sizeof(CounterEntry)},
  { 202, -1, sizeof(DirectCounterEntry)},
  { 208, -1, sizeof(CounterData)},
  { 214, -1, sizeof(PacketReplicationEngineEntry)},
  { 221, -1, sizeof(Replica)},
  { 227, -1, sizeof(MulticastGroupEntry)},
  { 233, -1, sizeof(CloneSessionEntry)},
  { 241, -1, sizeof(ValueSetMember)},
  { 246, -1, sizeof(ValueSetEntry)},
  { 252, -1, sizeof(RegisterEntry)},
  { 259, -1, sizeof(DigestEntry_Config)},
  { 266, -1, sizeof(DigestEntry)},
  { 272, -1, sizeof(StreamMessageRequest)},
  { 281, -1, sizeof(PacketOut)},
  { 287, -1, sizeof(DigestListAck)},
  { 293, -1, sizeof(StreamMessageResponse)},
  { 304, -1, sizeof(PacketIn)},
  { 310, -1, sizeof(DigestList)},
  { 318, -1, sizeof(PacketMetadata)},
  { 324, -1, sizeof(MasterArbitrationUpdate)},
  { 332, -1, sizeof(Role)},
  { 338, -1, sizeof(IdleTimeoutNotification)},
  { 344, -1, sizeof(StreamError)},
  { 356, -1, sizeof(PacketOutError)},
  { 361, -1, sizeof(DigestListAckError)},
  { 366, -1, sizeof(StreamOtherError)},
  { 371, -1, sizeof(Uint128)},
  { 377, -1, sizeof(SetForwardingPipelineConfigRequest)},
  { 386, -1, sizeof(SetForwardingPipelineConfigResponse)},
  { 390, -1, sizeof(ForwardingPipelineConfig_Cookie)},
  { 395, -1, sizeof(ForwardingPipelineConfig)},
  { 402, -1, sizeof(GetForwardingPipelineConfigRequest)},
  { 408, -1, sizeof(GetForwardingPipelineConfigResponse)},
  { 413, -1, sizeof(Error)},
  { 422, -1, sizeof(CapabilitiesRequest)},
  { 426, -1, sizeof(CapabilitiesResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WriteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WriteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReadResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Entity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExternEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableEntry_IdleTimeout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldMatch_Exact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldMatch_Ternary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldMatch_LPM_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldMatch_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldMatch_Optional_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TableAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Action_Param_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionProfileActionSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionProfileAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionProfileMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionProfileGroup_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionProfileGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Index_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MeterEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectMeterEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MeterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CounterEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectCounterEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CounterData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketReplicationEngineEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Replica_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MulticastGroupEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CloneSessionEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ValueSetMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ValueSetEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegisterEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DigestEntry_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DigestEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketOut_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DigestListAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketIn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DigestList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MasterArbitrationUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Role_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IdleTimeoutNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PacketOutError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DigestListAckError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamOtherError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Uint128_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetForwardingPipelineConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetForwardingPipelineConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardingPipelineConfig_Cookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardingPipelineConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetForwardingPipelineConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetForwardingPipelineConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CapabilitiesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CapabilitiesResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "p4/v1/p4runtime.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 63);
}

}  // namespace

void TableStruct::Shutdown() {
  _WriteRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _WriteResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ReadRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ReadResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Update_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Entity_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ExternEntry_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TableEntry_IdleTimeout_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _TableEntry_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _FieldMatch_Exact_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _FieldMatch_Ternary_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _FieldMatch_LPM_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _FieldMatch_Range_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _FieldMatch_Optional_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _FieldMatch_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _TableAction_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Action_Param_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Action_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _ActionProfileActionSet_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ActionProfileAction_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ActionProfileMember_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _ActionProfileGroup_Member_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _ActionProfileGroup_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _Index_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _MeterEntry_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _DirectMeterEntry_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _MeterConfig_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CounterEntry_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _DirectCounterEntry_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CounterData_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _PacketReplicationEngineEntry_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _Replica_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _MulticastGroupEntry_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CloneSessionEntry_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _ValueSetMember_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _ValueSetEntry_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _RegisterEntry_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _DigestEntry_Config_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _DigestEntry_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _StreamMessageRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _PacketOut_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _DigestListAck_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _StreamMessageResponse_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _PacketIn_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _DigestList_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _PacketMetadata_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _MasterArbitrationUpdate_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _Role_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _IdleTimeoutNotification_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _StreamError_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _PacketOutError_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _DigestListAckError_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _StreamOtherError_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _Uint128_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _SetForwardingPipelineConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _SetForwardingPipelineConfigResponse_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _ForwardingPipelineConfig_Cookie_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _ForwardingPipelineConfig_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _GetForwardingPipelineConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _GetForwardingPipelineConfigResponse_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _Error_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CapabilitiesRequest_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CapabilitiesResponse_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::InitDefaults();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::InitDefaults();
  ::p4::config::v1::protobuf_p4_2fconfig_2fv1_2fp4info_2eproto::InitDefaults();
  ::p4::v1::protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  _WriteRequest_default_instance_.DefaultConstruct();
  _WriteResponse_default_instance_.DefaultConstruct();
  _ReadRequest_default_instance_.DefaultConstruct();
  _ReadResponse_default_instance_.DefaultConstruct();
  _Update_default_instance_.DefaultConstruct();
  _Entity_default_instance_.DefaultConstruct();
  _ExternEntry_default_instance_.DefaultConstruct();
  _TableEntry_IdleTimeout_default_instance_.DefaultConstruct();
  _TableEntry_default_instance_.DefaultConstruct();
  _FieldMatch_Exact_default_instance_.DefaultConstruct();
  _FieldMatch_Ternary_default_instance_.DefaultConstruct();
  _FieldMatch_LPM_default_instance_.DefaultConstruct();
  _FieldMatch_Range_default_instance_.DefaultConstruct();
  _FieldMatch_Optional_default_instance_.DefaultConstruct();
  _FieldMatch_default_instance_.DefaultConstruct();
  _TableAction_default_instance_.DefaultConstruct();
  _Action_Param_default_instance_.DefaultConstruct();
  _Action_default_instance_.DefaultConstruct();
  _ActionProfileActionSet_default_instance_.DefaultConstruct();
  _ActionProfileAction_default_instance_.DefaultConstruct();
  _ActionProfileMember_default_instance_.DefaultConstruct();
  _ActionProfileGroup_Member_default_instance_.DefaultConstruct();
  _ActionProfileGroup_default_instance_.DefaultConstruct();
  _Index_default_instance_.DefaultConstruct();
  _MeterEntry_default_instance_.DefaultConstruct();
  _DirectMeterEntry_default_instance_.DefaultConstruct();
  _MeterConfig_default_instance_.DefaultConstruct();
  _CounterEntry_default_instance_.DefaultConstruct();
  _DirectCounterEntry_default_instance_.DefaultConstruct();
  _CounterData_default_instance_.DefaultConstruct();
  _PacketReplicationEngineEntry_default_instance_.DefaultConstruct();
  _Replica_default_instance_.DefaultConstruct();
  _MulticastGroupEntry_default_instance_.DefaultConstruct();
  _CloneSessionEntry_default_instance_.DefaultConstruct();
  _ValueSetMember_default_instance_.DefaultConstruct();
  _ValueSetEntry_default_instance_.DefaultConstruct();
  _RegisterEntry_default_instance_.DefaultConstruct();
  _DigestEntry_Config_default_instance_.DefaultConstruct();
  _DigestEntry_default_instance_.DefaultConstruct();
  _StreamMessageRequest_default_instance_.DefaultConstruct();
  _PacketOut_default_instance_.DefaultConstruct();
  _DigestListAck_default_instance_.DefaultConstruct();
  _StreamMessageResponse_default_instance_.DefaultConstruct();
  _PacketIn_default_instance_.DefaultConstruct();
  _DigestList_default_instance_.DefaultConstruct();
  _PacketMetadata_default_instance_.DefaultConstruct();
  _MasterArbitrationUpdate_default_instance_.DefaultConstruct();
  _Role_default_instance_.DefaultConstruct();
  _IdleTimeoutNotification_default_instance_.DefaultConstruct();
  _StreamError_default_instance_.DefaultConstruct();
  _PacketOutError_default_instance_.DefaultConstruct();
  _DigestListAckError_default_instance_.DefaultConstruct();
  _StreamOtherError_default_instance_.DefaultConstruct();
  _Uint128_default_instance_.DefaultConstruct();
  _SetForwardingPipelineConfigRequest_default_instance_.DefaultConstruct();
  _SetForwardingPipelineConfigResponse_default_instance_.DefaultConstruct();
  _ForwardingPipelineConfig_Cookie_default_instance_.DefaultConstruct();
  _ForwardingPipelineConfig_default_instance_.DefaultConstruct();
  _GetForwardingPipelineConfigRequest_default_instance_.DefaultConstruct();
  _GetForwardingPipelineConfigResponse_default_instance_.DefaultConstruct();
  _Error_default_instance_.DefaultConstruct();
  _CapabilitiesRequest_default_instance_.DefaultConstruct();
  _CapabilitiesResponse_default_instance_.DefaultConstruct();
  _WriteRequest_default_instance_.get_mutable()->election_id_ = const_cast< ::p4::v1::Uint128*>(
      ::p4::v1::Uint128::internal_default_instance());
  _Update_default_instance_.get_mutable()->entity_ = const_cast< ::p4::v1::Entity*>(
      ::p4::v1::Entity::internal_default_instance());
  _Entity_default_instance_.extern_entry_ = const_cast< ::p4::v1::ExternEntry*>(
      ::p4::v1::ExternEntry::internal_default_instance());
  _Entity_default_instance_.table_entry_ = const_cast< ::p4::v1::TableEntry*>(
      ::p4::v1::TableEntry::internal_default_instance());
  _Entity_default_instance_.action_profile_member_ = const_cast< ::p4::v1::ActionProfileMember*>(
      ::p4::v1::ActionProfileMember::internal_default_instance());
  _Entity_default_instance_.action_profile_group_ = const_cast< ::p4::v1::ActionProfileGroup*>(
      ::p4::v1::ActionProfileGroup::internal_default_instance());
  _Entity_default_instance_.meter_entry_ = const_cast< ::p4::v1::MeterEntry*>(
      ::p4::v1::MeterEntry::internal_default_instance());
  _Entity_default_instance_.direct_meter_entry_ = const_cast< ::p4::v1::DirectMeterEntry*>(
      ::p4::v1::DirectMeterEntry::internal_default_instance());
  _Entity_default_instance_.counter_entry_ = const_cast< ::p4::v1::CounterEntry*>(
      ::p4::v1::CounterEntry::internal_default_instance());
  _Entity_default_instance_.direct_counter_entry_ = const_cast< ::p4::v1::DirectCounterEntry*>(
      ::p4::v1::DirectCounterEntry::internal_default_instance());
  _Entity_default_instance_.packet_replication_engine_entry_ = const_cast< ::p4::v1::PacketReplicationEngineEntry*>(
      ::p4::v1::PacketReplicationEngineEntry::internal_default_instance());
  _Entity_default_instance_.value_set_entry_ = const_cast< ::p4::v1::ValueSetEntry*>(
      ::p4::v1::ValueSetEntry::internal_default_instance());
  _Entity_default_instance_.register_entry_ = const_cast< ::p4::v1::RegisterEntry*>(
      ::p4::v1::RegisterEntry::internal_default_instance());
  _Entity_default_instance_.digest_entry_ = const_cast< ::p4::v1::DigestEntry*>(
      ::p4::v1::DigestEntry::internal_default_instance());
  _ExternEntry_default_instance_.get_mutable()->entry_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _TableEntry_default_instance_.get_mutable()->action_ = const_cast< ::p4::v1::TableAction*>(
      ::p4::v1::TableAction::internal_default_instance());
  _TableEntry_default_instance_.get_mutable()->meter_config_ = const_cast< ::p4::v1::MeterConfig*>(
      ::p4::v1::MeterConfig::internal_default_instance());
  _TableEntry_default_instance_.get_mutable()->counter_data_ = const_cast< ::p4::v1::CounterData*>(
      ::p4::v1::CounterData::internal_default_instance());
  _TableEntry_default_instance_.get_mutable()->time_since_last_hit_ = const_cast< ::p4::v1::TableEntry_IdleTimeout*>(
      ::p4::v1::TableEntry_IdleTimeout::internal_default_instance());
  _FieldMatch_default_instance_.exact_ = const_cast< ::p4::v1::FieldMatch_Exact*>(
      ::p4::v1::FieldMatch_Exact::internal_default_instance());
  _FieldMatch_default_instance_.ternary_ = const_cast< ::p4::v1::FieldMatch_Ternary*>(
      ::p4::v1::FieldMatch_Ternary::internal_default_instance());
  _FieldMatch_default_instance_.lpm_ = const_cast< ::p4::v1::FieldMatch_LPM*>(
      ::p4::v1::FieldMatch_LPM::internal_default_instance());
  _FieldMatch_default_instance_.range_ = const_cast< ::p4::v1::FieldMatch_Range*>(
      ::p4::v1::FieldMatch_Range::internal_default_instance());
  _FieldMatch_default_instance_.optional_ = const_cast< ::p4::v1::FieldMatch_Optional*>(
      ::p4::v1::FieldMatch_Optional::internal_default_instance());
  _FieldMatch_default_instance_.other_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _TableAction_default_instance_.action_ = const_cast< ::p4::v1::Action*>(
      ::p4::v1::Action::internal_default_instance());
  _TableAction_default_instance_.action_profile_member_id_ = 0u;
  _TableAction_default_instance_.action_profile_group_id_ = 0u;
  _TableAction_default_instance_.action_profile_action_set_ = const_cast< ::p4::v1::ActionProfileActionSet*>(
      ::p4::v1::ActionProfileActionSet::internal_default_instance());
  _ActionProfileAction_default_instance_.get_mutable()->action_ = const_cast< ::p4::v1::Action*>(
      ::p4::v1::Action::internal_default_instance());
  _ActionProfileMember_default_instance_.get_mutable()->action_ = const_cast< ::p4::v1::Action*>(
      ::p4::v1::Action::internal_default_instance());
  _MeterEntry_default_instance_.get_mutable()->index_ = const_cast< ::p4::v1::Index*>(
      ::p4::v1::Index::internal_default_instance());
  _MeterEntry_default_instance_.get_mutable()->config_ = const_cast< ::p4::v1::MeterConfig*>(
      ::p4::v1::MeterConfig::internal_default_instance());
  _DirectMeterEntry_default_instance_.get_mutable()->table_entry_ = const_cast< ::p4::v1::TableEntry*>(
      ::p4::v1::TableEntry::internal_default_instance());
  _DirectMeterEntry_default_instance_.get_mutable()->config_ = const_cast< ::p4::v1::MeterConfig*>(
      ::p4::v1::MeterConfig::internal_default_instance());
  _CounterEntry_default_instance_.get_mutable()->index_ = const_cast< ::p4::v1::Index*>(
      ::p4::v1::Index::internal_default_instance());
  _CounterEntry_default_instance_.get_mutable()->data_ = const_cast< ::p4::v1::CounterData*>(
      ::p4::v1::CounterData::internal_default_instance());
  _DirectCounterEntry_default_instance_.get_mutable()->table_entry_ = const_cast< ::p4::v1::TableEntry*>(
      ::p4::v1::TableEntry::internal_default_instance());
  _DirectCounterEntry_default_instance_.get_mutable()->data_ = const_cast< ::p4::v1::CounterData*>(
      ::p4::v1::CounterData::internal_default_instance());
  _PacketReplicationEngineEntry_default_instance_.multicast_group_entry_ = const_cast< ::p4::v1::MulticastGroupEntry*>(
      ::p4::v1::MulticastGroupEntry::internal_default_instance());
  _PacketReplicationEngineEntry_default_instance_.clone_session_entry_ = const_cast< ::p4::v1::CloneSessionEntry*>(
      ::p4::v1::CloneSessionEntry::internal_default_instance());
  _RegisterEntry_default_instance_.get_mutable()->index_ = const_cast< ::p4::v1::Index*>(
      ::p4::v1::Index::internal_default_instance());
  _RegisterEntry_default_instance_.get_mutable()->data_ = const_cast< ::p4::v1::P4Data*>(
      ::p4::v1::P4Data::internal_default_instance());
  _DigestEntry_default_instance_.get_mutable()->config_ = const_cast< ::p4::v1::DigestEntry_Config*>(
      ::p4::v1::DigestEntry_Config::internal_default_instance());
  _StreamMessageRequest_default_instance_.arbitration_ = const_cast< ::p4::v1::MasterArbitrationUpdate*>(
      ::p4::v1::MasterArbitrationUpdate::internal_default_instance());
  _StreamMessageRequest_default_instance_.packet_ = const_cast< ::p4::v1::PacketOut*>(
      ::p4::v1::PacketOut::internal_default_instance());
  _StreamMessageRequest_default_instance_.digest_ack_ = const_cast< ::p4::v1::DigestListAck*>(
      ::p4::v1::DigestListAck::internal_default_instance());
  _StreamMessageRequest_default_instance_.other_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _StreamMessageResponse_default_instance_.arbitration_ = const_cast< ::p4::v1::MasterArbitrationUpdate*>(
      ::p4::v1::MasterArbitrationUpdate::internal_default_instance());
  _StreamMessageResponse_default_instance_.packet_ = const_cast< ::p4::v1::PacketIn*>(
      ::p4::v1::PacketIn::internal_default_instance());
  _StreamMessageResponse_default_instance_.digest_ = const_cast< ::p4::v1::DigestList*>(
      ::p4::v1::DigestList::internal_default_instance());
  _StreamMessageResponse_default_instance_.idle_timeout_notification_ = const_cast< ::p4::v1::IdleTimeoutNotification*>(
      ::p4::v1::IdleTimeoutNotification::internal_default_instance());
  _StreamMessageResponse_default_instance_.other_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _StreamMessageResponse_default_instance_.error_ = const_cast< ::p4::v1::StreamError*>(
      ::p4::v1::StreamError::internal_default_instance());
  _MasterArbitrationUpdate_default_instance_.get_mutable()->role_ = const_cast< ::p4::v1::Role*>(
      ::p4::v1::Role::internal_default_instance());
  _MasterArbitrationUpdate_default_instance_.get_mutable()->election_id_ = const_cast< ::p4::v1::Uint128*>(
      ::p4::v1::Uint128::internal_default_instance());
  _MasterArbitrationUpdate_default_instance_.get_mutable()->status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  _Role_default_instance_.get_mutable()->config_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _StreamError_default_instance_.packet_out_ = const_cast< ::p4::v1::PacketOutError*>(
      ::p4::v1::PacketOutError::internal_default_instance());
  _StreamError_default_instance_.digest_list_ack_ = const_cast< ::p4::v1::DigestListAckError*>(
      ::p4::v1::DigestListAckError::internal_default_instance());
  _StreamError_default_instance_.other_ = const_cast< ::p4::v1::StreamOtherError*>(
      ::p4::v1::StreamOtherError::internal_default_instance());
  _PacketOutError_default_instance_.get_mutable()->packet_out_ = const_cast< ::p4::v1::PacketOut*>(
      ::p4::v1::PacketOut::internal_default_instance());
  _DigestListAckError_default_instance_.get_mutable()->digest_list_ack_ = const_cast< ::p4::v1::DigestListAck*>(
      ::p4::v1::DigestListAck::internal_default_instance());
  _StreamOtherError_default_instance_.get_mutable()->other_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  _SetForwardingPipelineConfigRequest_default_instance_.get_mutable()->election_id_ = const_cast< ::p4::v1::Uint128*>(
      ::p4::v1::Uint128::internal_default_instance());
  _SetForwardingPipelineConfigRequest_default_instance_.get_mutable()->config_ = const_cast< ::p4::v1::ForwardingPipelineConfig*>(
      ::p4::v1::ForwardingPipelineConfig::internal_default_instance());
  _ForwardingPipelineConfig_default_instance_.get_mutable()->p4info_ = const_cast< ::p4::config::v1::P4Info*>(
      ::p4::config::v1::P4Info::internal_default_instance());
  _ForwardingPipelineConfig_default_instance_.get_mutable()->cookie_ = const_cast< ::p4::v1::ForwardingPipelineConfig_Cookie*>(
      ::p4::v1::ForwardingPipelineConfig_Cookie::internal_default_instance());
  _GetForwardingPipelineConfigResponse_default_instance_.get_mutable()->config_ = const_cast< ::p4::v1::ForwardingPipelineConfig*>(
      ::p4::v1::ForwardingPipelineConfig::internal_default_instance());
  _Error_default_instance_.get_mutable()->details_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025p4/v1/p4runtime.proto\022\005p4.v1\032\031google/p"
      "rotobuf/any.proto\032\027google/rpc/status.pro"
      "to\032\031p4/config/v1/p4info.proto\032\022p4/v1/p4d"
      "ata.proto\"\372\001\n\014WriteRequest\022\021\n\tdevice_id\030"
      "\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022#\n\013election_id\030\003 "
      "\001(\0132\016.p4.v1.Uint128\022\036\n\007updates\030\004 \003(\0132\r.p"
      "4.v1.Update\0220\n\tatomicity\030\005 \001(\0162\035.p4.v1.W"
      "riteRequest.Atomicity\"O\n\tAtomicity\022\025\n\021CO"
      "NTINUE_ON_ERROR\020\000\022\025\n\021ROLLBACK_ON_ERROR\020\001"
      "\022\024\n\020DATAPLANE_ATOMIC\020\002\"\017\n\rWriteResponse\""
      "A\n\013ReadRequest\022\021\n\tdevice_id\030\001 \001(\004\022\037\n\010ent"
      "ities\030\002 \003(\0132\r.p4.v1.Entity\"/\n\014ReadRespon"
      "se\022\037\n\010entities\030\001 \003(\0132\r.p4.v1.Entity\"\206\001\n\006"
      "Update\022 \n\004type\030\001 \001(\0162\022.p4.v1.Update.Type"
      "\022\035\n\006entity\030\002 \001(\0132\r.p4.v1.Entity\";\n\004Type\022"
      "\017\n\013UNSPECIFIED\020\000\022\n\n\006INSERT\020\001\022\n\n\006MODIFY\020\002"
      "\022\n\n\006DELETE\020\003\"\207\005\n\006Entity\022*\n\014extern_entry\030"
      "\001 \001(\0132\022.p4.v1.ExternEntryH\000\022(\n\013table_ent"
      "ry\030\002 \001(\0132\021.p4.v1.TableEntryH\000\022;\n\025action_"
      "profile_member\030\003 \001(\0132\032.p4.v1.ActionProfi"
      "leMemberH\000\0229\n\024action_profile_group\030\004 \001(\013"
      "2\031.p4.v1.ActionProfileGroupH\000\022(\n\013meter_e"
      "ntry\030\005 \001(\0132\021.p4.v1.MeterEntryH\000\0225\n\022direc"
      "t_meter_entry\030\006 \001(\0132\027.p4.v1.DirectMeterE"
      "ntryH\000\022,\n\rcounter_entry\030\007 \001(\0132\023.p4.v1.Co"
      "unterEntryH\000\0229\n\024direct_counter_entry\030\010 \001"
      "(\0132\031.p4.v1.DirectCounterEntryH\000\022N\n\037packe"
      "t_replication_engine_entry\030\t \001(\0132#.p4.v1"
      ".PacketReplicationEngineEntryH\000\022/\n\017value"
      "_set_entry\030\n \001(\0132\024.p4.v1.ValueSetEntryH\000"
      "\022.\n\016register_entry\030\013 \001(\0132\024.p4.v1.Registe"
      "rEntryH\000\022*\n\014digest_entry\030\014 \001(\0132\022.p4.v1.D"
      "igestEntryH\000B\010\n\006entity\"]\n\013ExternEntry\022\026\n"
      "\016extern_type_id\030\001 \001(\r\022\021\n\textern_id\030\002 \001(\r"
      "\022#\n\005entry\030\003 \001(\0132\024.google.protobuf.Any\"\220\003"
      "\n\nTableEntry\022\020\n\010table_id\030\001 \001(\r\022 \n\005match\030"
      "\002 \003(\0132\021.p4.v1.FieldMatch\022\"\n\006action\030\003 \001(\013"
      "2\022.p4.v1.TableAction\022\020\n\010priority\030\004 \001(\005\022\037"
      "\n\023controller_metadata\030\005 \001(\004B\002\030\001\022(\n\014meter"
      "_config\030\006 \001(\0132\022.p4.v1.MeterConfig\022(\n\014cou"
      "nter_data\030\007 \001(\0132\022.p4.v1.CounterData\022\031\n\021i"
      "s_default_action\030\010 \001(\010\022\027\n\017idle_timeout_n"
      "s\030\t \001(\003\022:\n\023time_since_last_hit\030\n \001(\0132\035.p"
      "4.v1.TableEntry.IdleTimeout\022\020\n\010metadata\030"
      "\013 \001(\014\032!\n\013IdleTimeout\022\022\n\nelapsed_ns\030\001 \001(\003"
      "\"\332\003\n\nFieldMatch\022\020\n\010field_id\030\001 \001(\r\022(\n\005exa"
      "ct\030\002 \001(\0132\027.p4.v1.FieldMatch.ExactH\000\022,\n\007t"
      "ernary\030\003 \001(\0132\031.p4.v1.FieldMatch.TernaryH"
      "\000\022$\n\003lpm\030\004 \001(\0132\025.p4.v1.FieldMatch.LPMH\000\022"
      "(\n\005range\030\006 \001(\0132\027.p4.v1.FieldMatch.RangeH"
      "\000\022.\n\010optional\030\007 \001(\0132\032.p4.v1.FieldMatch.O"
      "ptionalH\000\022%\n\005other\030d \001(\0132\024.google.protob"
      "uf.AnyH\000\032\026\n\005Exact\022\r\n\005value\030\001 \001(\014\032&\n\007Tern"
      "ary\022\r\n\005value\030\001 \001(\014\022\014\n\004mask\030\002 \001(\014\032(\n\003LPM\022"
      "\r\n\005value\030\001 \001(\014\022\022\n\nprefix_len\030\002 \001(\005\032\"\n\005Ra"
      "nge\022\013\n\003low\030\001 \001(\014\022\014\n\004high\030\002 \001(\014\032\031\n\010Option"
      "al\022\r\n\005value\030\001 \001(\014B\022\n\020field_match_type\"\301\001"
      "\n\013TableAction\022\037\n\006action\030\001 \001(\0132\r.p4.v1.Ac"
      "tionH\000\022\"\n\030action_profile_member_id\030\002 \001(\r"
      "H\000\022!\n\027action_profile_group_id\030\003 \001(\rH\000\022B\n"
      "\031action_profile_action_set\030\004 \001(\0132\035.p4.v1"
      ".ActionProfileActionSetH\000B\006\n\004type\"j\n\006Act"
      "ion\022\021\n\taction_id\030\001 \001(\r\022#\n\006params\030\004 \003(\0132\023"
      ".p4.v1.Action.Param\032(\n\005Param\022\020\n\010param_id"
      "\030\002 \001(\r\022\r\n\005value\030\003 \001(\014\"T\n\026ActionProfileAc"
      "tionSet\022:\n\026action_profile_actions\030\001 \003(\0132"
      "\032.p4.v1.ActionProfileAction\"S\n\023ActionPro"
      "fileAction\022\035\n\006action\030\001 \001(\0132\r.p4.v1.Actio"
      "n\022\016\n\006weight\030\002 \001(\005\022\r\n\005watch\030\003 \001(\005\"b\n\023Acti"
      "onProfileMember\022\031\n\021action_profile_id\030\001 \001"
      "(\r\022\021\n\tmember_id\030\002 \001(\r\022\035\n\006action\030\003 \001(\0132\r."
      "p4.v1.Action\"\302\001\n\022ActionProfileGroup\022\031\n\021a"
      "ction_profile_id\030\001 \001(\r\022\020\n\010group_id\030\002 \001(\r"
      "\0221\n\007members\030\003 \003(\0132 .p4.v1.ActionProfileG"
      "roup.Member\022\020\n\010max_size\030\004 \001(\005\032:\n\006Member\022"
      "\021\n\tmember_id\030\001 \001(\r\022\016\n\006weight\030\002 \001(\005\022\r\n\005wa"
      "tch\030\003 \001(\r\"\026\n\005Index\022\r\n\005index\030\001 \001(\003\"_\n\nMet"
      "erEntry\022\020\n\010meter_id\030\001 \001(\r\022\033\n\005index\030\002 \001(\013"
      "2\014.p4.v1.Index\022\"\n\006config\030\003 \001(\0132\022.p4.v1.M"
      "eterConfig\"^\n\020DirectMeterEntry\022&\n\013table_"
      "entry\030\001 \001(\0132\021.p4.v1.TableEntry\022\"\n\006config"
      "\030\002 \001(\0132\022.p4.v1.MeterConfig\"G\n\013MeterConfi"
      "g\022\013\n\003cir\030\001 \001(\003\022\016\n\006cburst\030\002 \001(\003\022\013\n\003pir\030\003 "
      "\001(\003\022\016\n\006pburst\030\004 \001(\003\"a\n\014CounterEntry\022\022\n\nc"
      "ounter_id\030\001 \001(\r\022\033\n\005index\030\002 \001(\0132\014.p4.v1.I"
      "ndex\022 \n\004data\030\003 \001(\0132\022.p4.v1.CounterData\"^"
      "\n\022DirectCounterEntry\022&\n\013table_entry\030\001 \001("
      "\0132\021.p4.v1.TableEntry\022 \n\004data\030\002 \001(\0132\022.p4."
      "v1.CounterData\"7\n\013CounterData\022\022\n\nbyte_co"
      "unt\030\001 \001(\003\022\024\n\014packet_count\030\002 \001(\003\"\234\001\n\034Pack"
      "etReplicationEngineEntry\022;\n\025multicast_gr"
      "oup_entry\030\001 \001(\0132\032.p4.v1.MulticastGroupEn"
      "tryH\000\0227\n\023clone_session_entry\030\002 \001(\0132\030.p4."
      "v1.CloneSessionEntryH\000B\006\n\004type\"0\n\007Replic"
      "a\022\023\n\013egress_port\030\001 \001(\r\022\020\n\010instance\030\002 \001(\r"
      "\"S\n\023MulticastGroupEntry\022\032\n\022multicast_gro"
      "up_id\030\001 \001(\r\022 \n\010replicas\030\002 \003(\0132\016.p4.v1.Re"
      "plica\"\200\001\n\021CloneSessionEntry\022\022\n\nsession_i"
      "d\030\001 \001(\r\022 \n\010replicas\030\002 \003(\0132\016.p4.v1.Replic"
      "a\022\030\n\020class_of_service\030\003 \001(\r\022\033\n\023packet_le"
      "ngth_bytes\030\004 \001(\005\"2\n\016ValueSetMember\022 \n\005ma"
      "tch\030\001 \003(\0132\021.p4.v1.FieldMatch\"M\n\rValueSet"
      "Entry\022\024\n\014value_set_id\030\001 \001(\r\022&\n\007members\030\002"
      " \003(\0132\025.p4.v1.ValueSetMember\"^\n\rRegisterE"
      "ntry\022\023\n\013register_id\030\001 \001(\r\022\033\n\005index\030\002 \001(\013"
      "2\014.p4.v1.Index\022\033\n\004data\030\003 \001(\0132\r.p4.v1.P4D"
      "ata\"\234\001\n\013DigestEntry\022\021\n\tdigest_id\030\001 \001(\r\022)"
      "\n\006config\030\002 \001(\0132\031.p4.v1.DigestEntry.Confi"
      "g\032O\n\006Config\022\026\n\016max_timeout_ns\030\001 \001(\003\022\025\n\rm"
      "ax_list_size\030\002 \001(\005\022\026\n\016ack_timeout_ns\030\003 \001"
      "(\003\"\316\001\n\024StreamMessageRequest\0225\n\013arbitrati"
      "on\030\001 \001(\0132\036.p4.v1.MasterArbitrationUpdate"
      "H\000\022\"\n\006packet\030\002 \001(\0132\020.p4.v1.PacketOutH\000\022*"
      "\n\ndigest_ack\030\003 \001(\0132\024.p4.v1.DigestListAck"
      "H\000\022%\n\005other\030\004 \001(\0132\024.google.protobuf.AnyH"
      "\000B\010\n\006update\"E\n\tPacketOut\022\017\n\007payload\030\001 \001("
      "\014\022\'\n\010metadata\030\002 \003(\0132\025.p4.v1.PacketMetada"
      "ta\"3\n\rDigestListAck\022\021\n\tdigest_id\030\001 \001(\r\022\017"
      "\n\007list_id\030\002 \001(\004\"\261\002\n\025StreamMessageRespons"
      "e\0225\n\013arbitration\030\001 \001(\0132\036.p4.v1.MasterArb"
      "itrationUpdateH\000\022!\n\006packet\030\002 \001(\0132\017.p4.v1"
      ".PacketInH\000\022#\n\006digest\030\003 \001(\0132\021.p4.v1.Dige"
      "stListH\000\022C\n\031idle_timeout_notification\030\004 "
      "\001(\0132\036.p4.v1.IdleTimeoutNotificationH\000\022%\n"
      "\005other\030\005 \001(\0132\024.google.protobuf.AnyH\000\022#\n\005"
      "error\030\006 \001(\0132\022.p4.v1.StreamErrorH\000B\010\n\006upd"
      "ate\"D\n\010PacketIn\022\017\n\007payload\030\001 \001(\014\022\'\n\010meta"
      "data\030\002 \003(\0132\025.p4.v1.PacketMetadata\"`\n\nDig"
      "estList\022\021\n\tdigest_id\030\001 \001(\r\022\017\n\007list_id\030\002 "
      "\001(\004\022\033\n\004data\030\003 \003(\0132\r.p4.v1.P4Data\022\021\n\ttime"
      "stamp\030\004 \001(\003\"4\n\016PacketMetadata\022\023\n\013metadat"
      "a_id\030\001 \001(\r\022\r\n\005value\030\002 \001(\014\"\220\001\n\027MasterArbi"
      "trationUpdate\022\021\n\tdevice_id\030\001 \001(\004\022\031\n\004role"
      "\030\002 \001(\0132\013.p4.v1.Role\022#\n\013election_id\030\003 \001(\013"
      "2\016.p4.v1.Uint128\022\"\n\006status\030\004 \001(\0132\022.googl"
      "e.rpc.Status\"8\n\004Role\022\n\n\002id\030\001 \001(\004\022$\n\006conf"
      "ig\030\002 \001(\0132\024.google.protobuf.Any\"T\n\027IdleTi"
      "meoutNotification\022&\n\013table_entry\030\001 \003(\0132\021"
      ".p4.v1.TableEntry\022\021\n\ttimestamp\030\002 \001(\003\"\353\001\n"
      "\013StreamError\022\026\n\016canonical_code\030\001 \001(\005\022\017\n\007"
      "message\030\002 \001(\t\022\r\n\005space\030\003 \001(\t\022\014\n\004code\030\004 \001"
      "(\005\022+\n\npacket_out\030\005 \001(\0132\025.p4.v1.PacketOut"
      "ErrorH\000\0224\n\017digest_list_ack\030\006 \001(\0132\031.p4.v1"
      ".DigestListAckErrorH\000\022(\n\005other\030\007 \001(\0132\027.p"
      "4.v1.StreamOtherErrorH\000B\t\n\007details\"6\n\016Pa"
      "cketOutError\022$\n\npacket_out\030\001 \001(\0132\020.p4.v1"
      ".PacketOut\"C\n\022DigestListAckError\022-\n\017dige"
      "st_list_ack\030\001 \001(\0132\024.p4.v1.DigestListAck\""
      "7\n\020StreamOtherError\022#\n\005other\030\001 \001(\0132\024.goo"
      "gle.protobuf.Any\"$\n\007Uint128\022\014\n\004high\030\001 \001("
      "\004\022\013\n\003low\030\002 \001(\004\"\331\002\n\"SetForwardingPipeline"
      "ConfigRequest\022\021\n\tdevice_id\030\001 \001(\004\022\017\n\007role"
      "_id\030\002 \001(\004\022#\n\013election_id\030\003 \001(\0132\016.p4.v1.U"
      "int128\022@\n\006action\030\004 \001(\01620.p4.v1.SetForwar"
      "dingPipelineConfigRequest.Action\022/\n\006conf"
      "ig\030\005 \001(\0132\037.p4.v1.ForwardingPipelineConfi"
      "g\"w\n\006Action\022\017\n\013UNSPECIFIED\020\000\022\n\n\006VERIFY\020\001"
      "\022\023\n\017VERIFY_AND_SAVE\020\002\022\025\n\021VERIFY_AND_COMM"
      "IT\020\003\022\n\n\006COMMIT\020\004\022\030\n\024RECONCILE_AND_COMMIT"
      "\020\005\"%\n#SetForwardingPipelineConfigRespons"
      "e\"\254\001\n\030ForwardingPipelineConfig\022$\n\006p4info"
      "\030\001 \001(\0132\024.p4.config.v1.P4Info\022\030\n\020p4_devic"
      "e_config\030\002 \001(\014\0226\n\006cookie\030\003 \001(\0132&.p4.v1.F"
      "orwardingPipelineConfig.Cookie\032\030\n\006Cookie"
      "\022\016\n\006cookie\030\001 \001(\004\"\345\001\n\"GetForwardingPipeli"
      "neConfigRequest\022\021\n\tdevice_id\030\001 \001(\004\022M\n\rre"
      "sponse_type\030\002 \001(\01626.p4.v1.GetForwardingP"
      "ipelineConfigRequest.ResponseType\"]\n\014Res"
      "ponseType\022\007\n\003ALL\020\000\022\017\n\013COOKIE_ONLY\020\001\022\025\n\021P"
      "4INFO_AND_COOKIE\020\002\022\034\n\030DEVICE_CONFIG_AND_"
      "COOKIE\020\003\"V\n#GetForwardingPipelineConfigR"
      "esponse\022/\n\006config\030\001 \001(\0132\037.p4.v1.Forwardi"
      "ngPipelineConfig\"t\n\005Error\022\026\n\016canonical_c"
      "ode\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\r\n\005space\030\003 \001("
      "\t\022\014\n\004code\030\004 \001(\005\022%\n\007details\030\005 \001(\0132\024.googl"
      "e.protobuf.Any\"\025\n\023CapabilitiesRequest\"5\n"
      "\024CapabilitiesResponse\022\035\n\025p4runtime_api_v"
      "ersion\030\001 \001(\t*\212\001\n\007SdnPort\022\024\n\020SDN_PORT_UNK"
      "NOWN\020\000\022\020\n\014SDN_PORT_MIN\020\001\022\031\n\014SDN_PORT_MAX"
      "\020\377\375\377\377\377\377\377\377\377\001\022!\n\024SDN_PORT_RECIRCULATE\020\372\377\377\377"
      "\377\377\377\377\377\001\022\031\n\014SDN_PORT_CPU\020\375\377\377\377\377\377\377\377\377\0012\203\004\n\tP4"
      "Runtime\0224\n\005Write\022\023.p4.v1.WriteRequest\032\024."
      "p4.v1.WriteResponse\"\000\0223\n\004Read\022\022.p4.v1.Re"
      "adRequest\032\023.p4.v1.ReadResponse\"\0000\001\022v\n\033Se"
      "tForwardingPipelineConfig\022).p4.v1.SetFor"
      "wardingPipelineConfigRequest\032*.p4.v1.Set"
      "ForwardingPipelineConfigResponse\"\000\022v\n\033Ge"
      "tForwardingPipelineConfig\022).p4.v1.GetFor"
      "wardingPipelineConfigRequest\032*.p4.v1.Get"
      "ForwardingPipelineConfigResponse\"\000\022P\n\rSt"
      "reamChannel\022\033.p4.v1.StreamMessageRequest"
      "\032\034.p4.v1.StreamMessageResponse\"\000(\0010\001\022I\n\014"
      "Capabilities\022\032.p4.v1.CapabilitiesRequest"
      "\032\033.p4.v1.CapabilitiesResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7759);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "p4/v1/p4runtime.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::google::rpc::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
  ::p4::config::v1::protobuf_p4_2fconfig_2fv1_2fp4info_2eproto::AddDescriptors();
  ::p4::v1::protobuf_p4_2fv1_2fp4data_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_p4_2fv1_2fp4runtime_2eproto

const ::google::protobuf::EnumDescriptor* WriteRequest_Atomicity_descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_enum_descriptors[0];
}
bool WriteRequest_Atomicity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WriteRequest_Atomicity WriteRequest::CONTINUE_ON_ERROR;
const WriteRequest_Atomicity WriteRequest::ROLLBACK_ON_ERROR;
const WriteRequest_Atomicity WriteRequest::DATAPLANE_ATOMIC;
const WriteRequest_Atomicity WriteRequest::Atomicity_MIN;
const WriteRequest_Atomicity WriteRequest::Atomicity_MAX;
const int WriteRequest::Atomicity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Update_Type_descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_enum_descriptors[1];
}
bool Update_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Update_Type Update::UNSPECIFIED;
const Update_Type Update::INSERT;
const Update_Type Update::MODIFY;
const Update_Type Update::DELETE;
const Update_Type Update::Type_MIN;
const Update_Type Update::Type_MAX;
const int Update::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SetForwardingPipelineConfigRequest_Action_descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_enum_descriptors[2];
}
bool SetForwardingPipelineConfigRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::UNSPECIFIED;
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::VERIFY;
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::VERIFY_AND_SAVE;
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::VERIFY_AND_COMMIT;
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::COMMIT;
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::RECONCILE_AND_COMMIT;
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::Action_MIN;
const SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::Action_MAX;
const int SetForwardingPipelineConfigRequest::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GetForwardingPipelineConfigRequest_ResponseType_descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_enum_descriptors[3];
}
bool GetForwardingPipelineConfigRequest_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::ALL;
const GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::COOKIE_ONLY;
const GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::P4INFO_AND_COOKIE;
const GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::DEVICE_CONFIG_AND_COOKIE;
const GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::ResponseType_MIN;
const GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::ResponseType_MAX;
const int GetForwardingPipelineConfigRequest::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdnPort_descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_enum_descriptors[4];
}
bool SdnPort_IsValid(int value) {
  switch (value) {
    case -257:
    case -6:
    case -3:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteRequest::kDeviceIdFieldNumber;
const int WriteRequest::kRoleIdFieldNumber;
const int WriteRequest::kElectionIdFieldNumber;
const int WriteRequest::kUpdatesFieldNumber;
const int WriteRequest::kAtomicityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteRequest::WriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      updates_(from.updates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_election_id()) {
    election_id_ = new ::p4::v1::Uint128(*from.election_id_);
  } else {
    election_id_ = NULL;
  }
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&atomicity_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(atomicity_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.WriteRequest)
}

void WriteRequest::SharedCtor() {
  ::memset(&election_id_, 0, reinterpret_cast<char*>(&atomicity_) -
    reinterpret_cast<char*>(&election_id_) + sizeof(atomicity_));
  _cached_size_ = 0;
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.WriteRequest)
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete election_id_;
  }
}

void WriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteRequest::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[0].descriptor;
}

const WriteRequest& WriteRequest::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

WriteRequest* WriteRequest::New(::google::protobuf::Arena* arena) const {
  WriteRequest* n = new WriteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.WriteRequest)
  updates_.Clear();
  if (GetArenaNoVirtual() == NULL && election_id_ != NULL) {
    delete election_id_;
  }
  election_id_ = NULL;
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&atomicity_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(atomicity_));
}

bool WriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.WriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 device_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 role_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Uint128 election_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_election_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.Update updates = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .p4.v1.WriteRequest.Atomicity atomicity = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_atomicity(static_cast< ::p4::v1::WriteRequest_Atomicity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.WriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.WriteRequest)
  return false;
#undef DO_
}

void WriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.WriteRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->device_id(), output);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->election_id_, output);
  }

  // repeated .p4.v1.Update updates = 4;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  // .p4.v1.WriteRequest.Atomicity atomicity = 5;
  if (this->atomicity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->atomicity(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.WriteRequest)
}

::google::protobuf::uint8* WriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.WriteRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->device_id(), target);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->election_id_, false, target);
  }

  // repeated .p4.v1.Update updates = 4;
  for (unsigned int i = 0, n = this->updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->updates(i), false, target);
  }

  // .p4.v1.WriteRequest.Atomicity atomicity = 5;
  if (this->atomicity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->atomicity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.WriteRequest)
  size_t total_size = 0;

  // repeated .p4.v1.Update updates = 4;
  {
    unsigned int count = this->updates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updates(i));
    }
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->election_id_);
  }

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->role_id());
  }

  // .p4.v1.WriteRequest.Atomicity atomicity = 5;
  if (this->atomicity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->atomicity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.WriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.WriteRequest)
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  updates_.MergeFrom(from.updates_);
  if (from.has_election_id()) {
    mutable_election_id()->::p4::v1::Uint128::MergeFrom(from.election_id());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.atomicity() != 0) {
    set_atomicity(from.atomicity());
  }
}

void WriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::Swap(WriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteRequest::InternalSwap(WriteRequest* other) {
  updates_.UnsafeArenaSwap(&other->updates_);
  std::swap(election_id_, other->election_id_);
  std::swap(device_id_, other->device_id_);
  std::swap(role_id_, other->role_id_);
  std::swap(atomicity_, other->atomicity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteRequest::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteRequest

// uint64 device_id = 1;
void WriteRequest::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WriteRequest::device_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.WriteRequest.device_id)
  return device_id_;
}
void WriteRequest::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.WriteRequest.device_id)
}

// uint64 role_id = 2;
void WriteRequest::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WriteRequest::role_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.WriteRequest.role_id)
  return role_id_;
}
void WriteRequest::set_role_id(::google::protobuf::uint64 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.WriteRequest.role_id)
}

// .p4.v1.Uint128 election_id = 3;
bool WriteRequest::has_election_id() const {
  return this != internal_default_instance() && election_id_ != NULL;
}
void WriteRequest::clear_election_id() {
  if (GetArenaNoVirtual() == NULL && election_id_ != NULL) delete election_id_;
  election_id_ = NULL;
}
const ::p4::v1::Uint128& WriteRequest::election_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.WriteRequest.election_id)
  return election_id_ != NULL ? *election_id_
                         : *::p4::v1::Uint128::internal_default_instance();
}
::p4::v1::Uint128* WriteRequest::mutable_election_id() {
  
  if (election_id_ == NULL) {
    election_id_ = new ::p4::v1::Uint128;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.WriteRequest.election_id)
  return election_id_;
}
::p4::v1::Uint128* WriteRequest::release_election_id() {
  // @@protoc_insertion_point(field_release:p4.v1.WriteRequest.election_id)
  
  ::p4::v1::Uint128* temp = election_id_;
  election_id_ = NULL;
  return temp;
}
void WriteRequest::set_allocated_election_id(::p4::v1::Uint128* election_id) {
  delete election_id_;
  election_id_ = election_id;
  if (election_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.WriteRequest.election_id)
}

// repeated .p4.v1.Update updates = 4;
int WriteRequest::updates_size() const {
  return updates_.size();
}
void WriteRequest::clear_updates() {
  updates_.Clear();
}
const ::p4::v1::Update& WriteRequest::updates(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.WriteRequest.updates)
  return updates_.Get(index);
}
::p4::v1::Update* WriteRequest::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.WriteRequest.updates)
  return updates_.Mutable(index);
}
::p4::v1::Update* WriteRequest::add_updates() {
  // @@protoc_insertion_point(field_add:p4.v1.WriteRequest.updates)
  return updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::Update >*
WriteRequest::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.WriteRequest.updates)
  return &updates_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::Update >&
WriteRequest::updates() const {
  // @@protoc_insertion_point(field_list:p4.v1.WriteRequest.updates)
  return updates_;
}

// .p4.v1.WriteRequest.Atomicity atomicity = 5;
void WriteRequest::clear_atomicity() {
  atomicity_ = 0;
}
::p4::v1::WriteRequest_Atomicity WriteRequest::atomicity() const {
  // @@protoc_insertion_point(field_get:p4.v1.WriteRequest.atomicity)
  return static_cast< ::p4::v1::WriteRequest_Atomicity >(atomicity_);
}
void WriteRequest::set_atomicity(::p4::v1::WriteRequest_Atomicity value) {
  
  atomicity_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.WriteRequest.atomicity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteResponse::WriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.WriteResponse)
}
WriteResponse::WriteResponse(const WriteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.WriteResponse)
}

void WriteResponse::SharedCtor() {
  _cached_size_ = 0;
}

WriteResponse::~WriteResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.WriteResponse)
  SharedDtor();
}

void WriteResponse::SharedDtor() {
}

void WriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteResponse::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[1].descriptor;
}

const WriteResponse& WriteResponse::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

WriteResponse* WriteResponse::New(::google::protobuf::Arena* arena) const {
  WriteResponse* n = new WriteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.WriteResponse)
}

bool WriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.WriteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.WriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.WriteResponse)
  return false;
#undef DO_
}

void WriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.WriteResponse)
  // @@protoc_insertion_point(serialize_end:p4.v1.WriteResponse)
}

::google::protobuf::uint8* WriteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.WriteResponse)
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.WriteResponse)
  return target;
}

size_t WriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.WriteResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.WriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.WriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.WriteResponse)
    MergeFrom(*source);
  }
}

void WriteResponse::MergeFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.WriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void WriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteResponse::CopyFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResponse::IsInitialized() const {
  return true;
}

void WriteResponse::Swap(WriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteResponse::InternalSwap(WriteResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteResponse::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRequest::kDeviceIdFieldNumber;
const int ReadRequest::kEntitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRequest::ReadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ReadRequest)
}
ReadRequest::ReadRequest(const ReadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entities_(from.entities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_ = from.device_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ReadRequest)
}

void ReadRequest::SharedCtor() {
  device_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
}

void ReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[2].descriptor;
}

const ReadRequest& ReadRequest::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadRequest* ReadRequest::New(::google::protobuf::Arena* arena) const {
  ReadRequest* n = new ReadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ReadRequest)
  entities_.Clear();
  device_id_ = GOOGLE_ULONGLONG(0);
}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ReadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 device_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.Entity entities = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ReadRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->device_id(), output);
  }

  // repeated .p4.v1.Entity entities = 2;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entities(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ReadRequest)
}

::google::protobuf::uint8* ReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ReadRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->device_id(), target);
  }

  // repeated .p4.v1.Entity entities = 2;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entities(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ReadRequest)
  return target;
}

size_t ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ReadRequest)
  size_t total_size = 0;

  // repeated .p4.v1.Entity entities = 2;
  {
    unsigned int count = this->entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entities(i));
    }
  }

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entities_.MergeFrom(from.entities_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRequest::InternalSwap(ReadRequest* other) {
  entities_.UnsafeArenaSwap(&other->entities_);
  std::swap(device_id_, other->device_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadRequest

// uint64 device_id = 1;
void ReadRequest::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ReadRequest::device_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ReadRequest.device_id)
  return device_id_;
}
void ReadRequest::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ReadRequest.device_id)
}

// repeated .p4.v1.Entity entities = 2;
int ReadRequest::entities_size() const {
  return entities_.size();
}
void ReadRequest::clear_entities() {
  entities_.Clear();
}
const ::p4::v1::Entity& ReadRequest::entities(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.ReadRequest.entities)
  return entities_.Get(index);
}
::p4::v1::Entity* ReadRequest::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.ReadRequest.entities)
  return entities_.Mutable(index);
}
::p4::v1::Entity* ReadRequest::add_entities() {
  // @@protoc_insertion_point(field_add:p4.v1.ReadRequest.entities)
  return entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::Entity >*
ReadRequest::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.ReadRequest.entities)
  return &entities_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::Entity >&
ReadRequest::entities() const {
  // @@protoc_insertion_point(field_list:p4.v1.ReadRequest.entities)
  return entities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadResponse::kEntitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadResponse::ReadResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ReadResponse)
}
ReadResponse::ReadResponse(const ReadResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entities_(from.entities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.ReadResponse)
}

void ReadResponse::SharedCtor() {
  _cached_size_ = 0;
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.ReadResponse)
  SharedDtor();
}

void ReadResponse::SharedDtor() {
}

void ReadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadResponse::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[3].descriptor;
}

const ReadResponse& ReadResponse::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReadResponse* ReadResponse::New(::google::protobuf::Arena* arena) const {
  ReadResponse* n = new ReadResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ReadResponse)
  entities_.Clear();
}

bool ReadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ReadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .p4.v1.Entity entities = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ReadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ReadResponse)
  return false;
#undef DO_
}

void ReadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ReadResponse)
  // repeated .p4.v1.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ReadResponse)
}

::google::protobuf::uint8* ReadResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ReadResponse)
  // repeated .p4.v1.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entities(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ReadResponse)
  return target;
}

size_t ReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ReadResponse)
  size_t total_size = 0;

  // repeated .p4.v1.Entity entities = 1;
  {
    unsigned int count = this->entities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entities(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ReadResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ReadResponse)
    MergeFrom(*source);
  }
}

void ReadResponse::MergeFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entities_.MergeFrom(from.entities_);
}

void ReadResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {
  return true;
}

void ReadResponse::Swap(ReadResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadResponse::InternalSwap(ReadResponse* other) {
  entities_.UnsafeArenaSwap(&other->entities_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadResponse::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadResponse

// repeated .p4.v1.Entity entities = 1;
int ReadResponse::entities_size() const {
  return entities_.size();
}
void ReadResponse::clear_entities() {
  entities_.Clear();
}
const ::p4::v1::Entity& ReadResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.ReadResponse.entities)
  return entities_.Get(index);
}
::p4::v1::Entity* ReadResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.ReadResponse.entities)
  return entities_.Mutable(index);
}
::p4::v1::Entity* ReadResponse::add_entities() {
  // @@protoc_insertion_point(field_add:p4.v1.ReadResponse.entities)
  return entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::Entity >*
ReadResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.ReadResponse.entities)
  return &entities_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::Entity >&
ReadResponse::entities() const {
  // @@protoc_insertion_point(field_list:p4.v1.ReadResponse.entities)
  return entities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Update::kTypeFieldNumber;
const int Update::kEntityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Update::Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Update)
}
Update::Update(const Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity()) {
    entity_ = new ::p4::v1::Entity(*from.entity_);
  } else {
    entity_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Update)
}

void Update::SharedCtor() {
  ::memset(&entity_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&entity_) + sizeof(type_));
  _cached_size_ = 0;
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:p4.v1.Update)
  SharedDtor();
}

void Update::SharedDtor() {
  if (this != internal_default_instance()) {
    delete entity_;
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[4].descriptor;
}

const Update& Update::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Update* Update::New(::google::protobuf::Arena* arena) const {
  Update* n = new Update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Update)
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
  type_ = 0;
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.Update.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::p4::v1::Update_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Entity entity = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Update)
  return false;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Update)
  // .p4.v1.Update.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .p4.v1.Entity entity = 2;
  if (this->has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->entity_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Update)
}

::google::protobuf::uint8* Update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Update)
  // .p4.v1.Update.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .p4.v1.Entity entity = 2;
  if (this->has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->entity_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Update)
  size_t total_size = 0;

  // .p4.v1.Entity entity = 2;
  if (this->has_entity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_);
  }

  // .p4.v1.Update.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Update)
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity()) {
    mutable_entity()->::p4::v1::Entity::MergeFrom(from.entity());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::Swap(Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Update::InternalSwap(Update* other) {
  std::swap(entity_, other->entity_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Update

// .p4.v1.Update.Type type = 1;
void Update::clear_type() {
  type_ = 0;
}
::p4::v1::Update_Type Update::type() const {
  // @@protoc_insertion_point(field_get:p4.v1.Update.type)
  return static_cast< ::p4::v1::Update_Type >(type_);
}
void Update::set_type(::p4::v1::Update_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Update.type)
}

// .p4.v1.Entity entity = 2;
bool Update::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
void Update::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
const ::p4::v1::Entity& Update::entity() const {
  // @@protoc_insertion_point(field_get:p4.v1.Update.entity)
  return entity_ != NULL ? *entity_
                         : *::p4::v1::Entity::internal_default_instance();
}
::p4::v1::Entity* Update::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::p4::v1::Entity;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Update.entity)
  return entity_;
}
::p4::v1::Entity* Update::release_entity() {
  // @@protoc_insertion_point(field_release:p4.v1.Update.entity)
  
  ::p4::v1::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
void Update::set_allocated_entity(::p4::v1::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Update.entity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kExternEntryFieldNumber;
const int Entity::kTableEntryFieldNumber;
const int Entity::kActionProfileMemberFieldNumber;
const int Entity::kActionProfileGroupFieldNumber;
const int Entity::kMeterEntryFieldNumber;
const int Entity::kDirectMeterEntryFieldNumber;
const int Entity::kCounterEntryFieldNumber;
const int Entity::kDirectCounterEntryFieldNumber;
const int Entity::kPacketReplicationEngineEntryFieldNumber;
const int Entity::kValueSetEntryFieldNumber;
const int Entity::kRegisterEntryFieldNumber;
const int Entity::kDigestEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Entity)
}
Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_entity();
  switch (from.entity_case()) {
    case kExternEntry: {
      mutable_extern_entry()->::p4::v1::ExternEntry::MergeFrom(from.extern_entry());
      break;
    }
    case kTableEntry: {
      mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from.table_entry());
      break;
    }
    case kActionProfileMember: {
      mutable_action_profile_member()->::p4::v1::ActionProfileMember::MergeFrom(from.action_profile_member());
      break;
    }
    case kActionProfileGroup: {
      mutable_action_profile_group()->::p4::v1::ActionProfileGroup::MergeFrom(from.action_profile_group());
      break;
    }
    case kMeterEntry: {
      mutable_meter_entry()->::p4::v1::MeterEntry::MergeFrom(from.meter_entry());
      break;
    }
    case kDirectMeterEntry: {
      mutable_direct_meter_entry()->::p4::v1::DirectMeterEntry::MergeFrom(from.direct_meter_entry());
      break;
    }
    case kCounterEntry: {
      mutable_counter_entry()->::p4::v1::CounterEntry::MergeFrom(from.counter_entry());
      break;
    }
    case kDirectCounterEntry: {
      mutable_direct_counter_entry()->::p4::v1::DirectCounterEntry::MergeFrom(from.direct_counter_entry());
      break;
    }
    case kPacketReplicationEngineEntry: {
      mutable_packet_replication_engine_entry()->::p4::v1::PacketReplicationEngineEntry::MergeFrom(from.packet_replication_engine_entry());
      break;
    }
    case kValueSetEntry: {
      mutable_value_set_entry()->::p4::v1::ValueSetEntry::MergeFrom(from.value_set_entry());
      break;
    }
    case kRegisterEntry: {
      mutable_register_entry()->::p4::v1::RegisterEntry::MergeFrom(from.register_entry());
      break;
    }
    case kDigestEntry: {
      mutable_digest_entry()->::p4::v1::DigestEntry::MergeFrom(from.digest_entry());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.Entity)
}

void Entity::SharedCtor() {
  clear_has_entity();
  _cached_size_ = 0;
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:p4.v1.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (has_entity()) {
    clear_entity();
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[5].descriptor;
}

const Entity& Entity::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.Entity)
  switch (entity_case()) {
    case kExternEntry: {
      delete entity_.extern_entry_;
      break;
    }
    case kTableEntry: {
      delete entity_.table_entry_;
      break;
    }
    case kActionProfileMember: {
      delete entity_.action_profile_member_;
      break;
    }
    case kActionProfileGroup: {
      delete entity_.action_profile_group_;
      break;
    }
    case kMeterEntry: {
      delete entity_.meter_entry_;
      break;
    }
    case kDirectMeterEntry: {
      delete entity_.direct_meter_entry_;
      break;
    }
    case kCounterEntry: {
      delete entity_.counter_entry_;
      break;
    }
    case kDirectCounterEntry: {
      delete entity_.direct_counter_entry_;
      break;
    }
    case kPacketReplicationEngineEntry: {
      delete entity_.packet_replication_engine_entry_;
      break;
    }
    case kValueSetEntry: {
      delete entity_.value_set_entry_;
      break;
    }
    case kRegisterEntry: {
      delete entity_.register_entry_;
      break;
    }
    case kDigestEntry: {
      delete entity_.digest_entry_;
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Entity)
  clear_entity();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.ExternEntry extern_entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extern_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.TableEntry table_entry = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.ActionProfileMember action_profile_member = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_profile_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.ActionProfileGroup action_profile_group = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_profile_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.MeterEntry meter_entry = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meter_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.DirectMeterEntry direct_meter_entry = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct_meter_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.CounterEntry counter_entry = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.DirectCounterEntry direct_counter_entry = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct_counter_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet_replication_engine_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.ValueSetEntry value_set_entry = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_set_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.RegisterEntry register_entry = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.DigestEntry digest_entry = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digest_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Entity)
  // .p4.v1.ExternEntry extern_entry = 1;
  if (has_extern_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *entity_.extern_entry_, output);
  }

  // .p4.v1.TableEntry table_entry = 2;
  if (has_table_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *entity_.table_entry_, output);
  }

  // .p4.v1.ActionProfileMember action_profile_member = 3;
  if (has_action_profile_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *entity_.action_profile_member_, output);
  }

  // .p4.v1.ActionProfileGroup action_profile_group = 4;
  if (has_action_profile_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *entity_.action_profile_group_, output);
  }

  // .p4.v1.MeterEntry meter_entry = 5;
  if (has_meter_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *entity_.meter_entry_, output);
  }

  // .p4.v1.DirectMeterEntry direct_meter_entry = 6;
  if (has_direct_meter_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *entity_.direct_meter_entry_, output);
  }

  // .p4.v1.CounterEntry counter_entry = 7;
  if (has_counter_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *entity_.counter_entry_, output);
  }

  // .p4.v1.DirectCounterEntry direct_counter_entry = 8;
  if (has_direct_counter_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *entity_.direct_counter_entry_, output);
  }

  // .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
  if (has_packet_replication_engine_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *entity_.packet_replication_engine_entry_, output);
  }

  // .p4.v1.ValueSetEntry value_set_entry = 10;
  if (has_value_set_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *entity_.value_set_entry_, output);
  }

  // .p4.v1.RegisterEntry register_entry = 11;
  if (has_register_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *entity_.register_entry_, output);
  }

  // .p4.v1.DigestEntry digest_entry = 12;
  if (has_digest_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *entity_.digest_entry_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Entity)
}

::google::protobuf::uint8* Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Entity)
  // .p4.v1.ExternEntry extern_entry = 1;
  if (has_extern_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *entity_.extern_entry_, false, target);
  }

  // .p4.v1.TableEntry table_entry = 2;
  if (has_table_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *entity_.table_entry_, false, target);
  }

  // .p4.v1.ActionProfileMember action_profile_member = 3;
  if (has_action_profile_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *entity_.action_profile_member_, false, target);
  }

  // .p4.v1.ActionProfileGroup action_profile_group = 4;
  if (has_action_profile_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *entity_.action_profile_group_, false, target);
  }

  // .p4.v1.MeterEntry meter_entry = 5;
  if (has_meter_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *entity_.meter_entry_, false, target);
  }

  // .p4.v1.DirectMeterEntry direct_meter_entry = 6;
  if (has_direct_meter_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *entity_.direct_meter_entry_, false, target);
  }

  // .p4.v1.CounterEntry counter_entry = 7;
  if (has_counter_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *entity_.counter_entry_, false, target);
  }

  // .p4.v1.DirectCounterEntry direct_counter_entry = 8;
  if (has_direct_counter_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *entity_.direct_counter_entry_, false, target);
  }

  // .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
  if (has_packet_replication_engine_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *entity_.packet_replication_engine_entry_, false, target);
  }

  // .p4.v1.ValueSetEntry value_set_entry = 10;
  if (has_value_set_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *entity_.value_set_entry_, false, target);
  }

  // .p4.v1.RegisterEntry register_entry = 11;
  if (has_register_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *entity_.register_entry_, false, target);
  }

  // .p4.v1.DigestEntry digest_entry = 12;
  if (has_digest_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *entity_.digest_entry_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Entity)
  size_t total_size = 0;

  switch (entity_case()) {
    // .p4.v1.ExternEntry extern_entry = 1;
    case kExternEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.extern_entry_);
      break;
    }
    // .p4.v1.TableEntry table_entry = 2;
    case kTableEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.table_entry_);
      break;
    }
    // .p4.v1.ActionProfileMember action_profile_member = 3;
    case kActionProfileMember: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.action_profile_member_);
      break;
    }
    // .p4.v1.ActionProfileGroup action_profile_group = 4;
    case kActionProfileGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.action_profile_group_);
      break;
    }
    // .p4.v1.MeterEntry meter_entry = 5;
    case kMeterEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.meter_entry_);
      break;
    }
    // .p4.v1.DirectMeterEntry direct_meter_entry = 6;
    case kDirectMeterEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.direct_meter_entry_);
      break;
    }
    // .p4.v1.CounterEntry counter_entry = 7;
    case kCounterEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.counter_entry_);
      break;
    }
    // .p4.v1.DirectCounterEntry direct_counter_entry = 8;
    case kDirectCounterEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.direct_counter_entry_);
      break;
    }
    // .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
    case kPacketReplicationEngineEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.packet_replication_engine_entry_);
      break;
    }
    // .p4.v1.ValueSetEntry value_set_entry = 10;
    case kValueSetEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.value_set_entry_);
      break;
    }
    // .p4.v1.RegisterEntry register_entry = 11;
    case kRegisterEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.register_entry_);
      break;
    }
    // .p4.v1.DigestEntry digest_entry = 12;
    case kDigestEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *entity_.digest_entry_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const Entity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.entity_case()) {
    case kExternEntry: {
      mutable_extern_entry()->::p4::v1::ExternEntry::MergeFrom(from.extern_entry());
      break;
    }
    case kTableEntry: {
      mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from.table_entry());
      break;
    }
    case kActionProfileMember: {
      mutable_action_profile_member()->::p4::v1::ActionProfileMember::MergeFrom(from.action_profile_member());
      break;
    }
    case kActionProfileGroup: {
      mutable_action_profile_group()->::p4::v1::ActionProfileGroup::MergeFrom(from.action_profile_group());
      break;
    }
    case kMeterEntry: {
      mutable_meter_entry()->::p4::v1::MeterEntry::MergeFrom(from.meter_entry());
      break;
    }
    case kDirectMeterEntry: {
      mutable_direct_meter_entry()->::p4::v1::DirectMeterEntry::MergeFrom(from.direct_meter_entry());
      break;
    }
    case kCounterEntry: {
      mutable_counter_entry()->::p4::v1::CounterEntry::MergeFrom(from.counter_entry());
      break;
    }
    case kDirectCounterEntry: {
      mutable_direct_counter_entry()->::p4::v1::DirectCounterEntry::MergeFrom(from.direct_counter_entry());
      break;
    }
    case kPacketReplicationEngineEntry: {
      mutable_packet_replication_engine_entry()->::p4::v1::PacketReplicationEngineEntry::MergeFrom(from.packet_replication_engine_entry());
      break;
    }
    case kValueSetEntry: {
      mutable_value_set_entry()->::p4::v1::ValueSetEntry::MergeFrom(from.value_set_entry());
      break;
    }
    case kRegisterEntry: {
      mutable_register_entry()->::p4::v1::RegisterEntry::MergeFrom(from.register_entry());
      break;
    }
    case kDigestEntry: {
      mutable_digest_entry()->::p4::v1::DigestEntry::MergeFrom(from.digest_entry());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  std::swap(entity_, other->entity_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// .p4.v1.ExternEntry extern_entry = 1;
bool Entity::has_extern_entry() const {
  return entity_case() == kExternEntry;
}
void Entity::set_has_extern_entry() {
  _oneof_case_[0] = kExternEntry;
}
void Entity::clear_extern_entry() {
  if (has_extern_entry()) {
    delete entity_.extern_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::ExternEntry& Entity::extern_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.extern_entry)
  return has_extern_entry()
      ? *entity_.extern_entry_
      : ::p4::v1::ExternEntry::default_instance();
}
::p4::v1::ExternEntry* Entity::mutable_extern_entry() {
  if (!has_extern_entry()) {
    clear_entity();
    set_has_extern_entry();
    entity_.extern_entry_ = new ::p4::v1::ExternEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.extern_entry)
  return entity_.extern_entry_;
}
::p4::v1::ExternEntry* Entity::release_extern_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.extern_entry)
  if (has_extern_entry()) {
    clear_has_entity();
    ::p4::v1::ExternEntry* temp = entity_.extern_entry_;
    entity_.extern_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_extern_entry(::p4::v1::ExternEntry* extern_entry) {
  clear_entity();
  if (extern_entry) {
    set_has_extern_entry();
    entity_.extern_entry_ = extern_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.extern_entry)
}

// .p4.v1.TableEntry table_entry = 2;
bool Entity::has_table_entry() const {
  return entity_case() == kTableEntry;
}
void Entity::set_has_table_entry() {
  _oneof_case_[0] = kTableEntry;
}
void Entity::clear_table_entry() {
  if (has_table_entry()) {
    delete entity_.table_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::TableEntry& Entity::table_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.table_entry)
  return has_table_entry()
      ? *entity_.table_entry_
      : ::p4::v1::TableEntry::default_instance();
}
::p4::v1::TableEntry* Entity::mutable_table_entry() {
  if (!has_table_entry()) {
    clear_entity();
    set_has_table_entry();
    entity_.table_entry_ = new ::p4::v1::TableEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.table_entry)
  return entity_.table_entry_;
}
::p4::v1::TableEntry* Entity::release_table_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.table_entry)
  if (has_table_entry()) {
    clear_has_entity();
    ::p4::v1::TableEntry* temp = entity_.table_entry_;
    entity_.table_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_table_entry(::p4::v1::TableEntry* table_entry) {
  clear_entity();
  if (table_entry) {
    set_has_table_entry();
    entity_.table_entry_ = table_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.table_entry)
}

// .p4.v1.ActionProfileMember action_profile_member = 3;
bool Entity::has_action_profile_member() const {
  return entity_case() == kActionProfileMember;
}
void Entity::set_has_action_profile_member() {
  _oneof_case_[0] = kActionProfileMember;
}
void Entity::clear_action_profile_member() {
  if (has_action_profile_member()) {
    delete entity_.action_profile_member_;
    clear_has_entity();
  }
}
 const ::p4::v1::ActionProfileMember& Entity::action_profile_member() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.action_profile_member)
  return has_action_profile_member()
      ? *entity_.action_profile_member_
      : ::p4::v1::ActionProfileMember::default_instance();
}
::p4::v1::ActionProfileMember* Entity::mutable_action_profile_member() {
  if (!has_action_profile_member()) {
    clear_entity();
    set_has_action_profile_member();
    entity_.action_profile_member_ = new ::p4::v1::ActionProfileMember;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.action_profile_member)
  return entity_.action_profile_member_;
}
::p4::v1::ActionProfileMember* Entity::release_action_profile_member() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.action_profile_member)
  if (has_action_profile_member()) {
    clear_has_entity();
    ::p4::v1::ActionProfileMember* temp = entity_.action_profile_member_;
    entity_.action_profile_member_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_action_profile_member(::p4::v1::ActionProfileMember* action_profile_member) {
  clear_entity();
  if (action_profile_member) {
    set_has_action_profile_member();
    entity_.action_profile_member_ = action_profile_member;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.action_profile_member)
}

// .p4.v1.ActionProfileGroup action_profile_group = 4;
bool Entity::has_action_profile_group() const {
  return entity_case() == kActionProfileGroup;
}
void Entity::set_has_action_profile_group() {
  _oneof_case_[0] = kActionProfileGroup;
}
void Entity::clear_action_profile_group() {
  if (has_action_profile_group()) {
    delete entity_.action_profile_group_;
    clear_has_entity();
  }
}
 const ::p4::v1::ActionProfileGroup& Entity::action_profile_group() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.action_profile_group)
  return has_action_profile_group()
      ? *entity_.action_profile_group_
      : ::p4::v1::ActionProfileGroup::default_instance();
}
::p4::v1::ActionProfileGroup* Entity::mutable_action_profile_group() {
  if (!has_action_profile_group()) {
    clear_entity();
    set_has_action_profile_group();
    entity_.action_profile_group_ = new ::p4::v1::ActionProfileGroup;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.action_profile_group)
  return entity_.action_profile_group_;
}
::p4::v1::ActionProfileGroup* Entity::release_action_profile_group() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.action_profile_group)
  if (has_action_profile_group()) {
    clear_has_entity();
    ::p4::v1::ActionProfileGroup* temp = entity_.action_profile_group_;
    entity_.action_profile_group_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_action_profile_group(::p4::v1::ActionProfileGroup* action_profile_group) {
  clear_entity();
  if (action_profile_group) {
    set_has_action_profile_group();
    entity_.action_profile_group_ = action_profile_group;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.action_profile_group)
}

// .p4.v1.MeterEntry meter_entry = 5;
bool Entity::has_meter_entry() const {
  return entity_case() == kMeterEntry;
}
void Entity::set_has_meter_entry() {
  _oneof_case_[0] = kMeterEntry;
}
void Entity::clear_meter_entry() {
  if (has_meter_entry()) {
    delete entity_.meter_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::MeterEntry& Entity::meter_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.meter_entry)
  return has_meter_entry()
      ? *entity_.meter_entry_
      : ::p4::v1::MeterEntry::default_instance();
}
::p4::v1::MeterEntry* Entity::mutable_meter_entry() {
  if (!has_meter_entry()) {
    clear_entity();
    set_has_meter_entry();
    entity_.meter_entry_ = new ::p4::v1::MeterEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.meter_entry)
  return entity_.meter_entry_;
}
::p4::v1::MeterEntry* Entity::release_meter_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.meter_entry)
  if (has_meter_entry()) {
    clear_has_entity();
    ::p4::v1::MeterEntry* temp = entity_.meter_entry_;
    entity_.meter_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_meter_entry(::p4::v1::MeterEntry* meter_entry) {
  clear_entity();
  if (meter_entry) {
    set_has_meter_entry();
    entity_.meter_entry_ = meter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.meter_entry)
}

// .p4.v1.DirectMeterEntry direct_meter_entry = 6;
bool Entity::has_direct_meter_entry() const {
  return entity_case() == kDirectMeterEntry;
}
void Entity::set_has_direct_meter_entry() {
  _oneof_case_[0] = kDirectMeterEntry;
}
void Entity::clear_direct_meter_entry() {
  if (has_direct_meter_entry()) {
    delete entity_.direct_meter_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::DirectMeterEntry& Entity::direct_meter_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.direct_meter_entry)
  return has_direct_meter_entry()
      ? *entity_.direct_meter_entry_
      : ::p4::v1::DirectMeterEntry::default_instance();
}
::p4::v1::DirectMeterEntry* Entity::mutable_direct_meter_entry() {
  if (!has_direct_meter_entry()) {
    clear_entity();
    set_has_direct_meter_entry();
    entity_.direct_meter_entry_ = new ::p4::v1::DirectMeterEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.direct_meter_entry)
  return entity_.direct_meter_entry_;
}
::p4::v1::DirectMeterEntry* Entity::release_direct_meter_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.direct_meter_entry)
  if (has_direct_meter_entry()) {
    clear_has_entity();
    ::p4::v1::DirectMeterEntry* temp = entity_.direct_meter_entry_;
    entity_.direct_meter_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_direct_meter_entry(::p4::v1::DirectMeterEntry* direct_meter_entry) {
  clear_entity();
  if (direct_meter_entry) {
    set_has_direct_meter_entry();
    entity_.direct_meter_entry_ = direct_meter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.direct_meter_entry)
}

// .p4.v1.CounterEntry counter_entry = 7;
bool Entity::has_counter_entry() const {
  return entity_case() == kCounterEntry;
}
void Entity::set_has_counter_entry() {
  _oneof_case_[0] = kCounterEntry;
}
void Entity::clear_counter_entry() {
  if (has_counter_entry()) {
    delete entity_.counter_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::CounterEntry& Entity::counter_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.counter_entry)
  return has_counter_entry()
      ? *entity_.counter_entry_
      : ::p4::v1::CounterEntry::default_instance();
}
::p4::v1::CounterEntry* Entity::mutable_counter_entry() {
  if (!has_counter_entry()) {
    clear_entity();
    set_has_counter_entry();
    entity_.counter_entry_ = new ::p4::v1::CounterEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.counter_entry)
  return entity_.counter_entry_;
}
::p4::v1::CounterEntry* Entity::release_counter_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.counter_entry)
  if (has_counter_entry()) {
    clear_has_entity();
    ::p4::v1::CounterEntry* temp = entity_.counter_entry_;
    entity_.counter_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_counter_entry(::p4::v1::CounterEntry* counter_entry) {
  clear_entity();
  if (counter_entry) {
    set_has_counter_entry();
    entity_.counter_entry_ = counter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.counter_entry)
}

// .p4.v1.DirectCounterEntry direct_counter_entry = 8;
bool Entity::has_direct_counter_entry() const {
  return entity_case() == kDirectCounterEntry;
}
void Entity::set_has_direct_counter_entry() {
  _oneof_case_[0] = kDirectCounterEntry;
}
void Entity::clear_direct_counter_entry() {
  if (has_direct_counter_entry()) {
    delete entity_.direct_counter_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::DirectCounterEntry& Entity::direct_counter_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.direct_counter_entry)
  return has_direct_counter_entry()
      ? *entity_.direct_counter_entry_
      : ::p4::v1::DirectCounterEntry::default_instance();
}
::p4::v1::DirectCounterEntry* Entity::mutable_direct_counter_entry() {
  if (!has_direct_counter_entry()) {
    clear_entity();
    set_has_direct_counter_entry();
    entity_.direct_counter_entry_ = new ::p4::v1::DirectCounterEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.direct_counter_entry)
  return entity_.direct_counter_entry_;
}
::p4::v1::DirectCounterEntry* Entity::release_direct_counter_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.direct_counter_entry)
  if (has_direct_counter_entry()) {
    clear_has_entity();
    ::p4::v1::DirectCounterEntry* temp = entity_.direct_counter_entry_;
    entity_.direct_counter_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_direct_counter_entry(::p4::v1::DirectCounterEntry* direct_counter_entry) {
  clear_entity();
  if (direct_counter_entry) {
    set_has_direct_counter_entry();
    entity_.direct_counter_entry_ = direct_counter_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.direct_counter_entry)
}

// .p4.v1.PacketReplicationEngineEntry packet_replication_engine_entry = 9;
bool Entity::has_packet_replication_engine_entry() const {
  return entity_case() == kPacketReplicationEngineEntry;
}
void Entity::set_has_packet_replication_engine_entry() {
  _oneof_case_[0] = kPacketReplicationEngineEntry;
}
void Entity::clear_packet_replication_engine_entry() {
  if (has_packet_replication_engine_entry()) {
    delete entity_.packet_replication_engine_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::PacketReplicationEngineEntry& Entity::packet_replication_engine_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.packet_replication_engine_entry)
  return has_packet_replication_engine_entry()
      ? *entity_.packet_replication_engine_entry_
      : ::p4::v1::PacketReplicationEngineEntry::default_instance();
}
::p4::v1::PacketReplicationEngineEntry* Entity::mutable_packet_replication_engine_entry() {
  if (!has_packet_replication_engine_entry()) {
    clear_entity();
    set_has_packet_replication_engine_entry();
    entity_.packet_replication_engine_entry_ = new ::p4::v1::PacketReplicationEngineEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.packet_replication_engine_entry)
  return entity_.packet_replication_engine_entry_;
}
::p4::v1::PacketReplicationEngineEntry* Entity::release_packet_replication_engine_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.packet_replication_engine_entry)
  if (has_packet_replication_engine_entry()) {
    clear_has_entity();
    ::p4::v1::PacketReplicationEngineEntry* temp = entity_.packet_replication_engine_entry_;
    entity_.packet_replication_engine_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_packet_replication_engine_entry(::p4::v1::PacketReplicationEngineEntry* packet_replication_engine_entry) {
  clear_entity();
  if (packet_replication_engine_entry) {
    set_has_packet_replication_engine_entry();
    entity_.packet_replication_engine_entry_ = packet_replication_engine_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.packet_replication_engine_entry)
}

// .p4.v1.ValueSetEntry value_set_entry = 10;
bool Entity::has_value_set_entry() const {
  return entity_case() == kValueSetEntry;
}
void Entity::set_has_value_set_entry() {
  _oneof_case_[0] = kValueSetEntry;
}
void Entity::clear_value_set_entry() {
  if (has_value_set_entry()) {
    delete entity_.value_set_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::ValueSetEntry& Entity::value_set_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.value_set_entry)
  return has_value_set_entry()
      ? *entity_.value_set_entry_
      : ::p4::v1::ValueSetEntry::default_instance();
}
::p4::v1::ValueSetEntry* Entity::mutable_value_set_entry() {
  if (!has_value_set_entry()) {
    clear_entity();
    set_has_value_set_entry();
    entity_.value_set_entry_ = new ::p4::v1::ValueSetEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.value_set_entry)
  return entity_.value_set_entry_;
}
::p4::v1::ValueSetEntry* Entity::release_value_set_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.value_set_entry)
  if (has_value_set_entry()) {
    clear_has_entity();
    ::p4::v1::ValueSetEntry* temp = entity_.value_set_entry_;
    entity_.value_set_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_value_set_entry(::p4::v1::ValueSetEntry* value_set_entry) {
  clear_entity();
  if (value_set_entry) {
    set_has_value_set_entry();
    entity_.value_set_entry_ = value_set_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.value_set_entry)
}

// .p4.v1.RegisterEntry register_entry = 11;
bool Entity::has_register_entry() const {
  return entity_case() == kRegisterEntry;
}
void Entity::set_has_register_entry() {
  _oneof_case_[0] = kRegisterEntry;
}
void Entity::clear_register_entry() {
  if (has_register_entry()) {
    delete entity_.register_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::RegisterEntry& Entity::register_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.register_entry)
  return has_register_entry()
      ? *entity_.register_entry_
      : ::p4::v1::RegisterEntry::default_instance();
}
::p4::v1::RegisterEntry* Entity::mutable_register_entry() {
  if (!has_register_entry()) {
    clear_entity();
    set_has_register_entry();
    entity_.register_entry_ = new ::p4::v1::RegisterEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.register_entry)
  return entity_.register_entry_;
}
::p4::v1::RegisterEntry* Entity::release_register_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.register_entry)
  if (has_register_entry()) {
    clear_has_entity();
    ::p4::v1::RegisterEntry* temp = entity_.register_entry_;
    entity_.register_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_register_entry(::p4::v1::RegisterEntry* register_entry) {
  clear_entity();
  if (register_entry) {
    set_has_register_entry();
    entity_.register_entry_ = register_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.register_entry)
}

// .p4.v1.DigestEntry digest_entry = 12;
bool Entity::has_digest_entry() const {
  return entity_case() == kDigestEntry;
}
void Entity::set_has_digest_entry() {
  _oneof_case_[0] = kDigestEntry;
}
void Entity::clear_digest_entry() {
  if (has_digest_entry()) {
    delete entity_.digest_entry_;
    clear_has_entity();
  }
}
 const ::p4::v1::DigestEntry& Entity::digest_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.Entity.digest_entry)
  return has_digest_entry()
      ? *entity_.digest_entry_
      : ::p4::v1::DigestEntry::default_instance();
}
::p4::v1::DigestEntry* Entity::mutable_digest_entry() {
  if (!has_digest_entry()) {
    clear_entity();
    set_has_digest_entry();
    entity_.digest_entry_ = new ::p4::v1::DigestEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Entity.digest_entry)
  return entity_.digest_entry_;
}
::p4::v1::DigestEntry* Entity::release_digest_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.Entity.digest_entry)
  if (has_digest_entry()) {
    clear_has_entity();
    ::p4::v1::DigestEntry* temp = entity_.digest_entry_;
    entity_.digest_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Entity::set_allocated_digest_entry(::p4::v1::DigestEntry* digest_entry) {
  clear_entity();
  if (digest_entry) {
    set_has_digest_entry();
    entity_.digest_entry_ = digest_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Entity.digest_entry)
}

bool Entity::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
void Entity::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
Entity::EntityCase Entity::entity_case() const {
  return Entity::EntityCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternEntry::kExternTypeIdFieldNumber;
const int ExternEntry::kExternIdFieldNumber;
const int ExternEntry::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternEntry::ExternEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ExternEntry)
}
ExternEntry::ExternEntry(const ExternEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entry()) {
    entry_ = new ::google::protobuf::Any(*from.entry_);
  } else {
    entry_ = NULL;
  }
  ::memcpy(&extern_type_id_, &from.extern_type_id_,
    reinterpret_cast<char*>(&extern_id_) -
    reinterpret_cast<char*>(&extern_type_id_) + sizeof(extern_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ExternEntry)
}

void ExternEntry::SharedCtor() {
  ::memset(&entry_, 0, reinterpret_cast<char*>(&extern_id_) -
    reinterpret_cast<char*>(&entry_) + sizeof(extern_id_));
  _cached_size_ = 0;
}

ExternEntry::~ExternEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ExternEntry)
  SharedDtor();
}

void ExternEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete entry_;
  }
}

void ExternEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[6].descriptor;
}

const ExternEntry& ExternEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExternEntry* ExternEntry::New(::google::protobuf::Arena* arena) const {
  ExternEntry* n = new ExternEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ExternEntry)
  if (GetArenaNoVirtual() == NULL && entry_ != NULL) {
    delete entry_;
  }
  entry_ = NULL;
  ::memset(&extern_type_id_, 0, reinterpret_cast<char*>(&extern_id_) -
    reinterpret_cast<char*>(&extern_type_id_) + sizeof(extern_id_));
}

bool ExternEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ExternEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 extern_type_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extern_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 extern_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extern_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any entry = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ExternEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ExternEntry)
  return false;
#undef DO_
}

void ExternEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ExternEntry)
  // uint32 extern_type_id = 1;
  if (this->extern_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->extern_type_id(), output);
  }

  // uint32 extern_id = 2;
  if (this->extern_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->extern_id(), output);
  }

  // .google.protobuf.Any entry = 3;
  if (this->has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->entry_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ExternEntry)
}

::google::protobuf::uint8* ExternEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ExternEntry)
  // uint32 extern_type_id = 1;
  if (this->extern_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->extern_type_id(), target);
  }

  // uint32 extern_id = 2;
  if (this->extern_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->extern_id(), target);
  }

  // .google.protobuf.Any entry = 3;
  if (this->has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->entry_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ExternEntry)
  return target;
}

size_t ExternEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ExternEntry)
  size_t total_size = 0;

  // .google.protobuf.Any entry = 3;
  if (this->has_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entry_);
  }

  // uint32 extern_type_id = 1;
  if (this->extern_type_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extern_type_id());
  }

  // uint32 extern_id = 2;
  if (this->extern_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->extern_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ExternEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ExternEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ExternEntry)
    MergeFrom(*source);
  }
}

void ExternEntry::MergeFrom(const ExternEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ExternEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entry()) {
    mutable_entry()->::google::protobuf::Any::MergeFrom(from.entry());
  }
  if (from.extern_type_id() != 0) {
    set_extern_type_id(from.extern_type_id());
  }
  if (from.extern_id() != 0) {
    set_extern_id(from.extern_id());
  }
}

void ExternEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ExternEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternEntry::CopyFrom(const ExternEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ExternEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternEntry::IsInitialized() const {
  return true;
}

void ExternEntry::Swap(ExternEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternEntry::InternalSwap(ExternEntry* other) {
  std::swap(entry_, other->entry_);
  std::swap(extern_type_id_, other->extern_type_id_);
  std::swap(extern_id_, other->extern_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternEntry

// uint32 extern_type_id = 1;
void ExternEntry::clear_extern_type_id() {
  extern_type_id_ = 0u;
}
::google::protobuf::uint32 ExternEntry::extern_type_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ExternEntry.extern_type_id)
  return extern_type_id_;
}
void ExternEntry::set_extern_type_id(::google::protobuf::uint32 value) {
  
  extern_type_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ExternEntry.extern_type_id)
}

// uint32 extern_id = 2;
void ExternEntry::clear_extern_id() {
  extern_id_ = 0u;
}
::google::protobuf::uint32 ExternEntry::extern_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ExternEntry.extern_id)
  return extern_id_;
}
void ExternEntry::set_extern_id(::google::protobuf::uint32 value) {
  
  extern_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ExternEntry.extern_id)
}

// .google.protobuf.Any entry = 3;
bool ExternEntry::has_entry() const {
  return this != internal_default_instance() && entry_ != NULL;
}
void ExternEntry::clear_entry() {
  if (GetArenaNoVirtual() == NULL && entry_ != NULL) delete entry_;
  entry_ = NULL;
}
const ::google::protobuf::Any& ExternEntry::entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.ExternEntry.entry)
  return entry_ != NULL ? *entry_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* ExternEntry::mutable_entry() {
  
  if (entry_ == NULL) {
    entry_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.ExternEntry.entry)
  return entry_;
}
::google::protobuf::Any* ExternEntry::release_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.ExternEntry.entry)
  
  ::google::protobuf::Any* temp = entry_;
  entry_ = NULL;
  return temp;
}
void ExternEntry::set_allocated_entry(::google::protobuf::Any* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.ExternEntry.entry)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableEntry_IdleTimeout::kElapsedNsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableEntry_IdleTimeout::TableEntry_IdleTimeout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.TableEntry.IdleTimeout)
}
TableEntry_IdleTimeout::TableEntry_IdleTimeout(const TableEntry_IdleTimeout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  elapsed_ns_ = from.elapsed_ns_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.TableEntry.IdleTimeout)
}

void TableEntry_IdleTimeout::SharedCtor() {
  elapsed_ns_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TableEntry_IdleTimeout::~TableEntry_IdleTimeout() {
  // @@protoc_insertion_point(destructor:p4.v1.TableEntry.IdleTimeout)
  SharedDtor();
}

void TableEntry_IdleTimeout::SharedDtor() {
}

void TableEntry_IdleTimeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableEntry_IdleTimeout::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[7].descriptor;
}

const TableEntry_IdleTimeout& TableEntry_IdleTimeout::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableEntry_IdleTimeout* TableEntry_IdleTimeout::New(::google::protobuf::Arena* arena) const {
  TableEntry_IdleTimeout* n = new TableEntry_IdleTimeout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableEntry_IdleTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.TableEntry.IdleTimeout)
  elapsed_ns_ = GOOGLE_LONGLONG(0);
}

bool TableEntry_IdleTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.TableEntry.IdleTimeout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 elapsed_ns = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.TableEntry.IdleTimeout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.TableEntry.IdleTimeout)
  return false;
#undef DO_
}

void TableEntry_IdleTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.TableEntry.IdleTimeout)
  // int64 elapsed_ns = 1;
  if (this->elapsed_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->elapsed_ns(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.TableEntry.IdleTimeout)
}

::google::protobuf::uint8* TableEntry_IdleTimeout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.TableEntry.IdleTimeout)
  // int64 elapsed_ns = 1;
  if (this->elapsed_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->elapsed_ns(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.TableEntry.IdleTimeout)
  return target;
}

size_t TableEntry_IdleTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.TableEntry.IdleTimeout)
  size_t total_size = 0;

  // int64 elapsed_ns = 1;
  if (this->elapsed_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->elapsed_ns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableEntry_IdleTimeout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.TableEntry.IdleTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const TableEntry_IdleTimeout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableEntry_IdleTimeout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.TableEntry.IdleTimeout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.TableEntry.IdleTimeout)
    MergeFrom(*source);
  }
}

void TableEntry_IdleTimeout::MergeFrom(const TableEntry_IdleTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.TableEntry.IdleTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.elapsed_ns() != 0) {
    set_elapsed_ns(from.elapsed_ns());
  }
}

void TableEntry_IdleTimeout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.TableEntry.IdleTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableEntry_IdleTimeout::CopyFrom(const TableEntry_IdleTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.TableEntry.IdleTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEntry_IdleTimeout::IsInitialized() const {
  return true;
}

void TableEntry_IdleTimeout::Swap(TableEntry_IdleTimeout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableEntry_IdleTimeout::InternalSwap(TableEntry_IdleTimeout* other) {
  std::swap(elapsed_ns_, other->elapsed_ns_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableEntry_IdleTimeout::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableEntry_IdleTimeout

// int64 elapsed_ns = 1;
void TableEntry_IdleTimeout::clear_elapsed_ns() {
  elapsed_ns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TableEntry_IdleTimeout::elapsed_ns() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.IdleTimeout.elapsed_ns)
  return elapsed_ns_;
}
void TableEntry_IdleTimeout::set_elapsed_ns(::google::protobuf::int64 value) {
  
  elapsed_ns_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableEntry.IdleTimeout.elapsed_ns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableEntry::kTableIdFieldNumber;
const int TableEntry::kMatchFieldNumber;
const int TableEntry::kActionFieldNumber;
const int TableEntry::kPriorityFieldNumber;
const int TableEntry::kControllerMetadataFieldNumber;
const int TableEntry::kMeterConfigFieldNumber;
const int TableEntry::kCounterDataFieldNumber;
const int TableEntry::kIsDefaultActionFieldNumber;
const int TableEntry::kIdleTimeoutNsFieldNumber;
const int TableEntry::kTimeSinceLastHitFieldNumber;
const int TableEntry::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableEntry::TableEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.TableEntry)
}
TableEntry::TableEntry(const TableEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      match_(from.match_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata().size() > 0) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_action()) {
    action_ = new ::p4::v1::TableAction(*from.action_);
  } else {
    action_ = NULL;
  }
  if (from.has_meter_config()) {
    meter_config_ = new ::p4::v1::MeterConfig(*from.meter_config_);
  } else {
    meter_config_ = NULL;
  }
  if (from.has_counter_data()) {
    counter_data_ = new ::p4::v1::CounterData(*from.counter_data_);
  } else {
    counter_data_ = NULL;
  }
  if (from.has_time_since_last_hit()) {
    time_since_last_hit_ = new ::p4::v1::TableEntry_IdleTimeout(*from.time_since_last_hit_);
  } else {
    time_since_last_hit_ = NULL;
  }
  ::memcpy(&table_id_, &from.table_id_,
    reinterpret_cast<char*>(&is_default_action_) -
    reinterpret_cast<char*>(&table_id_) + sizeof(is_default_action_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.TableEntry)
}

void TableEntry::SharedCtor() {
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, reinterpret_cast<char*>(&is_default_action_) -
    reinterpret_cast<char*>(&action_) + sizeof(is_default_action_));
  _cached_size_ = 0;
}

TableEntry::~TableEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.TableEntry)
  SharedDtor();
}

void TableEntry::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete action_;
  }
  if (this != internal_default_instance()) {
    delete meter_config_;
  }
  if (this != internal_default_instance()) {
    delete counter_data_;
  }
  if (this != internal_default_instance()) {
    delete time_since_last_hit_;
  }
}

void TableEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[8].descriptor;
}

const TableEntry& TableEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableEntry* TableEntry::New(::google::protobuf::Arena* arena) const {
  TableEntry* n = new TableEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.TableEntry)
  match_.Clear();
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && action_ != NULL) {
    delete action_;
  }
  action_ = NULL;
  if (GetArenaNoVirtual() == NULL && meter_config_ != NULL) {
    delete meter_config_;
  }
  meter_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && counter_data_ != NULL) {
    delete counter_data_;
  }
  counter_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_since_last_hit_ != NULL) {
    delete time_since_last_hit_;
  }
  time_since_last_hit_ = NULL;
  ::memset(&table_id_, 0, reinterpret_cast<char*>(&is_default_action_) -
    reinterpret_cast<char*>(&table_id_) + sizeof(is_default_action_));
}

bool TableEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.TableEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 table_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.FieldMatch match = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_match()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .p4.v1.TableAction action = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 controller_metadata = 5 [deprecated = true];
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &controller_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.MeterConfig meter_config = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meter_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.CounterData counter_data = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_default_action = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_default_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 idle_timeout_ns = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idle_timeout_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_since_last_hit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes metadata = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.TableEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.TableEntry)
  return false;
#undef DO_
}

void TableEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.TableEntry)
  // uint32 table_id = 1;
  if (this->table_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // repeated .p4.v1.FieldMatch match = 2;
  for (unsigned int i = 0, n = this->match_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->match(i), output);
  }

  // .p4.v1.TableAction action = 3;
  if (this->has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->action_, output);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // uint64 controller_metadata = 5 [deprecated = true];
  if (this->controller_metadata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->controller_metadata(), output);
  }

  // .p4.v1.MeterConfig meter_config = 6;
  if (this->has_meter_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->meter_config_, output);
  }

  // .p4.v1.CounterData counter_data = 7;
  if (this->has_counter_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->counter_data_, output);
  }

  // bool is_default_action = 8;
  if (this->is_default_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_default_action(), output);
  }

  // int64 idle_timeout_ns = 9;
  if (this->idle_timeout_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->idle_timeout_ns(), output);
  }

  // .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
  if (this->has_time_since_last_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->time_since_last_hit_, output);
  }

  // bytes metadata = 11;
  if (this->metadata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->metadata(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.TableEntry)
}

::google::protobuf::uint8* TableEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.TableEntry)
  // uint32 table_id = 1;
  if (this->table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // repeated .p4.v1.FieldMatch match = 2;
  for (unsigned int i = 0, n = this->match_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->match(i), false, target);
  }

  // .p4.v1.TableAction action = 3;
  if (this->has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->action_, false, target);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // uint64 controller_metadata = 5 [deprecated = true];
  if (this->controller_metadata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->controller_metadata(), target);
  }

  // .p4.v1.MeterConfig meter_config = 6;
  if (this->has_meter_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->meter_config_, false, target);
  }

  // .p4.v1.CounterData counter_data = 7;
  if (this->has_counter_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->counter_data_, false, target);
  }

  // bool is_default_action = 8;
  if (this->is_default_action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_default_action(), target);
  }

  // int64 idle_timeout_ns = 9;
  if (this->idle_timeout_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->idle_timeout_ns(), target);
  }

  // .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
  if (this->has_time_since_last_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->time_since_last_hit_, false, target);
  }

  // bytes metadata = 11;
  if (this->metadata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->metadata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.TableEntry)
  return target;
}

size_t TableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.TableEntry)
  size_t total_size = 0;

  // repeated .p4.v1.FieldMatch match = 2;
  {
    unsigned int count = this->match_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match(i));
    }
  }

  // bytes metadata = 11;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->metadata());
  }

  // .p4.v1.TableAction action = 3;
  if (this->has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);
  }

  // .p4.v1.MeterConfig meter_config = 6;
  if (this->has_meter_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meter_config_);
  }

  // .p4.v1.CounterData counter_data = 7;
  if (this->has_counter_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->counter_data_);
  }

  // .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
  if (this->has_time_since_last_hit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_since_last_hit_);
  }

  // uint32 table_id = 1;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table_id());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // uint64 controller_metadata = 5 [deprecated = true];
  if (this->controller_metadata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->controller_metadata());
  }

  // int64 idle_timeout_ns = 9;
  if (this->idle_timeout_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->idle_timeout_ns());
  }

  // bool is_default_action = 8;
  if (this->is_default_action() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.TableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const TableEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.TableEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.TableEntry)
    MergeFrom(*source);
  }
}

void TableEntry::MergeFrom(const TableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.TableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_.MergeFrom(from.match_);
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_action()) {
    mutable_action()->::p4::v1::TableAction::MergeFrom(from.action());
  }
  if (from.has_meter_config()) {
    mutable_meter_config()->::p4::v1::MeterConfig::MergeFrom(from.meter_config());
  }
  if (from.has_counter_data()) {
    mutable_counter_data()->::p4::v1::CounterData::MergeFrom(from.counter_data());
  }
  if (from.has_time_since_last_hit()) {
    mutable_time_since_last_hit()->::p4::v1::TableEntry_IdleTimeout::MergeFrom(from.time_since_last_hit());
  }
  if (from.table_id() != 0) {
    set_table_id(from.table_id());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.controller_metadata() != 0) {
    set_controller_metadata(from.controller_metadata());
  }
  if (from.idle_timeout_ns() != 0) {
    set_idle_timeout_ns(from.idle_timeout_ns());
  }
  if (from.is_default_action() != 0) {
    set_is_default_action(from.is_default_action());
  }
}

void TableEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.TableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableEntry::CopyFrom(const TableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.TableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEntry::IsInitialized() const {
  return true;
}

void TableEntry::Swap(TableEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableEntry::InternalSwap(TableEntry* other) {
  match_.UnsafeArenaSwap(&other->match_);
  metadata_.Swap(&other->metadata_);
  std::swap(action_, other->action_);
  std::swap(meter_config_, other->meter_config_);
  std::swap(counter_data_, other->counter_data_);
  std::swap(time_since_last_hit_, other->time_since_last_hit_);
  std::swap(table_id_, other->table_id_);
  std::swap(priority_, other->priority_);
  std::swap(controller_metadata_, other->controller_metadata_);
  std::swap(idle_timeout_ns_, other->idle_timeout_ns_);
  std::swap(is_default_action_, other->is_default_action_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableEntry

// uint32 table_id = 1;
void TableEntry::clear_table_id() {
  table_id_ = 0u;
}
::google::protobuf::uint32 TableEntry::table_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.table_id)
  return table_id_;
}
void TableEntry::set_table_id(::google::protobuf::uint32 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableEntry.table_id)
}

// repeated .p4.v1.FieldMatch match = 2;
int TableEntry::match_size() const {
  return match_.size();
}
void TableEntry::clear_match() {
  match_.Clear();
}
const ::p4::v1::FieldMatch& TableEntry::match(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.match)
  return match_.Get(index);
}
::p4::v1::FieldMatch* TableEntry::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.TableEntry.match)
  return match_.Mutable(index);
}
::p4::v1::FieldMatch* TableEntry::add_match() {
  // @@protoc_insertion_point(field_add:p4.v1.TableEntry.match)
  return match_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::FieldMatch >*
TableEntry::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.TableEntry.match)
  return &match_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::FieldMatch >&
TableEntry::match() const {
  // @@protoc_insertion_point(field_list:p4.v1.TableEntry.match)
  return match_;
}

// .p4.v1.TableAction action = 3;
bool TableEntry::has_action() const {
  return this != internal_default_instance() && action_ != NULL;
}
void TableEntry::clear_action() {
  if (GetArenaNoVirtual() == NULL && action_ != NULL) delete action_;
  action_ = NULL;
}
const ::p4::v1::TableAction& TableEntry::action() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.action)
  return action_ != NULL ? *action_
                         : *::p4::v1::TableAction::internal_default_instance();
}
::p4::v1::TableAction* TableEntry::mutable_action() {
  
  if (action_ == NULL) {
    action_ = new ::p4::v1::TableAction;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.TableEntry.action)
  return action_;
}
::p4::v1::TableAction* TableEntry::release_action() {
  // @@protoc_insertion_point(field_release:p4.v1.TableEntry.action)
  
  ::p4::v1::TableAction* temp = action_;
  action_ = NULL;
  return temp;
}
void TableEntry::set_allocated_action(::p4::v1::TableAction* action) {
  delete action_;
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableEntry.action)
}

// int32 priority = 4;
void TableEntry::clear_priority() {
  priority_ = 0;
}
::google::protobuf::int32 TableEntry::priority() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.priority)
  return priority_;
}
void TableEntry::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableEntry.priority)
}

// uint64 controller_metadata = 5 [deprecated = true];
void TableEntry::clear_controller_metadata() {
  controller_metadata_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TableEntry::controller_metadata() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.controller_metadata)
  return controller_metadata_;
}
void TableEntry::set_controller_metadata(::google::protobuf::uint64 value) {
  
  controller_metadata_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableEntry.controller_metadata)
}

// .p4.v1.MeterConfig meter_config = 6;
bool TableEntry::has_meter_config() const {
  return this != internal_default_instance() && meter_config_ != NULL;
}
void TableEntry::clear_meter_config() {
  if (GetArenaNoVirtual() == NULL && meter_config_ != NULL) delete meter_config_;
  meter_config_ = NULL;
}
const ::p4::v1::MeterConfig& TableEntry::meter_config() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.meter_config)
  return meter_config_ != NULL ? *meter_config_
                         : *::p4::v1::MeterConfig::internal_default_instance();
}
::p4::v1::MeterConfig* TableEntry::mutable_meter_config() {
  
  if (meter_config_ == NULL) {
    meter_config_ = new ::p4::v1::MeterConfig;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.TableEntry.meter_config)
  return meter_config_;
}
::p4::v1::MeterConfig* TableEntry::release_meter_config() {
  // @@protoc_insertion_point(field_release:p4.v1.TableEntry.meter_config)
  
  ::p4::v1::MeterConfig* temp = meter_config_;
  meter_config_ = NULL;
  return temp;
}
void TableEntry::set_allocated_meter_config(::p4::v1::MeterConfig* meter_config) {
  delete meter_config_;
  meter_config_ = meter_config;
  if (meter_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableEntry.meter_config)
}

// .p4.v1.CounterData counter_data = 7;
bool TableEntry::has_counter_data() const {
  return this != internal_default_instance() && counter_data_ != NULL;
}
void TableEntry::clear_counter_data() {
  if (GetArenaNoVirtual() == NULL && counter_data_ != NULL) delete counter_data_;
  counter_data_ = NULL;
}
const ::p4::v1::CounterData& TableEntry::counter_data() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.counter_data)
  return counter_data_ != NULL ? *counter_data_
                         : *::p4::v1::CounterData::internal_default_instance();
}
::p4::v1::CounterData* TableEntry::mutable_counter_data() {
  
  if (counter_data_ == NULL) {
    counter_data_ = new ::p4::v1::CounterData;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.TableEntry.counter_data)
  return counter_data_;
}
::p4::v1::CounterData* TableEntry::release_counter_data() {
  // @@protoc_insertion_point(field_release:p4.v1.TableEntry.counter_data)
  
  ::p4::v1::CounterData* temp = counter_data_;
  counter_data_ = NULL;
  return temp;
}
void TableEntry::set_allocated_counter_data(::p4::v1::CounterData* counter_data) {
  delete counter_data_;
  counter_data_ = counter_data;
  if (counter_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableEntry.counter_data)
}

// bool is_default_action = 8;
void TableEntry::clear_is_default_action() {
  is_default_action_ = false;
}
bool TableEntry::is_default_action() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.is_default_action)
  return is_default_action_;
}
void TableEntry::set_is_default_action(bool value) {
  
  is_default_action_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableEntry.is_default_action)
}

// int64 idle_timeout_ns = 9;
void TableEntry::clear_idle_timeout_ns() {
  idle_timeout_ns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TableEntry::idle_timeout_ns() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.idle_timeout_ns)
  return idle_timeout_ns_;
}
void TableEntry::set_idle_timeout_ns(::google::protobuf::int64 value) {
  
  idle_timeout_ns_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableEntry.idle_timeout_ns)
}

// .p4.v1.TableEntry.IdleTimeout time_since_last_hit = 10;
bool TableEntry::has_time_since_last_hit() const {
  return this != internal_default_instance() && time_since_last_hit_ != NULL;
}
void TableEntry::clear_time_since_last_hit() {
  if (GetArenaNoVirtual() == NULL && time_since_last_hit_ != NULL) delete time_since_last_hit_;
  time_since_last_hit_ = NULL;
}
const ::p4::v1::TableEntry_IdleTimeout& TableEntry::time_since_last_hit() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.time_since_last_hit)
  return time_since_last_hit_ != NULL ? *time_since_last_hit_
                         : *::p4::v1::TableEntry_IdleTimeout::internal_default_instance();
}
::p4::v1::TableEntry_IdleTimeout* TableEntry::mutable_time_since_last_hit() {
  
  if (time_since_last_hit_ == NULL) {
    time_since_last_hit_ = new ::p4::v1::TableEntry_IdleTimeout;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.TableEntry.time_since_last_hit)
  return time_since_last_hit_;
}
::p4::v1::TableEntry_IdleTimeout* TableEntry::release_time_since_last_hit() {
  // @@protoc_insertion_point(field_release:p4.v1.TableEntry.time_since_last_hit)
  
  ::p4::v1::TableEntry_IdleTimeout* temp = time_since_last_hit_;
  time_since_last_hit_ = NULL;
  return temp;
}
void TableEntry::set_allocated_time_since_last_hit(::p4::v1::TableEntry_IdleTimeout* time_since_last_hit) {
  delete time_since_last_hit_;
  time_since_last_hit_ = time_since_last_hit;
  if (time_since_last_hit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableEntry.time_since_last_hit)
}

// bytes metadata = 11;
void TableEntry::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TableEntry::metadata() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableEntry.metadata)
  return metadata_.GetNoArena();
}
void TableEntry::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.TableEntry.metadata)
}
#if LANG_CXX11
void TableEntry::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.TableEntry.metadata)
}
#endif
void TableEntry::set_metadata(const char* value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.TableEntry.metadata)
}
void TableEntry::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.TableEntry.metadata)
}
::std::string* TableEntry::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.TableEntry.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TableEntry::release_metadata() {
  // @@protoc_insertion_point(field_release:p4.v1.TableEntry.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TableEntry::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableEntry.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldMatch_Exact::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldMatch_Exact::FieldMatch_Exact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.FieldMatch.Exact)
}
FieldMatch_Exact::FieldMatch_Exact(const FieldMatch_Exact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Exact)
}

void FieldMatch_Exact::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FieldMatch_Exact::~FieldMatch_Exact() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Exact)
  SharedDtor();
}

void FieldMatch_Exact::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Exact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldMatch_Exact::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[9].descriptor;
}

const FieldMatch_Exact& FieldMatch_Exact::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldMatch_Exact* FieldMatch_Exact::New(::google::protobuf::Arena* arena) const {
  FieldMatch_Exact* n = new FieldMatch_Exact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldMatch_Exact::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Exact)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FieldMatch_Exact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.FieldMatch.Exact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.FieldMatch.Exact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.FieldMatch.Exact)
  return false;
#undef DO_
}

void FieldMatch_Exact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.FieldMatch.Exact)
  // bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.FieldMatch.Exact)
}

::google::protobuf::uint8* FieldMatch_Exact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Exact)
  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Exact)
  return target;
}

size_t FieldMatch_Exact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Exact)
  size_t total_size = 0;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldMatch_Exact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.FieldMatch.Exact)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Exact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldMatch_Exact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.FieldMatch.Exact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.FieldMatch.Exact)
    MergeFrom(*source);
  }
}

void FieldMatch_Exact::MergeFrom(const FieldMatch_Exact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Exact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void FieldMatch_Exact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.FieldMatch.Exact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Exact::CopyFrom(const FieldMatch_Exact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Exact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Exact::IsInitialized() const {
  return true;
}

void FieldMatch_Exact::Swap(FieldMatch_Exact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldMatch_Exact::InternalSwap(FieldMatch_Exact* other) {
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldMatch_Exact::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldMatch_Exact

// bytes value = 1;
void FieldMatch_Exact::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FieldMatch_Exact::value() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.Exact.value)
  return value_.GetNoArena();
}
void FieldMatch_Exact::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.Exact.value)
}
#if LANG_CXX11
void FieldMatch_Exact::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.FieldMatch.Exact.value)
}
#endif
void FieldMatch_Exact::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.FieldMatch.Exact.value)
}
void FieldMatch_Exact::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.FieldMatch.Exact.value)
}
::std::string* FieldMatch_Exact::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.Exact.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FieldMatch_Exact::release_value() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.Exact.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FieldMatch_Exact::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.Exact.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldMatch_Ternary::kValueFieldNumber;
const int FieldMatch_Ternary::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldMatch_Ternary::FieldMatch_Ternary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.FieldMatch.Ternary)
}
FieldMatch_Ternary::FieldMatch_Ternary(const FieldMatch_Ternary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Ternary)
}

void FieldMatch_Ternary::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FieldMatch_Ternary::~FieldMatch_Ternary() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Ternary)
  SharedDtor();
}

void FieldMatch_Ternary::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Ternary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldMatch_Ternary::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[10].descriptor;
}

const FieldMatch_Ternary& FieldMatch_Ternary::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldMatch_Ternary* FieldMatch_Ternary::New(::google::protobuf::Arena* arena) const {
  FieldMatch_Ternary* n = new FieldMatch_Ternary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldMatch_Ternary::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Ternary)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FieldMatch_Ternary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.FieldMatch.Ternary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes mask = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.FieldMatch.Ternary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.FieldMatch.Ternary)
  return false;
#undef DO_
}

void FieldMatch_Ternary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.FieldMatch.Ternary)
  // bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // bytes mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mask(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.FieldMatch.Ternary)
}

::google::protobuf::uint8* FieldMatch_Ternary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Ternary)
  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // bytes mask = 2;
  if (this->mask().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Ternary)
  return target;
}

size_t FieldMatch_Ternary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Ternary)
  size_t total_size = 0;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // bytes mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldMatch_Ternary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.FieldMatch.Ternary)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Ternary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldMatch_Ternary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.FieldMatch.Ternary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.FieldMatch.Ternary)
    MergeFrom(*source);
  }
}

void FieldMatch_Ternary::MergeFrom(const FieldMatch_Ternary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Ternary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
}

void FieldMatch_Ternary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.FieldMatch.Ternary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Ternary::CopyFrom(const FieldMatch_Ternary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Ternary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Ternary::IsInitialized() const {
  return true;
}

void FieldMatch_Ternary::Swap(FieldMatch_Ternary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldMatch_Ternary::InternalSwap(FieldMatch_Ternary* other) {
  value_.Swap(&other->value_);
  mask_.Swap(&other->mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldMatch_Ternary::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldMatch_Ternary

// bytes value = 1;
void FieldMatch_Ternary::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FieldMatch_Ternary::value() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.Ternary.value)
  return value_.GetNoArena();
}
void FieldMatch_Ternary::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.Ternary.value)
}
#if LANG_CXX11
void FieldMatch_Ternary::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.FieldMatch.Ternary.value)
}
#endif
void FieldMatch_Ternary::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.FieldMatch.Ternary.value)
}
void FieldMatch_Ternary::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.FieldMatch.Ternary.value)
}
::std::string* FieldMatch_Ternary::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.Ternary.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FieldMatch_Ternary::release_value() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.Ternary.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FieldMatch_Ternary::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.Ternary.value)
}

// bytes mask = 2;
void FieldMatch_Ternary::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FieldMatch_Ternary::mask() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.Ternary.mask)
  return mask_.GetNoArena();
}
void FieldMatch_Ternary::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.Ternary.mask)
}
#if LANG_CXX11
void FieldMatch_Ternary::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.FieldMatch.Ternary.mask)
}
#endif
void FieldMatch_Ternary::set_mask(const char* value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.FieldMatch.Ternary.mask)
}
void FieldMatch_Ternary::set_mask(const void* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.FieldMatch.Ternary.mask)
}
::std::string* FieldMatch_Ternary::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.Ternary.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FieldMatch_Ternary::release_mask() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.Ternary.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FieldMatch_Ternary::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.Ternary.mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldMatch_LPM::kValueFieldNumber;
const int FieldMatch_LPM::kPrefixLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldMatch_LPM::FieldMatch_LPM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.FieldMatch.LPM)
}
FieldMatch_LPM::FieldMatch_LPM(const FieldMatch_LPM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.LPM)
}

void FieldMatch_LPM::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0;
  _cached_size_ = 0;
}

FieldMatch_LPM::~FieldMatch_LPM() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.LPM)
  SharedDtor();
}

void FieldMatch_LPM::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_LPM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldMatch_LPM::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[11].descriptor;
}

const FieldMatch_LPM& FieldMatch_LPM::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldMatch_LPM* FieldMatch_LPM::New(::google::protobuf::Arena* arena) const {
  FieldMatch_LPM* n = new FieldMatch_LPM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldMatch_LPM::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.LPM)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0;
}

bool FieldMatch_LPM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.FieldMatch.LPM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 prefix_len = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prefix_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.FieldMatch.LPM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.FieldMatch.LPM)
  return false;
#undef DO_
}

void FieldMatch_LPM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.FieldMatch.LPM)
  // bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prefix_len(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.FieldMatch.LPM)
}

::google::protobuf::uint8* FieldMatch_LPM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.LPM)
  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prefix_len(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.LPM)
  return target;
}

size_t FieldMatch_LPM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.LPM)
  size_t total_size = 0;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prefix_len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldMatch_LPM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.FieldMatch.LPM)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_LPM* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldMatch_LPM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.FieldMatch.LPM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.FieldMatch.LPM)
    MergeFrom(*source);
  }
}

void FieldMatch_LPM::MergeFrom(const FieldMatch_LPM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.LPM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.prefix_len() != 0) {
    set_prefix_len(from.prefix_len());
  }
}

void FieldMatch_LPM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.FieldMatch.LPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_LPM::CopyFrom(const FieldMatch_LPM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.LPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_LPM::IsInitialized() const {
  return true;
}

void FieldMatch_LPM::Swap(FieldMatch_LPM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldMatch_LPM::InternalSwap(FieldMatch_LPM* other) {
  value_.Swap(&other->value_);
  std::swap(prefix_len_, other->prefix_len_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldMatch_LPM::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldMatch_LPM

// bytes value = 1;
void FieldMatch_LPM::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FieldMatch_LPM::value() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.LPM.value)
  return value_.GetNoArena();
}
void FieldMatch_LPM::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.LPM.value)
}
#if LANG_CXX11
void FieldMatch_LPM::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.FieldMatch.LPM.value)
}
#endif
void FieldMatch_LPM::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.FieldMatch.LPM.value)
}
void FieldMatch_LPM::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.FieldMatch.LPM.value)
}
::std::string* FieldMatch_LPM::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.LPM.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FieldMatch_LPM::release_value() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.LPM.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FieldMatch_LPM::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.LPM.value)
}

// int32 prefix_len = 2;
void FieldMatch_LPM::clear_prefix_len() {
  prefix_len_ = 0;
}
::google::protobuf::int32 FieldMatch_LPM::prefix_len() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.LPM.prefix_len)
  return prefix_len_;
}
void FieldMatch_LPM::set_prefix_len(::google::protobuf::int32 value) {
  
  prefix_len_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.LPM.prefix_len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldMatch_Range::kLowFieldNumber;
const int FieldMatch_Range::kHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldMatch_Range::FieldMatch_Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.FieldMatch.Range)
}
FieldMatch_Range::FieldMatch_Range(const FieldMatch_Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  low_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.low().size() > 0) {
    low_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.low_);
  }
  high_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.high().size() > 0) {
    high_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.high_);
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Range)
}

void FieldMatch_Range::SharedCtor() {
  low_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  high_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FieldMatch_Range::~FieldMatch_Range() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Range)
  SharedDtor();
}

void FieldMatch_Range::SharedDtor() {
  low_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  high_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldMatch_Range::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[12].descriptor;
}

const FieldMatch_Range& FieldMatch_Range::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldMatch_Range* FieldMatch_Range::New(::google::protobuf::Arena* arena) const {
  FieldMatch_Range* n = new FieldMatch_Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldMatch_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Range)
  low_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  high_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FieldMatch_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.FieldMatch.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes low = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_low()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes high = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_high()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.FieldMatch.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.FieldMatch.Range)
  return false;
#undef DO_
}

void FieldMatch_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.FieldMatch.Range)
  // bytes low = 1;
  if (this->low().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->low(), output);
  }

  // bytes high = 2;
  if (this->high().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->high(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.FieldMatch.Range)
}

::google::protobuf::uint8* FieldMatch_Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Range)
  // bytes low = 1;
  if (this->low().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->low(), target);
  }

  // bytes high = 2;
  if (this->high().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->high(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Range)
  return target;
}

size_t FieldMatch_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Range)
  size_t total_size = 0;

  // bytes low = 1;
  if (this->low().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->low());
  }

  // bytes high = 2;
  if (this->high().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->high());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldMatch_Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.FieldMatch.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldMatch_Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.FieldMatch.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.FieldMatch.Range)
    MergeFrom(*source);
  }
}

void FieldMatch_Range::MergeFrom(const FieldMatch_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.low().size() > 0) {

    low_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.low_);
  }
  if (from.high().size() > 0) {

    high_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.high_);
  }
}

void FieldMatch_Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.FieldMatch.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Range::CopyFrom(const FieldMatch_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Range::IsInitialized() const {
  return true;
}

void FieldMatch_Range::Swap(FieldMatch_Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldMatch_Range::InternalSwap(FieldMatch_Range* other) {
  low_.Swap(&other->low_);
  high_.Swap(&other->high_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldMatch_Range::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldMatch_Range

// bytes low = 1;
void FieldMatch_Range::clear_low() {
  low_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FieldMatch_Range::low() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.Range.low)
  return low_.GetNoArena();
}
void FieldMatch_Range::set_low(const ::std::string& value) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.Range.low)
}
#if LANG_CXX11
void FieldMatch_Range::set_low(::std::string&& value) {
  
  low_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.FieldMatch.Range.low)
}
#endif
void FieldMatch_Range::set_low(const char* value) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.FieldMatch.Range.low)
}
void FieldMatch_Range::set_low(const void* value, size_t size) {
  
  low_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.FieldMatch.Range.low)
}
::std::string* FieldMatch_Range::mutable_low() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.Range.low)
  return low_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FieldMatch_Range::release_low() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.Range.low)
  
  return low_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FieldMatch_Range::set_allocated_low(::std::string* low) {
  if (low != NULL) {
    
  } else {
    
  }
  low_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), low);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.Range.low)
}

// bytes high = 2;
void FieldMatch_Range::clear_high() {
  high_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FieldMatch_Range::high() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.Range.high)
  return high_.GetNoArena();
}
void FieldMatch_Range::set_high(const ::std::string& value) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.Range.high)
}
#if LANG_CXX11
void FieldMatch_Range::set_high(::std::string&& value) {
  
  high_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.FieldMatch.Range.high)
}
#endif
void FieldMatch_Range::set_high(const char* value) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.FieldMatch.Range.high)
}
void FieldMatch_Range::set_high(const void* value, size_t size) {
  
  high_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.FieldMatch.Range.high)
}
::std::string* FieldMatch_Range::mutable_high() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.Range.high)
  return high_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FieldMatch_Range::release_high() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.Range.high)
  
  return high_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FieldMatch_Range::set_allocated_high(::std::string* high) {
  if (high != NULL) {
    
  } else {
    
  }
  high_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), high);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.Range.high)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldMatch_Optional::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldMatch_Optional::FieldMatch_Optional()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.FieldMatch.Optional)
}
FieldMatch_Optional::FieldMatch_Optional(const FieldMatch_Optional& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch.Optional)
}

void FieldMatch_Optional::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FieldMatch_Optional::~FieldMatch_Optional() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch.Optional)
  SharedDtor();
}

void FieldMatch_Optional::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Optional::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldMatch_Optional::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[13].descriptor;
}

const FieldMatch_Optional& FieldMatch_Optional::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldMatch_Optional* FieldMatch_Optional::New(::google::protobuf::Arena* arena) const {
  FieldMatch_Optional* n = new FieldMatch_Optional;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldMatch_Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch.Optional)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FieldMatch_Optional::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.FieldMatch.Optional)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.FieldMatch.Optional)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.FieldMatch.Optional)
  return false;
#undef DO_
}

void FieldMatch_Optional::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.FieldMatch.Optional)
  // bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.FieldMatch.Optional)
}

::google::protobuf::uint8* FieldMatch_Optional::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch.Optional)
  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch.Optional)
  return target;
}

size_t FieldMatch_Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch.Optional)
  size_t total_size = 0;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldMatch_Optional::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.FieldMatch.Optional)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Optional* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldMatch_Optional>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.FieldMatch.Optional)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.FieldMatch.Optional)
    MergeFrom(*source);
  }
}

void FieldMatch_Optional::MergeFrom(const FieldMatch_Optional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch.Optional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void FieldMatch_Optional::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.FieldMatch.Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Optional::CopyFrom(const FieldMatch_Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch.Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Optional::IsInitialized() const {
  return true;
}

void FieldMatch_Optional::Swap(FieldMatch_Optional* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldMatch_Optional::InternalSwap(FieldMatch_Optional* other) {
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldMatch_Optional::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldMatch_Optional

// bytes value = 1;
void FieldMatch_Optional::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FieldMatch_Optional::value() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.Optional.value)
  return value_.GetNoArena();
}
void FieldMatch_Optional::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.Optional.value)
}
#if LANG_CXX11
void FieldMatch_Optional::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.FieldMatch.Optional.value)
}
#endif
void FieldMatch_Optional::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.FieldMatch.Optional.value)
}
void FieldMatch_Optional::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.FieldMatch.Optional.value)
}
::std::string* FieldMatch_Optional::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.Optional.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FieldMatch_Optional::release_value() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.Optional.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FieldMatch_Optional::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.Optional.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldMatch::kFieldIdFieldNumber;
const int FieldMatch::kExactFieldNumber;
const int FieldMatch::kTernaryFieldNumber;
const int FieldMatch::kLpmFieldNumber;
const int FieldMatch::kRangeFieldNumber;
const int FieldMatch::kOptionalFieldNumber;
const int FieldMatch::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldMatch::FieldMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.FieldMatch)
}
FieldMatch::FieldMatch(const FieldMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_id_ = from.field_id_;
  clear_has_field_match_type();
  switch (from.field_match_type_case()) {
    case kExact: {
      mutable_exact()->::p4::v1::FieldMatch_Exact::MergeFrom(from.exact());
      break;
    }
    case kTernary: {
      mutable_ternary()->::p4::v1::FieldMatch_Ternary::MergeFrom(from.ternary());
      break;
    }
    case kLpm: {
      mutable_lpm()->::p4::v1::FieldMatch_LPM::MergeFrom(from.lpm());
      break;
    }
    case kRange: {
      mutable_range()->::p4::v1::FieldMatch_Range::MergeFrom(from.range());
      break;
    }
    case kOptional: {
      mutable_optional()->::p4::v1::FieldMatch_Optional::MergeFrom(from.optional());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.FieldMatch)
}

void FieldMatch::SharedCtor() {
  field_id_ = 0u;
  clear_has_field_match_type();
  _cached_size_ = 0;
}

FieldMatch::~FieldMatch() {
  // @@protoc_insertion_point(destructor:p4.v1.FieldMatch)
  SharedDtor();
}

void FieldMatch::SharedDtor() {
  if (has_field_match_type()) {
    clear_field_match_type();
  }
}

void FieldMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldMatch::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[14].descriptor;
}

const FieldMatch& FieldMatch::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldMatch* FieldMatch::New(::google::protobuf::Arena* arena) const {
  FieldMatch* n = new FieldMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldMatch::clear_field_match_type() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.FieldMatch)
  switch (field_match_type_case()) {
    case kExact: {
      delete field_match_type_.exact_;
      break;
    }
    case kTernary: {
      delete field_match_type_.ternary_;
      break;
    }
    case kLpm: {
      delete field_match_type_.lpm_;
      break;
    }
    case kRange: {
      delete field_match_type_.range_;
      break;
    }
    case kOptional: {
      delete field_match_type_.optional_;
      break;
    }
    case kOther: {
      delete field_match_type_.other_;
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FIELD_MATCH_TYPE_NOT_SET;
}


void FieldMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.FieldMatch)
  field_id_ = 0u;
  clear_field_match_type();
}

bool FieldMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.FieldMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 field_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.FieldMatch.Exact exact = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.FieldMatch.Ternary ternary = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ternary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.FieldMatch.LPM lpm = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lpm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.FieldMatch.Range range = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.FieldMatch.Optional optional = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any other = 100;
      case 100: {
        if (tag == 802u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.FieldMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.FieldMatch)
  return false;
#undef DO_
}

void FieldMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.FieldMatch)
  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->field_id(), output);
  }

  // .p4.v1.FieldMatch.Exact exact = 2;
  if (has_exact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *field_match_type_.exact_, output);
  }

  // .p4.v1.FieldMatch.Ternary ternary = 3;
  if (has_ternary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *field_match_type_.ternary_, output);
  }

  // .p4.v1.FieldMatch.LPM lpm = 4;
  if (has_lpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *field_match_type_.lpm_, output);
  }

  // .p4.v1.FieldMatch.Range range = 6;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *field_match_type_.range_, output);
  }

  // .p4.v1.FieldMatch.Optional optional = 7;
  if (has_optional()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *field_match_type_.optional_, output);
  }

  // .google.protobuf.Any other = 100;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *field_match_type_.other_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.FieldMatch)
}

::google::protobuf::uint8* FieldMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.FieldMatch)
  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->field_id(), target);
  }

  // .p4.v1.FieldMatch.Exact exact = 2;
  if (has_exact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *field_match_type_.exact_, false, target);
  }

  // .p4.v1.FieldMatch.Ternary ternary = 3;
  if (has_ternary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *field_match_type_.ternary_, false, target);
  }

  // .p4.v1.FieldMatch.LPM lpm = 4;
  if (has_lpm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *field_match_type_.lpm_, false, target);
  }

  // .p4.v1.FieldMatch.Range range = 6;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *field_match_type_.range_, false, target);
  }

  // .p4.v1.FieldMatch.Optional optional = 7;
  if (has_optional()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *field_match_type_.optional_, false, target);
  }

  // .google.protobuf.Any other = 100;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *field_match_type_.other_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.FieldMatch)
  return target;
}

size_t FieldMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.FieldMatch)
  size_t total_size = 0;

  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_id());
  }

  switch (field_match_type_case()) {
    // .p4.v1.FieldMatch.Exact exact = 2;
    case kExact: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *field_match_type_.exact_);
      break;
    }
    // .p4.v1.FieldMatch.Ternary ternary = 3;
    case kTernary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *field_match_type_.ternary_);
      break;
    }
    // .p4.v1.FieldMatch.LPM lpm = 4;
    case kLpm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *field_match_type_.lpm_);
      break;
    }
    // .p4.v1.FieldMatch.Range range = 6;
    case kRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *field_match_type_.range_);
      break;
    }
    // .p4.v1.FieldMatch.Optional optional = 7;
    case kOptional: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *field_match_type_.optional_);
      break;
    }
    // .google.protobuf.Any other = 100;
    case kOther: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *field_match_type_.other_);
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.FieldMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.FieldMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.FieldMatch)
    MergeFrom(*source);
  }
}

void FieldMatch::MergeFrom(const FieldMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.FieldMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.field_id() != 0) {
    set_field_id(from.field_id());
  }
  switch (from.field_match_type_case()) {
    case kExact: {
      mutable_exact()->::p4::v1::FieldMatch_Exact::MergeFrom(from.exact());
      break;
    }
    case kTernary: {
      mutable_ternary()->::p4::v1::FieldMatch_Ternary::MergeFrom(from.ternary());
      break;
    }
    case kLpm: {
      mutable_lpm()->::p4::v1::FieldMatch_LPM::MergeFrom(from.lpm());
      break;
    }
    case kRange: {
      mutable_range()->::p4::v1::FieldMatch_Range::MergeFrom(from.range());
      break;
    }
    case kOptional: {
      mutable_optional()->::p4::v1::FieldMatch_Optional::MergeFrom(from.optional());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
}

void FieldMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.FieldMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch::CopyFrom(const FieldMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.FieldMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch::IsInitialized() const {
  return true;
}

void FieldMatch::Swap(FieldMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldMatch::InternalSwap(FieldMatch* other) {
  std::swap(field_id_, other->field_id_);
  std::swap(field_match_type_, other->field_match_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldMatch::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldMatch

// uint32 field_id = 1;
void FieldMatch::clear_field_id() {
  field_id_ = 0u;
}
::google::protobuf::uint32 FieldMatch::field_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.field_id)
  return field_id_;
}
void FieldMatch::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.FieldMatch.field_id)
}

// .p4.v1.FieldMatch.Exact exact = 2;
bool FieldMatch::has_exact() const {
  return field_match_type_case() == kExact;
}
void FieldMatch::set_has_exact() {
  _oneof_case_[0] = kExact;
}
void FieldMatch::clear_exact() {
  if (has_exact()) {
    delete field_match_type_.exact_;
    clear_has_field_match_type();
  }
}
 const ::p4::v1::FieldMatch_Exact& FieldMatch::exact() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.exact)
  return has_exact()
      ? *field_match_type_.exact_
      : ::p4::v1::FieldMatch_Exact::default_instance();
}
::p4::v1::FieldMatch_Exact* FieldMatch::mutable_exact() {
  if (!has_exact()) {
    clear_field_match_type();
    set_has_exact();
    field_match_type_.exact_ = new ::p4::v1::FieldMatch_Exact;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.exact)
  return field_match_type_.exact_;
}
::p4::v1::FieldMatch_Exact* FieldMatch::release_exact() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.exact)
  if (has_exact()) {
    clear_has_field_match_type();
    ::p4::v1::FieldMatch_Exact* temp = field_match_type_.exact_;
    field_match_type_.exact_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldMatch::set_allocated_exact(::p4::v1::FieldMatch_Exact* exact) {
  clear_field_match_type();
  if (exact) {
    set_has_exact();
    field_match_type_.exact_ = exact;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.exact)
}

// .p4.v1.FieldMatch.Ternary ternary = 3;
bool FieldMatch::has_ternary() const {
  return field_match_type_case() == kTernary;
}
void FieldMatch::set_has_ternary() {
  _oneof_case_[0] = kTernary;
}
void FieldMatch::clear_ternary() {
  if (has_ternary()) {
    delete field_match_type_.ternary_;
    clear_has_field_match_type();
  }
}
 const ::p4::v1::FieldMatch_Ternary& FieldMatch::ternary() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.ternary)
  return has_ternary()
      ? *field_match_type_.ternary_
      : ::p4::v1::FieldMatch_Ternary::default_instance();
}
::p4::v1::FieldMatch_Ternary* FieldMatch::mutable_ternary() {
  if (!has_ternary()) {
    clear_field_match_type();
    set_has_ternary();
    field_match_type_.ternary_ = new ::p4::v1::FieldMatch_Ternary;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.ternary)
  return field_match_type_.ternary_;
}
::p4::v1::FieldMatch_Ternary* FieldMatch::release_ternary() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.ternary)
  if (has_ternary()) {
    clear_has_field_match_type();
    ::p4::v1::FieldMatch_Ternary* temp = field_match_type_.ternary_;
    field_match_type_.ternary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldMatch::set_allocated_ternary(::p4::v1::FieldMatch_Ternary* ternary) {
  clear_field_match_type();
  if (ternary) {
    set_has_ternary();
    field_match_type_.ternary_ = ternary;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.ternary)
}

// .p4.v1.FieldMatch.LPM lpm = 4;
bool FieldMatch::has_lpm() const {
  return field_match_type_case() == kLpm;
}
void FieldMatch::set_has_lpm() {
  _oneof_case_[0] = kLpm;
}
void FieldMatch::clear_lpm() {
  if (has_lpm()) {
    delete field_match_type_.lpm_;
    clear_has_field_match_type();
  }
}
 const ::p4::v1::FieldMatch_LPM& FieldMatch::lpm() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.lpm)
  return has_lpm()
      ? *field_match_type_.lpm_
      : ::p4::v1::FieldMatch_LPM::default_instance();
}
::p4::v1::FieldMatch_LPM* FieldMatch::mutable_lpm() {
  if (!has_lpm()) {
    clear_field_match_type();
    set_has_lpm();
    field_match_type_.lpm_ = new ::p4::v1::FieldMatch_LPM;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.lpm)
  return field_match_type_.lpm_;
}
::p4::v1::FieldMatch_LPM* FieldMatch::release_lpm() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.lpm)
  if (has_lpm()) {
    clear_has_field_match_type();
    ::p4::v1::FieldMatch_LPM* temp = field_match_type_.lpm_;
    field_match_type_.lpm_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldMatch::set_allocated_lpm(::p4::v1::FieldMatch_LPM* lpm) {
  clear_field_match_type();
  if (lpm) {
    set_has_lpm();
    field_match_type_.lpm_ = lpm;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.lpm)
}

// .p4.v1.FieldMatch.Range range = 6;
bool FieldMatch::has_range() const {
  return field_match_type_case() == kRange;
}
void FieldMatch::set_has_range() {
  _oneof_case_[0] = kRange;
}
void FieldMatch::clear_range() {
  if (has_range()) {
    delete field_match_type_.range_;
    clear_has_field_match_type();
  }
}
 const ::p4::v1::FieldMatch_Range& FieldMatch::range() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.range)
  return has_range()
      ? *field_match_type_.range_
      : ::p4::v1::FieldMatch_Range::default_instance();
}
::p4::v1::FieldMatch_Range* FieldMatch::mutable_range() {
  if (!has_range()) {
    clear_field_match_type();
    set_has_range();
    field_match_type_.range_ = new ::p4::v1::FieldMatch_Range;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.range)
  return field_match_type_.range_;
}
::p4::v1::FieldMatch_Range* FieldMatch::release_range() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.range)
  if (has_range()) {
    clear_has_field_match_type();
    ::p4::v1::FieldMatch_Range* temp = field_match_type_.range_;
    field_match_type_.range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldMatch::set_allocated_range(::p4::v1::FieldMatch_Range* range) {
  clear_field_match_type();
  if (range) {
    set_has_range();
    field_match_type_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.range)
}

// .p4.v1.FieldMatch.Optional optional = 7;
bool FieldMatch::has_optional() const {
  return field_match_type_case() == kOptional;
}
void FieldMatch::set_has_optional() {
  _oneof_case_[0] = kOptional;
}
void FieldMatch::clear_optional() {
  if (has_optional()) {
    delete field_match_type_.optional_;
    clear_has_field_match_type();
  }
}
 const ::p4::v1::FieldMatch_Optional& FieldMatch::optional() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.optional)
  return has_optional()
      ? *field_match_type_.optional_
      : ::p4::v1::FieldMatch_Optional::default_instance();
}
::p4::v1::FieldMatch_Optional* FieldMatch::mutable_optional() {
  if (!has_optional()) {
    clear_field_match_type();
    set_has_optional();
    field_match_type_.optional_ = new ::p4::v1::FieldMatch_Optional;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.optional)
  return field_match_type_.optional_;
}
::p4::v1::FieldMatch_Optional* FieldMatch::release_optional() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.optional)
  if (has_optional()) {
    clear_has_field_match_type();
    ::p4::v1::FieldMatch_Optional* temp = field_match_type_.optional_;
    field_match_type_.optional_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldMatch::set_allocated_optional(::p4::v1::FieldMatch_Optional* optional) {
  clear_field_match_type();
  if (optional) {
    set_has_optional();
    field_match_type_.optional_ = optional;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.optional)
}

// .google.protobuf.Any other = 100;
bool FieldMatch::has_other() const {
  return field_match_type_case() == kOther;
}
void FieldMatch::set_has_other() {
  _oneof_case_[0] = kOther;
}
void FieldMatch::clear_other() {
  if (has_other()) {
    delete field_match_type_.other_;
    clear_has_field_match_type();
  }
}
 const ::google::protobuf::Any& FieldMatch::other() const {
  // @@protoc_insertion_point(field_get:p4.v1.FieldMatch.other)
  return has_other()
      ? *field_match_type_.other_
      : ::google::protobuf::Any::default_instance();
}
::google::protobuf::Any* FieldMatch::mutable_other() {
  if (!has_other()) {
    clear_field_match_type();
    set_has_other();
    field_match_type_.other_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.FieldMatch.other)
  return field_match_type_.other_;
}
::google::protobuf::Any* FieldMatch::release_other() {
  // @@protoc_insertion_point(field_release:p4.v1.FieldMatch.other)
  if (has_other()) {
    clear_has_field_match_type();
    ::google::protobuf::Any* temp = field_match_type_.other_;
    field_match_type_.other_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FieldMatch::set_allocated_other(::google::protobuf::Any* other) {
  clear_field_match_type();
  if (other) {
    set_has_other();
    field_match_type_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.FieldMatch.other)
}

bool FieldMatch::has_field_match_type() const {
  return field_match_type_case() != FIELD_MATCH_TYPE_NOT_SET;
}
void FieldMatch::clear_has_field_match_type() {
  _oneof_case_[0] = FIELD_MATCH_TYPE_NOT_SET;
}
FieldMatch::FieldMatchTypeCase FieldMatch::field_match_type_case() const {
  return FieldMatch::FieldMatchTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableAction::kActionFieldNumber;
const int TableAction::kActionProfileMemberIdFieldNumber;
const int TableAction::kActionProfileGroupIdFieldNumber;
const int TableAction::kActionProfileActionSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableAction::TableAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.TableAction)
}
TableAction::TableAction(const TableAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kAction: {
      mutable_action()->::p4::v1::Action::MergeFrom(from.action());
      break;
    }
    case kActionProfileMemberId: {
      set_action_profile_member_id(from.action_profile_member_id());
      break;
    }
    case kActionProfileGroupId: {
      set_action_profile_group_id(from.action_profile_group_id());
      break;
    }
    case kActionProfileActionSet: {
      mutable_action_profile_action_set()->::p4::v1::ActionProfileActionSet::MergeFrom(from.action_profile_action_set());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.TableAction)
}

void TableAction::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

TableAction::~TableAction() {
  // @@protoc_insertion_point(destructor:p4.v1.TableAction)
  SharedDtor();
}

void TableAction::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void TableAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableAction::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[15].descriptor;
}

const TableAction& TableAction::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

TableAction* TableAction::New(::google::protobuf::Arena* arena) const {
  TableAction* n = new TableAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableAction::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.TableAction)
  switch (type_case()) {
    case kAction: {
      delete type_.action_;
      break;
    }
    case kActionProfileMemberId: {
      // No need to clear
      break;
    }
    case kActionProfileGroupId: {
      // No need to clear
      break;
    }
    case kActionProfileActionSet: {
      delete type_.action_profile_action_set_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TableAction::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.TableAction)
  clear_type();
}

bool TableAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.TableAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.Action action = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_profile_member_id = 2;
      case 2: {
        if (tag == 16u) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_.action_profile_member_id_)));
          set_has_action_profile_member_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 action_profile_group_id = 3;
      case 3: {
        if (tag == 24u) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_.action_profile_group_id_)));
          set_has_action_profile_group_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_profile_action_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.TableAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.TableAction)
  return false;
#undef DO_
}

void TableAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.TableAction)
  // .p4.v1.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.action_, output);
  }

  // uint32 action_profile_member_id = 2;
  if (has_action_profile_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action_profile_member_id(), output);
  }

  // uint32 action_profile_group_id = 3;
  if (has_action_profile_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action_profile_group_id(), output);
  }

  // .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
  if (has_action_profile_action_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.action_profile_action_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.TableAction)
}

::google::protobuf::uint8* TableAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.TableAction)
  // .p4.v1.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.action_, false, target);
  }

  // uint32 action_profile_member_id = 2;
  if (has_action_profile_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action_profile_member_id(), target);
  }

  // uint32 action_profile_group_id = 3;
  if (has_action_profile_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action_profile_group_id(), target);
  }

  // .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
  if (has_action_profile_action_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *type_.action_profile_action_set_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.TableAction)
  return target;
}

size_t TableAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.TableAction)
  size_t total_size = 0;

  switch (type_case()) {
    // .p4.v1.Action action = 1;
    case kAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.action_);
      break;
    }
    // uint32 action_profile_member_id = 2;
    case kActionProfileMemberId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_profile_member_id());
      break;
    }
    // uint32 action_profile_group_id = 3;
    case kActionProfileGroupId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_profile_group_id());
      break;
    }
    // .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
    case kActionProfileActionSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.action_profile_action_set_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.TableAction)
  GOOGLE_DCHECK_NE(&from, this);
  const TableAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.TableAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.TableAction)
    MergeFrom(*source);
  }
}

void TableAction::MergeFrom(const TableAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.TableAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.type_case()) {
    case kAction: {
      mutable_action()->::p4::v1::Action::MergeFrom(from.action());
      break;
    }
    case kActionProfileMemberId: {
      set_action_profile_member_id(from.action_profile_member_id());
      break;
    }
    case kActionProfileGroupId: {
      set_action_profile_group_id(from.action_profile_group_id());
      break;
    }
    case kActionProfileActionSet: {
      mutable_action_profile_action_set()->::p4::v1::ActionProfileActionSet::MergeFrom(from.action_profile_action_set());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void TableAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.TableAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableAction::CopyFrom(const TableAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.TableAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableAction::IsInitialized() const {
  return true;
}

void TableAction::Swap(TableAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableAction::InternalSwap(TableAction* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableAction::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableAction

// .p4.v1.Action action = 1;
bool TableAction::has_action() const {
  return type_case() == kAction;
}
void TableAction::set_has_action() {
  _oneof_case_[0] = kAction;
}
void TableAction::clear_action() {
  if (has_action()) {
    delete type_.action_;
    clear_has_type();
  }
}
 const ::p4::v1::Action& TableAction::action() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableAction.action)
  return has_action()
      ? *type_.action_
      : ::p4::v1::Action::default_instance();
}
::p4::v1::Action* TableAction::mutable_action() {
  if (!has_action()) {
    clear_type();
    set_has_action();
    type_.action_ = new ::p4::v1::Action;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.TableAction.action)
  return type_.action_;
}
::p4::v1::Action* TableAction::release_action() {
  // @@protoc_insertion_point(field_release:p4.v1.TableAction.action)
  if (has_action()) {
    clear_has_type();
    ::p4::v1::Action* temp = type_.action_;
    type_.action_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TableAction::set_allocated_action(::p4::v1::Action* action) {
  clear_type();
  if (action) {
    set_has_action();
    type_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableAction.action)
}

// uint32 action_profile_member_id = 2;
bool TableAction::has_action_profile_member_id() const {
  return type_case() == kActionProfileMemberId;
}
void TableAction::set_has_action_profile_member_id() {
  _oneof_case_[0] = kActionProfileMemberId;
}
void TableAction::clear_action_profile_member_id() {
  if (has_action_profile_member_id()) {
    type_.action_profile_member_id_ = 0u;
    clear_has_type();
  }
}
::google::protobuf::uint32 TableAction::action_profile_member_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableAction.action_profile_member_id)
  if (has_action_profile_member_id()) {
    return type_.action_profile_member_id_;
  }
  return 0u;
}
void TableAction::set_action_profile_member_id(::google::protobuf::uint32 value) {
  if (!has_action_profile_member_id()) {
    clear_type();
    set_has_action_profile_member_id();
  }
  type_.action_profile_member_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableAction.action_profile_member_id)
}

// uint32 action_profile_group_id = 3;
bool TableAction::has_action_profile_group_id() const {
  return type_case() == kActionProfileGroupId;
}
void TableAction::set_has_action_profile_group_id() {
  _oneof_case_[0] = kActionProfileGroupId;
}
void TableAction::clear_action_profile_group_id() {
  if (has_action_profile_group_id()) {
    type_.action_profile_group_id_ = 0u;
    clear_has_type();
  }
}
::google::protobuf::uint32 TableAction::action_profile_group_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableAction.action_profile_group_id)
  if (has_action_profile_group_id()) {
    return type_.action_profile_group_id_;
  }
  return 0u;
}
void TableAction::set_action_profile_group_id(::google::protobuf::uint32 value) {
  if (!has_action_profile_group_id()) {
    clear_type();
    set_has_action_profile_group_id();
  }
  type_.action_profile_group_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.TableAction.action_profile_group_id)
}

// .p4.v1.ActionProfileActionSet action_profile_action_set = 4;
bool TableAction::has_action_profile_action_set() const {
  return type_case() == kActionProfileActionSet;
}
void TableAction::set_has_action_profile_action_set() {
  _oneof_case_[0] = kActionProfileActionSet;
}
void TableAction::clear_action_profile_action_set() {
  if (has_action_profile_action_set()) {
    delete type_.action_profile_action_set_;
    clear_has_type();
  }
}
 const ::p4::v1::ActionProfileActionSet& TableAction::action_profile_action_set() const {
  // @@protoc_insertion_point(field_get:p4.v1.TableAction.action_profile_action_set)
  return has_action_profile_action_set()
      ? *type_.action_profile_action_set_
      : ::p4::v1::ActionProfileActionSet::default_instance();
}
::p4::v1::ActionProfileActionSet* TableAction::mutable_action_profile_action_set() {
  if (!has_action_profile_action_set()) {
    clear_type();
    set_has_action_profile_action_set();
    type_.action_profile_action_set_ = new ::p4::v1::ActionProfileActionSet;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.TableAction.action_profile_action_set)
  return type_.action_profile_action_set_;
}
::p4::v1::ActionProfileActionSet* TableAction::release_action_profile_action_set() {
  // @@protoc_insertion_point(field_release:p4.v1.TableAction.action_profile_action_set)
  if (has_action_profile_action_set()) {
    clear_has_type();
    ::p4::v1::ActionProfileActionSet* temp = type_.action_profile_action_set_;
    type_.action_profile_action_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TableAction::set_allocated_action_profile_action_set(::p4::v1::ActionProfileActionSet* action_profile_action_set) {
  clear_type();
  if (action_profile_action_set) {
    set_has_action_profile_action_set();
    type_.action_profile_action_set_ = action_profile_action_set;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.TableAction.action_profile_action_set)
}

bool TableAction::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void TableAction::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
TableAction::TypeCase TableAction::type_case() const {
  return TableAction::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action_Param::kParamIdFieldNumber;
const int Action_Param::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action_Param::Action_Param()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Action.Param)
}
Action_Param::Action_Param(const Action_Param& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  param_id_ = from.param_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Action.Param)
}

void Action_Param::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_id_ = 0u;
  _cached_size_ = 0;
}

Action_Param::~Action_Param() {
  // @@protoc_insertion_point(destructor:p4.v1.Action.Param)
  SharedDtor();
}

void Action_Param::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Action_Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action_Param::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[16].descriptor;
}

const Action_Param& Action_Param::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Action_Param* Action_Param::New(::google::protobuf::Arena* arena) const {
  Action_Param* n = new Action_Param;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Action.Param)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_id_ = 0u;
}

bool Action_Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Action.Param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 param_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Action.Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Action.Param)
  return false;
#undef DO_
}

void Action_Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Action.Param)
  // uint32 param_id = 2;
  if (this->param_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_id(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Action.Param)
}

::google::protobuf::uint8* Action_Param::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Action.Param)
  // uint32 param_id = 2;
  if (this->param_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_id(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Action.Param)
  return target;
}

size_t Action_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Action.Param)
  size_t total_size = 0;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // uint32 param_id = 2;
  if (this->param_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action_Param::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Action.Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_Param* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action_Param>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Action.Param)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Action.Param)
    MergeFrom(*source);
  }
}

void Action_Param::MergeFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Action.Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.param_id() != 0) {
    set_param_id(from.param_id());
  }
}

void Action_Param::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Action.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_Param::CopyFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Action.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Param::IsInitialized() const {
  return true;
}

void Action_Param::Swap(Action_Param* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action_Param::InternalSwap(Action_Param* other) {
  value_.Swap(&other->value_);
  std::swap(param_id_, other->param_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action_Param::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action_Param

// uint32 param_id = 2;
void Action_Param::clear_param_id() {
  param_id_ = 0u;
}
::google::protobuf::uint32 Action_Param::param_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.Action.Param.param_id)
  return param_id_;
}
void Action_Param::set_param_id(::google::protobuf::uint32 value) {
  
  param_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Action.Param.param_id)
}

// bytes value = 3;
void Action_Param::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Action_Param::value() const {
  // @@protoc_insertion_point(field_get:p4.v1.Action.Param.value)
  return value_.GetNoArena();
}
void Action_Param::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.Action.Param.value)
}
#if LANG_CXX11
void Action_Param::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.Action.Param.value)
}
#endif
void Action_Param::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.Action.Param.value)
}
void Action_Param::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.Action.Param.value)
}
::std::string* Action_Param::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.Action.Param.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Action_Param::release_value() {
  // @@protoc_insertion_point(field_release:p4.v1.Action.Param.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Action_Param::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Action.Param.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kActionIdFieldNumber;
const int Action::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      params_(from.params_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Action)
}

void Action::SharedCtor() {
  action_id_ = 0u;
  _cached_size_ = 0;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:p4.v1.Action)
  SharedDtor();
}

void Action::SharedDtor() {
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[17].descriptor;
}

const Action& Action::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Action)
  params_.Clear();
  action_id_ = 0u;
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 action_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.Action.Param params = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Action)
  // uint32 action_id = 1;
  if (this->action_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_id(), output);
  }

  // repeated .p4.v1.Action.Param params = 4;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->params(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Action)
  // uint32 action_id = 1;
  if (this->action_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_id(), target);
  }

  // repeated .p4.v1.Action.Param params = 4;
  for (unsigned int i = 0, n = this->params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->params(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Action)
  size_t total_size = 0;

  // repeated .p4.v1.Action.Param params = 4;
  {
    unsigned int count = this->params_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params(i));
    }
  }

  // uint32 action_id = 1;
  if (this->action_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  if (from.action_id() != 0) {
    set_action_id(from.action_id());
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  params_.UnsafeArenaSwap(&other->params_);
  std::swap(action_id_, other->action_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// uint32 action_id = 1;
void Action::clear_action_id() {
  action_id_ = 0u;
}
::google::protobuf::uint32 Action::action_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.Action.action_id)
  return action_id_;
}
void Action::set_action_id(::google::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Action.action_id)
}

// repeated .p4.v1.Action.Param params = 4;
int Action::params_size() const {
  return params_.size();
}
void Action::clear_params() {
  params_.Clear();
}
const ::p4::v1::Action_Param& Action::params(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.Action.params)
  return params_.Get(index);
}
::p4::v1::Action_Param* Action::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.Action.params)
  return params_.Mutable(index);
}
::p4::v1::Action_Param* Action::add_params() {
  // @@protoc_insertion_point(field_add:p4.v1.Action.params)
  return params_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::Action_Param >*
Action::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.Action.params)
  return &params_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::Action_Param >&
Action::params() const {
  // @@protoc_insertion_point(field_list:p4.v1.Action.params)
  return params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProfileActionSet::kActionProfileActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProfileActionSet::ActionProfileActionSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ActionProfileActionSet)
}
ActionProfileActionSet::ActionProfileActionSet(const ActionProfileActionSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      action_profile_actions_(from.action_profile_actions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileActionSet)
}

void ActionProfileActionSet::SharedCtor() {
  _cached_size_ = 0;
}

ActionProfileActionSet::~ActionProfileActionSet() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileActionSet)
  SharedDtor();
}

void ActionProfileActionSet::SharedDtor() {
}

void ActionProfileActionSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionProfileActionSet::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[18].descriptor;
}

const ActionProfileActionSet& ActionProfileActionSet::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionProfileActionSet* ActionProfileActionSet::New(::google::protobuf::Arena* arena) const {
  ActionProfileActionSet* n = new ActionProfileActionSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionProfileActionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileActionSet)
  action_profile_actions_.Clear();
}

bool ActionProfileActionSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ActionProfileActionSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_action_profile_actions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ActionProfileActionSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ActionProfileActionSet)
  return false;
#undef DO_
}

void ActionProfileActionSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ActionProfileActionSet)
  // repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
  for (unsigned int i = 0, n = this->action_profile_actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->action_profile_actions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ActionProfileActionSet)
}

::google::protobuf::uint8* ActionProfileActionSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileActionSet)
  // repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
  for (unsigned int i = 0, n = this->action_profile_actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->action_profile_actions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileActionSet)
  return target;
}

size_t ActionProfileActionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileActionSet)
  size_t total_size = 0;

  // repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
  {
    unsigned int count = this->action_profile_actions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action_profile_actions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionProfileActionSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ActionProfileActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProfileActionSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProfileActionSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ActionProfileActionSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ActionProfileActionSet)
    MergeFrom(*source);
  }
}

void ActionProfileActionSet::MergeFrom(const ActionProfileActionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_profile_actions_.MergeFrom(from.action_profile_actions_);
}

void ActionProfileActionSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ActionProfileActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProfileActionSet::CopyFrom(const ActionProfileActionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileActionSet::IsInitialized() const {
  return true;
}

void ActionProfileActionSet::Swap(ActionProfileActionSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProfileActionSet::InternalSwap(ActionProfileActionSet* other) {
  action_profile_actions_.UnsafeArenaSwap(&other->action_profile_actions_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionProfileActionSet::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionProfileActionSet

// repeated .p4.v1.ActionProfileAction action_profile_actions = 1;
int ActionProfileActionSet::action_profile_actions_size() const {
  return action_profile_actions_.size();
}
void ActionProfileActionSet::clear_action_profile_actions() {
  action_profile_actions_.Clear();
}
const ::p4::v1::ActionProfileAction& ActionProfileActionSet::action_profile_actions(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileActionSet.action_profile_actions)
  return action_profile_actions_.Get(index);
}
::p4::v1::ActionProfileAction* ActionProfileActionSet::mutable_action_profile_actions(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.ActionProfileActionSet.action_profile_actions)
  return action_profile_actions_.Mutable(index);
}
::p4::v1::ActionProfileAction* ActionProfileActionSet::add_action_profile_actions() {
  // @@protoc_insertion_point(field_add:p4.v1.ActionProfileActionSet.action_profile_actions)
  return action_profile_actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::ActionProfileAction >*
ActionProfileActionSet::mutable_action_profile_actions() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.ActionProfileActionSet.action_profile_actions)
  return &action_profile_actions_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::ActionProfileAction >&
ActionProfileActionSet::action_profile_actions() const {
  // @@protoc_insertion_point(field_list:p4.v1.ActionProfileActionSet.action_profile_actions)
  return action_profile_actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProfileAction::kActionFieldNumber;
const int ActionProfileAction::kWeightFieldNumber;
const int ActionProfileAction::kWatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProfileAction::ActionProfileAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ActionProfileAction)
}
ActionProfileAction::ActionProfileAction(const ActionProfileAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    action_ = new ::p4::v1::Action(*from.action_);
  } else {
    action_ = NULL;
  }
  ::memcpy(&weight_, &from.weight_,
    reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&weight_) + sizeof(watch_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileAction)
}

void ActionProfileAction::SharedCtor() {
  ::memset(&action_, 0, reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&action_) + sizeof(watch_));
  _cached_size_ = 0;
}

ActionProfileAction::~ActionProfileAction() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileAction)
  SharedDtor();
}

void ActionProfileAction::SharedDtor() {
  if (this != internal_default_instance()) {
    delete action_;
  }
}

void ActionProfileAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionProfileAction::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[19].descriptor;
}

const ActionProfileAction& ActionProfileAction::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionProfileAction* ActionProfileAction::New(::google::protobuf::Arena* arena) const {
  ActionProfileAction* n = new ActionProfileAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionProfileAction::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileAction)
  if (GetArenaNoVirtual() == NULL && action_ != NULL) {
    delete action_;
  }
  action_ = NULL;
  ::memset(&weight_, 0, reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&weight_) + sizeof(watch_));
}

bool ActionProfileAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ActionProfileAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.Action action = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 weight = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 watch = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ActionProfileAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ActionProfileAction)
  return false;
#undef DO_
}

void ActionProfileAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ActionProfileAction)
  // .p4.v1.Action action = 1;
  if (this->has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->action_, output);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // int32 watch = 3;
  if (this->watch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->watch(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ActionProfileAction)
}

::google::protobuf::uint8* ActionProfileAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileAction)
  // .p4.v1.Action action = 1;
  if (this->has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->action_, false, target);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // int32 watch = 3;
  if (this->watch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->watch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileAction)
  return target;
}

size_t ActionProfileAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileAction)
  size_t total_size = 0;

  // .p4.v1.Action action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  // int32 watch = 3;
  if (this->watch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->watch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionProfileAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ActionProfileAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProfileAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProfileAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ActionProfileAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ActionProfileAction)
    MergeFrom(*source);
  }
}

void ActionProfileAction::MergeFrom(const ActionProfileAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    mutable_action()->::p4::v1::Action::MergeFrom(from.action());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
  if (from.watch() != 0) {
    set_watch(from.watch());
  }
}

void ActionProfileAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ActionProfileAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProfileAction::CopyFrom(const ActionProfileAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileAction::IsInitialized() const {
  return true;
}

void ActionProfileAction::Swap(ActionProfileAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProfileAction::InternalSwap(ActionProfileAction* other) {
  std::swap(action_, other->action_);
  std::swap(weight_, other->weight_);
  std::swap(watch_, other->watch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionProfileAction::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionProfileAction

// .p4.v1.Action action = 1;
bool ActionProfileAction::has_action() const {
  return this != internal_default_instance() && action_ != NULL;
}
void ActionProfileAction::clear_action() {
  if (GetArenaNoVirtual() == NULL && action_ != NULL) delete action_;
  action_ = NULL;
}
const ::p4::v1::Action& ActionProfileAction::action() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileAction.action)
  return action_ != NULL ? *action_
                         : *::p4::v1::Action::internal_default_instance();
}
::p4::v1::Action* ActionProfileAction::mutable_action() {
  
  if (action_ == NULL) {
    action_ = new ::p4::v1::Action;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.ActionProfileAction.action)
  return action_;
}
::p4::v1::Action* ActionProfileAction::release_action() {
  // @@protoc_insertion_point(field_release:p4.v1.ActionProfileAction.action)
  
  ::p4::v1::Action* temp = action_;
  action_ = NULL;
  return temp;
}
void ActionProfileAction::set_allocated_action(::p4::v1::Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.ActionProfileAction.action)
}

// int32 weight = 2;
void ActionProfileAction::clear_weight() {
  weight_ = 0;
}
::google::protobuf::int32 ActionProfileAction::weight() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileAction.weight)
  return weight_;
}
void ActionProfileAction::set_weight(::google::protobuf::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileAction.weight)
}

// int32 watch = 3;
void ActionProfileAction::clear_watch() {
  watch_ = 0;
}
::google::protobuf::int32 ActionProfileAction::watch() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileAction.watch)
  return watch_;
}
void ActionProfileAction::set_watch(::google::protobuf::int32 value) {
  
  watch_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileAction.watch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProfileMember::kActionProfileIdFieldNumber;
const int ActionProfileMember::kMemberIdFieldNumber;
const int ActionProfileMember::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProfileMember::ActionProfileMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ActionProfileMember)
}
ActionProfileMember::ActionProfileMember(const ActionProfileMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    action_ = new ::p4::v1::Action(*from.action_);
  } else {
    action_ = NULL;
  }
  ::memcpy(&action_profile_id_, &from.action_profile_id_,
    reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&action_profile_id_) + sizeof(member_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileMember)
}

void ActionProfileMember::SharedCtor() {
  ::memset(&action_, 0, reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&action_) + sizeof(member_id_));
  _cached_size_ = 0;
}

ActionProfileMember::~ActionProfileMember() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileMember)
  SharedDtor();
}

void ActionProfileMember::SharedDtor() {
  if (this != internal_default_instance()) {
    delete action_;
  }
}

void ActionProfileMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionProfileMember::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[20].descriptor;
}

const ActionProfileMember& ActionProfileMember::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionProfileMember* ActionProfileMember::New(::google::protobuf::Arena* arena) const {
  ActionProfileMember* n = new ActionProfileMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionProfileMember::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileMember)
  if (GetArenaNoVirtual() == NULL && action_ != NULL) {
    delete action_;
  }
  action_ = NULL;
  ::memset(&action_profile_id_, 0, reinterpret_cast<char*>(&member_id_) -
    reinterpret_cast<char*>(&action_profile_id_) + sizeof(member_id_));
}

bool ActionProfileMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ActionProfileMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 action_profile_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_profile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 member_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Action action = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ActionProfileMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ActionProfileMember)
  return false;
#undef DO_
}

void ActionProfileMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ActionProfileMember)
  // uint32 action_profile_id = 1;
  if (this->action_profile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_profile_id(), output);
  }

  // uint32 member_id = 2;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->member_id(), output);
  }

  // .p4.v1.Action action = 3;
  if (this->has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->action_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ActionProfileMember)
}

::google::protobuf::uint8* ActionProfileMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileMember)
  // uint32 action_profile_id = 1;
  if (this->action_profile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_profile_id(), target);
  }

  // uint32 member_id = 2;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->member_id(), target);
  }

  // .p4.v1.Action action = 3;
  if (this->has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->action_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileMember)
  return target;
}

size_t ActionProfileMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileMember)
  size_t total_size = 0;

  // .p4.v1.Action action = 3;
  if (this->has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->action_);
  }

  // uint32 action_profile_id = 1;
  if (this->action_profile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_profile_id());
  }

  // uint32 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->member_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionProfileMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ActionProfileMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProfileMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProfileMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ActionProfileMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ActionProfileMember)
    MergeFrom(*source);
  }
}

void ActionProfileMember::MergeFrom(const ActionProfileMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    mutable_action()->::p4::v1::Action::MergeFrom(from.action());
  }
  if (from.action_profile_id() != 0) {
    set_action_profile_id(from.action_profile_id());
  }
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
}

void ActionProfileMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ActionProfileMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProfileMember::CopyFrom(const ActionProfileMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileMember::IsInitialized() const {
  return true;
}

void ActionProfileMember::Swap(ActionProfileMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProfileMember::InternalSwap(ActionProfileMember* other) {
  std::swap(action_, other->action_);
  std::swap(action_profile_id_, other->action_profile_id_);
  std::swap(member_id_, other->member_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionProfileMember::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionProfileMember

// uint32 action_profile_id = 1;
void ActionProfileMember::clear_action_profile_id() {
  action_profile_id_ = 0u;
}
::google::protobuf::uint32 ActionProfileMember::action_profile_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileMember.action_profile_id)
  return action_profile_id_;
}
void ActionProfileMember::set_action_profile_id(::google::protobuf::uint32 value) {
  
  action_profile_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileMember.action_profile_id)
}

// uint32 member_id = 2;
void ActionProfileMember::clear_member_id() {
  member_id_ = 0u;
}
::google::protobuf::uint32 ActionProfileMember::member_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileMember.member_id)
  return member_id_;
}
void ActionProfileMember::set_member_id(::google::protobuf::uint32 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileMember.member_id)
}

// .p4.v1.Action action = 3;
bool ActionProfileMember::has_action() const {
  return this != internal_default_instance() && action_ != NULL;
}
void ActionProfileMember::clear_action() {
  if (GetArenaNoVirtual() == NULL && action_ != NULL) delete action_;
  action_ = NULL;
}
const ::p4::v1::Action& ActionProfileMember::action() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileMember.action)
  return action_ != NULL ? *action_
                         : *::p4::v1::Action::internal_default_instance();
}
::p4::v1::Action* ActionProfileMember::mutable_action() {
  
  if (action_ == NULL) {
    action_ = new ::p4::v1::Action;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.ActionProfileMember.action)
  return action_;
}
::p4::v1::Action* ActionProfileMember::release_action() {
  // @@protoc_insertion_point(field_release:p4.v1.ActionProfileMember.action)
  
  ::p4::v1::Action* temp = action_;
  action_ = NULL;
  return temp;
}
void ActionProfileMember::set_allocated_action(::p4::v1::Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.ActionProfileMember.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProfileGroup_Member::kMemberIdFieldNumber;
const int ActionProfileGroup_Member::kWeightFieldNumber;
const int ActionProfileGroup_Member::kWatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProfileGroup_Member::ActionProfileGroup_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ActionProfileGroup.Member)
}
ActionProfileGroup_Member::ActionProfileGroup_Member(const ActionProfileGroup_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&member_id_, &from.member_id_,
    reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&member_id_) + sizeof(watch_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileGroup.Member)
}

void ActionProfileGroup_Member::SharedCtor() {
  ::memset(&member_id_, 0, reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&member_id_) + sizeof(watch_));
  _cached_size_ = 0;
}

ActionProfileGroup_Member::~ActionProfileGroup_Member() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileGroup.Member)
  SharedDtor();
}

void ActionProfileGroup_Member::SharedDtor() {
}

void ActionProfileGroup_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionProfileGroup_Member::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[21].descriptor;
}

const ActionProfileGroup_Member& ActionProfileGroup_Member::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionProfileGroup_Member* ActionProfileGroup_Member::New(::google::protobuf::Arena* arena) const {
  ActionProfileGroup_Member* n = new ActionProfileGroup_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionProfileGroup_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileGroup.Member)
  ::memset(&member_id_, 0, reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&member_id_) + sizeof(watch_));
}

bool ActionProfileGroup_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ActionProfileGroup.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 member_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 weight = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 watch = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ActionProfileGroup.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ActionProfileGroup.Member)
  return false;
#undef DO_
}

void ActionProfileGroup_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ActionProfileGroup.Member)
  // uint32 member_id = 1;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->member_id(), output);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // uint32 watch = 3;
  if (this->watch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->watch(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ActionProfileGroup.Member)
}

::google::protobuf::uint8* ActionProfileGroup_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileGroup.Member)
  // uint32 member_id = 1;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->member_id(), target);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // uint32 watch = 3;
  if (this->watch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->watch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileGroup.Member)
  return target;
}

size_t ActionProfileGroup_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileGroup.Member)
  size_t total_size = 0;

  // uint32 member_id = 1;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->member_id());
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  // uint32 watch = 3;
  if (this->watch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->watch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionProfileGroup_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ActionProfileGroup.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProfileGroup_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProfileGroup_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ActionProfileGroup.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ActionProfileGroup.Member)
    MergeFrom(*source);
  }
}

void ActionProfileGroup_Member::MergeFrom(const ActionProfileGroup_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileGroup.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
  if (from.watch() != 0) {
    set_watch(from.watch());
  }
}

void ActionProfileGroup_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ActionProfileGroup.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProfileGroup_Member::CopyFrom(const ActionProfileGroup_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileGroup.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileGroup_Member::IsInitialized() const {
  return true;
}

void ActionProfileGroup_Member::Swap(ActionProfileGroup_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProfileGroup_Member::InternalSwap(ActionProfileGroup_Member* other) {
  std::swap(member_id_, other->member_id_);
  std::swap(weight_, other->weight_);
  std::swap(watch_, other->watch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionProfileGroup_Member::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionProfileGroup_Member

// uint32 member_id = 1;
void ActionProfileGroup_Member::clear_member_id() {
  member_id_ = 0u;
}
::google::protobuf::uint32 ActionProfileGroup_Member::member_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileGroup.Member.member_id)
  return member_id_;
}
void ActionProfileGroup_Member::set_member_id(::google::protobuf::uint32 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileGroup.Member.member_id)
}

// int32 weight = 2;
void ActionProfileGroup_Member::clear_weight() {
  weight_ = 0;
}
::google::protobuf::int32 ActionProfileGroup_Member::weight() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileGroup.Member.weight)
  return weight_;
}
void ActionProfileGroup_Member::set_weight(::google::protobuf::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileGroup.Member.weight)
}

// uint32 watch = 3;
void ActionProfileGroup_Member::clear_watch() {
  watch_ = 0u;
}
::google::protobuf::uint32 ActionProfileGroup_Member::watch() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileGroup.Member.watch)
  return watch_;
}
void ActionProfileGroup_Member::set_watch(::google::protobuf::uint32 value) {
  
  watch_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileGroup.Member.watch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProfileGroup::kActionProfileIdFieldNumber;
const int ActionProfileGroup::kGroupIdFieldNumber;
const int ActionProfileGroup::kMembersFieldNumber;
const int ActionProfileGroup::kMaxSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProfileGroup::ActionProfileGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ActionProfileGroup)
}
ActionProfileGroup::ActionProfileGroup(const ActionProfileGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_profile_id_, &from.action_profile_id_,
    reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&action_profile_id_) + sizeof(max_size_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.ActionProfileGroup)
}

void ActionProfileGroup::SharedCtor() {
  ::memset(&action_profile_id_, 0, reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&action_profile_id_) + sizeof(max_size_));
  _cached_size_ = 0;
}

ActionProfileGroup::~ActionProfileGroup() {
  // @@protoc_insertion_point(destructor:p4.v1.ActionProfileGroup)
  SharedDtor();
}

void ActionProfileGroup::SharedDtor() {
}

void ActionProfileGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionProfileGroup::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[22].descriptor;
}

const ActionProfileGroup& ActionProfileGroup::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionProfileGroup* ActionProfileGroup::New(::google::protobuf::Arena* arena) const {
  ActionProfileGroup* n = new ActionProfileGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionProfileGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ActionProfileGroup)
  members_.Clear();
  ::memset(&action_profile_id_, 0, reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&action_profile_id_) + sizeof(max_size_));
}

bool ActionProfileGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ActionProfileGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 action_profile_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_profile_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.ActionProfileGroup.Member members = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 max_size = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ActionProfileGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ActionProfileGroup)
  return false;
#undef DO_
}

void ActionProfileGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ActionProfileGroup)
  // uint32 action_profile_id = 1;
  if (this->action_profile_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_profile_id(), output);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated .p4.v1.ActionProfileGroup.Member members = 3;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // int32 max_size = 4;
  if (this->max_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ActionProfileGroup)
}

::google::protobuf::uint8* ActionProfileGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ActionProfileGroup)
  // uint32 action_profile_id = 1;
  if (this->action_profile_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_profile_id(), target);
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // repeated .p4.v1.ActionProfileGroup.Member members = 3;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->members(i), false, target);
  }

  // int32 max_size = 4;
  if (this->max_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ActionProfileGroup)
  return target;
}

size_t ActionProfileGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ActionProfileGroup)
  size_t total_size = 0;

  // repeated .p4.v1.ActionProfileGroup.Member members = 3;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // uint32 action_profile_id = 1;
  if (this->action_profile_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_profile_id());
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // int32 max_size = 4;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionProfileGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ActionProfileGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProfileGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProfileGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ActionProfileGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ActionProfileGroup)
    MergeFrom(*source);
  }
}

void ActionProfileGroup::MergeFrom(const ActionProfileGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ActionProfileGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
  if (from.action_profile_id() != 0) {
    set_action_profile_id(from.action_profile_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.max_size() != 0) {
    set_max_size(from.max_size());
  }
}

void ActionProfileGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ActionProfileGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProfileGroup::CopyFrom(const ActionProfileGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ActionProfileGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileGroup::IsInitialized() const {
  return true;
}

void ActionProfileGroup::Swap(ActionProfileGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProfileGroup::InternalSwap(ActionProfileGroup* other) {
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(action_profile_id_, other->action_profile_id_);
  std::swap(group_id_, other->group_id_);
  std::swap(max_size_, other->max_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionProfileGroup::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionProfileGroup

// uint32 action_profile_id = 1;
void ActionProfileGroup::clear_action_profile_id() {
  action_profile_id_ = 0u;
}
::google::protobuf::uint32 ActionProfileGroup::action_profile_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileGroup.action_profile_id)
  return action_profile_id_;
}
void ActionProfileGroup::set_action_profile_id(::google::protobuf::uint32 value) {
  
  action_profile_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileGroup.action_profile_id)
}

// uint32 group_id = 2;
void ActionProfileGroup::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 ActionProfileGroup::group_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileGroup.group_id)
  return group_id_;
}
void ActionProfileGroup::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileGroup.group_id)
}

// repeated .p4.v1.ActionProfileGroup.Member members = 3;
int ActionProfileGroup::members_size() const {
  return members_.size();
}
void ActionProfileGroup::clear_members() {
  members_.Clear();
}
const ::p4::v1::ActionProfileGroup_Member& ActionProfileGroup::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileGroup.members)
  return members_.Get(index);
}
::p4::v1::ActionProfileGroup_Member* ActionProfileGroup::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.ActionProfileGroup.members)
  return members_.Mutable(index);
}
::p4::v1::ActionProfileGroup_Member* ActionProfileGroup::add_members() {
  // @@protoc_insertion_point(field_add:p4.v1.ActionProfileGroup.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::ActionProfileGroup_Member >*
ActionProfileGroup::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.ActionProfileGroup.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::ActionProfileGroup_Member >&
ActionProfileGroup::members() const {
  // @@protoc_insertion_point(field_list:p4.v1.ActionProfileGroup.members)
  return members_;
}

// int32 max_size = 4;
void ActionProfileGroup::clear_max_size() {
  max_size_ = 0;
}
::google::protobuf::int32 ActionProfileGroup::max_size() const {
  // @@protoc_insertion_point(field_get:p4.v1.ActionProfileGroup.max_size)
  return max_size_;
}
void ActionProfileGroup::set_max_size(::google::protobuf::int32 value) {
  
  max_size_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ActionProfileGroup.max_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Index::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Index::Index()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Index)
}
Index::Index(const Index& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Index)
}

void Index::SharedCtor() {
  index_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:p4.v1.Index)
  SharedDtor();
}

void Index::SharedDtor() {
}

void Index::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Index::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[23].descriptor;
}

const Index& Index::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Index* Index::New(::google::protobuf::Arena* arena) const {
  Index* n = new Index;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Index)
  index_ = GOOGLE_LONGLONG(0);
}

bool Index::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Index)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Index)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Index)
  return false;
#undef DO_
}

void Index::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Index)
  // int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Index)
}

::google::protobuf::uint8* Index::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Index)
  // int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Index)
  size_t total_size = 0;

  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Index::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Index)
  GOOGLE_DCHECK_NE(&from, this);
  const Index* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Index>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Index)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Index)
    MergeFrom(*source);
  }
}

void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Index)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void Index::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::Swap(Index* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Index::InternalSwap(Index* other) {
  std::swap(index_, other->index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Index::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Index

// int64 index = 1;
void Index::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Index::index() const {
  // @@protoc_insertion_point(field_get:p4.v1.Index.index)
  return index_;
}
void Index::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Index.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeterEntry::kMeterIdFieldNumber;
const int MeterEntry::kIndexFieldNumber;
const int MeterEntry::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeterEntry::MeterEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.MeterEntry)
}
MeterEntry::MeterEntry(const MeterEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index()) {
    index_ = new ::p4::v1::Index(*from.index_);
  } else {
    index_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::p4::v1::MeterConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  meter_id_ = from.meter_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.MeterEntry)
}

void MeterEntry::SharedCtor() {
  ::memset(&index_, 0, reinterpret_cast<char*>(&meter_id_) -
    reinterpret_cast<char*>(&index_) + sizeof(meter_id_));
  _cached_size_ = 0;
}

MeterEntry::~MeterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.MeterEntry)
  SharedDtor();
}

void MeterEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete index_;
  }
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void MeterEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeterEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[24].descriptor;
}

const MeterEntry& MeterEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeterEntry* MeterEntry::New(::google::protobuf::Arena* arena) const {
  MeterEntry* n = new MeterEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MeterEntry)
  if (GetArenaNoVirtual() == NULL && index_ != NULL) {
    delete index_;
  }
  index_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  meter_id_ = 0u;
}

bool MeterEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.MeterEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 meter_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Index index = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.MeterConfig config = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.MeterEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.MeterEntry)
  return false;
#undef DO_
}

void MeterEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.MeterEntry)
  // uint32 meter_id = 1;
  if (this->meter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->meter_id(), output);
  }

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->index_, output);
  }

  // .p4.v1.MeterConfig config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.MeterEntry)
}

::google::protobuf::uint8* MeterEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MeterEntry)
  // uint32 meter_id = 1;
  if (this->meter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->meter_id(), target);
  }

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->index_, false, target);
  }

  // .p4.v1.MeterConfig config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MeterEntry)
  return target;
}

size_t MeterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MeterEntry)
  size_t total_size = 0;

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_);
  }

  // .p4.v1.MeterConfig config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // uint32 meter_id = 1;
  if (this->meter_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->meter_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeterEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.MeterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MeterEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeterEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.MeterEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.MeterEntry)
    MergeFrom(*source);
  }
}

void MeterEntry::MergeFrom(const MeterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MeterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index()) {
    mutable_index()->::p4::v1::Index::MergeFrom(from.index());
  }
  if (from.has_config()) {
    mutable_config()->::p4::v1::MeterConfig::MergeFrom(from.config());
  }
  if (from.meter_id() != 0) {
    set_meter_id(from.meter_id());
  }
}

void MeterEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.MeterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeterEntry::CopyFrom(const MeterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MeterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterEntry::IsInitialized() const {
  return true;
}

void MeterEntry::Swap(MeterEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeterEntry::InternalSwap(MeterEntry* other) {
  std::swap(index_, other->index_);
  std::swap(config_, other->config_);
  std::swap(meter_id_, other->meter_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeterEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeterEntry

// uint32 meter_id = 1;
void MeterEntry::clear_meter_id() {
  meter_id_ = 0u;
}
::google::protobuf::uint32 MeterEntry::meter_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.MeterEntry.meter_id)
  return meter_id_;
}
void MeterEntry::set_meter_id(::google::protobuf::uint32 value) {
  
  meter_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.MeterEntry.meter_id)
}

// .p4.v1.Index index = 2;
bool MeterEntry::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
void MeterEntry::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
const ::p4::v1::Index& MeterEntry::index() const {
  // @@protoc_insertion_point(field_get:p4.v1.MeterEntry.index)
  return index_ != NULL ? *index_
                         : *::p4::v1::Index::internal_default_instance();
}
::p4::v1::Index* MeterEntry::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::p4::v1::Index;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.MeterEntry.index)
  return index_;
}
::p4::v1::Index* MeterEntry::release_index() {
  // @@protoc_insertion_point(field_release:p4.v1.MeterEntry.index)
  
  ::p4::v1::Index* temp = index_;
  index_ = NULL;
  return temp;
}
void MeterEntry::set_allocated_index(::p4::v1::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.MeterEntry.index)
}

// .p4.v1.MeterConfig config = 3;
bool MeterEntry::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void MeterEntry::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::p4::v1::MeterConfig& MeterEntry::config() const {
  // @@protoc_insertion_point(field_get:p4.v1.MeterEntry.config)
  return config_ != NULL ? *config_
                         : *::p4::v1::MeterConfig::internal_default_instance();
}
::p4::v1::MeterConfig* MeterEntry::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::p4::v1::MeterConfig;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.MeterEntry.config)
  return config_;
}
::p4::v1::MeterConfig* MeterEntry::release_config() {
  // @@protoc_insertion_point(field_release:p4.v1.MeterEntry.config)
  
  ::p4::v1::MeterConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void MeterEntry::set_allocated_config(::p4::v1::MeterConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.MeterEntry.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectMeterEntry::kTableEntryFieldNumber;
const int DirectMeterEntry::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectMeterEntry::DirectMeterEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.DirectMeterEntry)
}
DirectMeterEntry::DirectMeterEntry(const DirectMeterEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_entry()) {
    table_entry_ = new ::p4::v1::TableEntry(*from.table_entry_);
  } else {
    table_entry_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::p4::v1::MeterConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DirectMeterEntry)
}

void DirectMeterEntry::SharedCtor() {
  ::memset(&table_entry_, 0, reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&table_entry_) + sizeof(config_));
  _cached_size_ = 0;
}

DirectMeterEntry::~DirectMeterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DirectMeterEntry)
  SharedDtor();
}

void DirectMeterEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete table_entry_;
  }
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void DirectMeterEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectMeterEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[25].descriptor;
}

const DirectMeterEntry& DirectMeterEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectMeterEntry* DirectMeterEntry::New(::google::protobuf::Arena* arena) const {
  DirectMeterEntry* n = new DirectMeterEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectMeterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DirectMeterEntry)
  if (GetArenaNoVirtual() == NULL && table_entry_ != NULL) {
    delete table_entry_;
  }
  table_entry_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}

bool DirectMeterEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.DirectMeterEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.TableEntry table_entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.MeterConfig config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.DirectMeterEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.DirectMeterEntry)
  return false;
#undef DO_
}

void DirectMeterEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.DirectMeterEntry)
  // .p4.v1.TableEntry table_entry = 1;
  if (this->has_table_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_entry_, output);
  }

  // .p4.v1.MeterConfig config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.DirectMeterEntry)
}

::google::protobuf::uint8* DirectMeterEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DirectMeterEntry)
  // .p4.v1.TableEntry table_entry = 1;
  if (this->has_table_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->table_entry_, false, target);
  }

  // .p4.v1.MeterConfig config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DirectMeterEntry)
  return target;
}

size_t DirectMeterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DirectMeterEntry)
  size_t total_size = 0;

  // .p4.v1.TableEntry table_entry = 1;
  if (this->has_table_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_entry_);
  }

  // .p4.v1.MeterConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectMeterEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.DirectMeterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectMeterEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectMeterEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.DirectMeterEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.DirectMeterEntry)
    MergeFrom(*source);
  }
}

void DirectMeterEntry::MergeFrom(const DirectMeterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DirectMeterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_entry()) {
    mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from.table_entry());
  }
  if (from.has_config()) {
    mutable_config()->::p4::v1::MeterConfig::MergeFrom(from.config());
  }
}

void DirectMeterEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.DirectMeterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectMeterEntry::CopyFrom(const DirectMeterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DirectMeterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectMeterEntry::IsInitialized() const {
  return true;
}

void DirectMeterEntry::Swap(DirectMeterEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectMeterEntry::InternalSwap(DirectMeterEntry* other) {
  std::swap(table_entry_, other->table_entry_);
  std::swap(config_, other->config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectMeterEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectMeterEntry

// .p4.v1.TableEntry table_entry = 1;
bool DirectMeterEntry::has_table_entry() const {
  return this != internal_default_instance() && table_entry_ != NULL;
}
void DirectMeterEntry::clear_table_entry() {
  if (GetArenaNoVirtual() == NULL && table_entry_ != NULL) delete table_entry_;
  table_entry_ = NULL;
}
const ::p4::v1::TableEntry& DirectMeterEntry::table_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.DirectMeterEntry.table_entry)
  return table_entry_ != NULL ? *table_entry_
                         : *::p4::v1::TableEntry::internal_default_instance();
}
::p4::v1::TableEntry* DirectMeterEntry::mutable_table_entry() {
  
  if (table_entry_ == NULL) {
    table_entry_ = new ::p4::v1::TableEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.DirectMeterEntry.table_entry)
  return table_entry_;
}
::p4::v1::TableEntry* DirectMeterEntry::release_table_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.DirectMeterEntry.table_entry)
  
  ::p4::v1::TableEntry* temp = table_entry_;
  table_entry_ = NULL;
  return temp;
}
void DirectMeterEntry::set_allocated_table_entry(::p4::v1::TableEntry* table_entry) {
  delete table_entry_;
  table_entry_ = table_entry;
  if (table_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.DirectMeterEntry.table_entry)
}

// .p4.v1.MeterConfig config = 2;
bool DirectMeterEntry::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void DirectMeterEntry::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::p4::v1::MeterConfig& DirectMeterEntry::config() const {
  // @@protoc_insertion_point(field_get:p4.v1.DirectMeterEntry.config)
  return config_ != NULL ? *config_
                         : *::p4::v1::MeterConfig::internal_default_instance();
}
::p4::v1::MeterConfig* DirectMeterEntry::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::p4::v1::MeterConfig;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.DirectMeterEntry.config)
  return config_;
}
::p4::v1::MeterConfig* DirectMeterEntry::release_config() {
  // @@protoc_insertion_point(field_release:p4.v1.DirectMeterEntry.config)
  
  ::p4::v1::MeterConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void DirectMeterEntry::set_allocated_config(::p4::v1::MeterConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.DirectMeterEntry.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeterConfig::kCirFieldNumber;
const int MeterConfig::kCburstFieldNumber;
const int MeterConfig::kPirFieldNumber;
const int MeterConfig::kPburstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeterConfig::MeterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.MeterConfig)
}
MeterConfig::MeterConfig(const MeterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cir_, &from.cir_,
    reinterpret_cast<char*>(&pburst_) -
    reinterpret_cast<char*>(&cir_) + sizeof(pburst_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.MeterConfig)
}

void MeterConfig::SharedCtor() {
  ::memset(&cir_, 0, reinterpret_cast<char*>(&pburst_) -
    reinterpret_cast<char*>(&cir_) + sizeof(pburst_));
  _cached_size_ = 0;
}

MeterConfig::~MeterConfig() {
  // @@protoc_insertion_point(destructor:p4.v1.MeterConfig)
  SharedDtor();
}

void MeterConfig::SharedDtor() {
}

void MeterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeterConfig::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[26].descriptor;
}

const MeterConfig& MeterConfig::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeterConfig* MeterConfig::New(::google::protobuf::Arena* arena) const {
  MeterConfig* n = new MeterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MeterConfig)
  ::memset(&cir_, 0, reinterpret_cast<char*>(&pburst_) -
    reinterpret_cast<char*>(&cir_) + sizeof(pburst_));
}

bool MeterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.MeterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cir = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cburst = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cburst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pir = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pburst = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pburst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.MeterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.MeterConfig)
  return false;
#undef DO_
}

void MeterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.MeterConfig)
  // int64 cir = 1;
  if (this->cir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cir(), output);
  }

  // int64 cburst = 2;
  if (this->cburst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cburst(), output);
  }

  // int64 pir = 3;
  if (this->pir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pir(), output);
  }

  // int64 pburst = 4;
  if (this->pburst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->pburst(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.MeterConfig)
}

::google::protobuf::uint8* MeterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MeterConfig)
  // int64 cir = 1;
  if (this->cir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cir(), target);
  }

  // int64 cburst = 2;
  if (this->cburst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cburst(), target);
  }

  // int64 pir = 3;
  if (this->pir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pir(), target);
  }

  // int64 pburst = 4;
  if (this->pburst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->pburst(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MeterConfig)
  return target;
}

size_t MeterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MeterConfig)
  size_t total_size = 0;

  // int64 cir = 1;
  if (this->cir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cir());
  }

  // int64 cburst = 2;
  if (this->cburst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cburst());
  }

  // int64 pir = 3;
  if (this->pir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pir());
  }

  // int64 pburst = 4;
  if (this->pburst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pburst());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.MeterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MeterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.MeterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.MeterConfig)
    MergeFrom(*source);
  }
}

void MeterConfig::MergeFrom(const MeterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MeterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cir() != 0) {
    set_cir(from.cir());
  }
  if (from.cburst() != 0) {
    set_cburst(from.cburst());
  }
  if (from.pir() != 0) {
    set_pir(from.pir());
  }
  if (from.pburst() != 0) {
    set_pburst(from.pburst());
  }
}

void MeterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.MeterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeterConfig::CopyFrom(const MeterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MeterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeterConfig::IsInitialized() const {
  return true;
}

void MeterConfig::Swap(MeterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeterConfig::InternalSwap(MeterConfig* other) {
  std::swap(cir_, other->cir_);
  std::swap(cburst_, other->cburst_);
  std::swap(pir_, other->pir_);
  std::swap(pburst_, other->pburst_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeterConfig::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeterConfig

// int64 cir = 1;
void MeterConfig::clear_cir() {
  cir_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MeterConfig::cir() const {
  // @@protoc_insertion_point(field_get:p4.v1.MeterConfig.cir)
  return cir_;
}
void MeterConfig::set_cir(::google::protobuf::int64 value) {
  
  cir_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.MeterConfig.cir)
}

// int64 cburst = 2;
void MeterConfig::clear_cburst() {
  cburst_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MeterConfig::cburst() const {
  // @@protoc_insertion_point(field_get:p4.v1.MeterConfig.cburst)
  return cburst_;
}
void MeterConfig::set_cburst(::google::protobuf::int64 value) {
  
  cburst_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.MeterConfig.cburst)
}

// int64 pir = 3;
void MeterConfig::clear_pir() {
  pir_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MeterConfig::pir() const {
  // @@protoc_insertion_point(field_get:p4.v1.MeterConfig.pir)
  return pir_;
}
void MeterConfig::set_pir(::google::protobuf::int64 value) {
  
  pir_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.MeterConfig.pir)
}

// int64 pburst = 4;
void MeterConfig::clear_pburst() {
  pburst_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 MeterConfig::pburst() const {
  // @@protoc_insertion_point(field_get:p4.v1.MeterConfig.pburst)
  return pburst_;
}
void MeterConfig::set_pburst(::google::protobuf::int64 value) {
  
  pburst_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.MeterConfig.pburst)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CounterEntry::kCounterIdFieldNumber;
const int CounterEntry::kIndexFieldNumber;
const int CounterEntry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CounterEntry::CounterEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.CounterEntry)
}
CounterEntry::CounterEntry(const CounterEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index()) {
    index_ = new ::p4::v1::Index(*from.index_);
  } else {
    index_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::p4::v1::CounterData(*from.data_);
  } else {
    data_ = NULL;
  }
  counter_id_ = from.counter_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.CounterEntry)
}

void CounterEntry::SharedCtor() {
  ::memset(&index_, 0, reinterpret_cast<char*>(&counter_id_) -
    reinterpret_cast<char*>(&index_) + sizeof(counter_id_));
  _cached_size_ = 0;
}

CounterEntry::~CounterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.CounterEntry)
  SharedDtor();
}

void CounterEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete index_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void CounterEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[27].descriptor;
}

const CounterEntry& CounterEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

CounterEntry* CounterEntry::New(::google::protobuf::Arena* arena) const {
  CounterEntry* n = new CounterEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CounterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CounterEntry)
  if (GetArenaNoVirtual() == NULL && index_ != NULL) {
    delete index_;
  }
  index_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  counter_id_ = 0u;
}

bool CounterEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.CounterEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 counter_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Index index = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.CounterData data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.CounterEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.CounterEntry)
  return false;
#undef DO_
}

void CounterEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.CounterEntry)
  // uint32 counter_id = 1;
  if (this->counter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->counter_id(), output);
  }

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->index_, output);
  }

  // .p4.v1.CounterData data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.CounterEntry)
}

::google::protobuf::uint8* CounterEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CounterEntry)
  // uint32 counter_id = 1;
  if (this->counter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->counter_id(), target);
  }

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->index_, false, target);
  }

  // .p4.v1.CounterData data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CounterEntry)
  return target;
}

size_t CounterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CounterEntry)
  size_t total_size = 0;

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_);
  }

  // .p4.v1.CounterData data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // uint32 counter_id = 1;
  if (this->counter_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->counter_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.CounterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CounterEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CounterEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.CounterEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.CounterEntry)
    MergeFrom(*source);
  }
}

void CounterEntry::MergeFrom(const CounterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CounterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index()) {
    mutable_index()->::p4::v1::Index::MergeFrom(from.index());
  }
  if (from.has_data()) {
    mutable_data()->::p4::v1::CounterData::MergeFrom(from.data());
  }
  if (from.counter_id() != 0) {
    set_counter_id(from.counter_id());
  }
}

void CounterEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.CounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterEntry::CopyFrom(const CounterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterEntry::IsInitialized() const {
  return true;
}

void CounterEntry::Swap(CounterEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CounterEntry::InternalSwap(CounterEntry* other) {
  std::swap(index_, other->index_);
  std::swap(data_, other->data_);
  std::swap(counter_id_, other->counter_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CounterEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CounterEntry

// uint32 counter_id = 1;
void CounterEntry::clear_counter_id() {
  counter_id_ = 0u;
}
::google::protobuf::uint32 CounterEntry::counter_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.CounterEntry.counter_id)
  return counter_id_;
}
void CounterEntry::set_counter_id(::google::protobuf::uint32 value) {
  
  counter_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.CounterEntry.counter_id)
}

// .p4.v1.Index index = 2;
bool CounterEntry::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
void CounterEntry::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
const ::p4::v1::Index& CounterEntry::index() const {
  // @@protoc_insertion_point(field_get:p4.v1.CounterEntry.index)
  return index_ != NULL ? *index_
                         : *::p4::v1::Index::internal_default_instance();
}
::p4::v1::Index* CounterEntry::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::p4::v1::Index;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.CounterEntry.index)
  return index_;
}
::p4::v1::Index* CounterEntry::release_index() {
  // @@protoc_insertion_point(field_release:p4.v1.CounterEntry.index)
  
  ::p4::v1::Index* temp = index_;
  index_ = NULL;
  return temp;
}
void CounterEntry::set_allocated_index(::p4::v1::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.CounterEntry.index)
}

// .p4.v1.CounterData data = 3;
bool CounterEntry::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void CounterEntry::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::p4::v1::CounterData& CounterEntry::data() const {
  // @@protoc_insertion_point(field_get:p4.v1.CounterEntry.data)
  return data_ != NULL ? *data_
                         : *::p4::v1::CounterData::internal_default_instance();
}
::p4::v1::CounterData* CounterEntry::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::p4::v1::CounterData;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.CounterEntry.data)
  return data_;
}
::p4::v1::CounterData* CounterEntry::release_data() {
  // @@protoc_insertion_point(field_release:p4.v1.CounterEntry.data)
  
  ::p4::v1::CounterData* temp = data_;
  data_ = NULL;
  return temp;
}
void CounterEntry::set_allocated_data(::p4::v1::CounterData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.CounterEntry.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectCounterEntry::kTableEntryFieldNumber;
const int DirectCounterEntry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectCounterEntry::DirectCounterEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.DirectCounterEntry)
}
DirectCounterEntry::DirectCounterEntry(const DirectCounterEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_entry()) {
    table_entry_ = new ::p4::v1::TableEntry(*from.table_entry_);
  } else {
    table_entry_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::p4::v1::CounterData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DirectCounterEntry)
}

void DirectCounterEntry::SharedCtor() {
  ::memset(&table_entry_, 0, reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&table_entry_) + sizeof(data_));
  _cached_size_ = 0;
}

DirectCounterEntry::~DirectCounterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DirectCounterEntry)
  SharedDtor();
}

void DirectCounterEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete table_entry_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void DirectCounterEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectCounterEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[28].descriptor;
}

const DirectCounterEntry& DirectCounterEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectCounterEntry* DirectCounterEntry::New(::google::protobuf::Arena* arena) const {
  DirectCounterEntry* n = new DirectCounterEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectCounterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DirectCounterEntry)
  if (GetArenaNoVirtual() == NULL && table_entry_ != NULL) {
    delete table_entry_;
  }
  table_entry_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}

bool DirectCounterEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.DirectCounterEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.TableEntry table_entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.CounterData data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.DirectCounterEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.DirectCounterEntry)
  return false;
#undef DO_
}

void DirectCounterEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.DirectCounterEntry)
  // .p4.v1.TableEntry table_entry = 1;
  if (this->has_table_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_entry_, output);
  }

  // .p4.v1.CounterData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.DirectCounterEntry)
}

::google::protobuf::uint8* DirectCounterEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DirectCounterEntry)
  // .p4.v1.TableEntry table_entry = 1;
  if (this->has_table_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->table_entry_, false, target);
  }

  // .p4.v1.CounterData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DirectCounterEntry)
  return target;
}

size_t DirectCounterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DirectCounterEntry)
  size_t total_size = 0;

  // .p4.v1.TableEntry table_entry = 1;
  if (this->has_table_entry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_entry_);
  }

  // .p4.v1.CounterData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectCounterEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.DirectCounterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectCounterEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectCounterEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.DirectCounterEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.DirectCounterEntry)
    MergeFrom(*source);
  }
}

void DirectCounterEntry::MergeFrom(const DirectCounterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DirectCounterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_entry()) {
    mutable_table_entry()->::p4::v1::TableEntry::MergeFrom(from.table_entry());
  }
  if (from.has_data()) {
    mutable_data()->::p4::v1::CounterData::MergeFrom(from.data());
  }
}

void DirectCounterEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.DirectCounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectCounterEntry::CopyFrom(const DirectCounterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DirectCounterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectCounterEntry::IsInitialized() const {
  return true;
}

void DirectCounterEntry::Swap(DirectCounterEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectCounterEntry::InternalSwap(DirectCounterEntry* other) {
  std::swap(table_entry_, other->table_entry_);
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectCounterEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectCounterEntry

// .p4.v1.TableEntry table_entry = 1;
bool DirectCounterEntry::has_table_entry() const {
  return this != internal_default_instance() && table_entry_ != NULL;
}
void DirectCounterEntry::clear_table_entry() {
  if (GetArenaNoVirtual() == NULL && table_entry_ != NULL) delete table_entry_;
  table_entry_ = NULL;
}
const ::p4::v1::TableEntry& DirectCounterEntry::table_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.DirectCounterEntry.table_entry)
  return table_entry_ != NULL ? *table_entry_
                         : *::p4::v1::TableEntry::internal_default_instance();
}
::p4::v1::TableEntry* DirectCounterEntry::mutable_table_entry() {
  
  if (table_entry_ == NULL) {
    table_entry_ = new ::p4::v1::TableEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.DirectCounterEntry.table_entry)
  return table_entry_;
}
::p4::v1::TableEntry* DirectCounterEntry::release_table_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.DirectCounterEntry.table_entry)
  
  ::p4::v1::TableEntry* temp = table_entry_;
  table_entry_ = NULL;
  return temp;
}
void DirectCounterEntry::set_allocated_table_entry(::p4::v1::TableEntry* table_entry) {
  delete table_entry_;
  table_entry_ = table_entry;
  if (table_entry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.DirectCounterEntry.table_entry)
}

// .p4.v1.CounterData data = 2;
bool DirectCounterEntry::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void DirectCounterEntry::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::p4::v1::CounterData& DirectCounterEntry::data() const {
  // @@protoc_insertion_point(field_get:p4.v1.DirectCounterEntry.data)
  return data_ != NULL ? *data_
                         : *::p4::v1::CounterData::internal_default_instance();
}
::p4::v1::CounterData* DirectCounterEntry::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::p4::v1::CounterData;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.DirectCounterEntry.data)
  return data_;
}
::p4::v1::CounterData* DirectCounterEntry::release_data() {
  // @@protoc_insertion_point(field_release:p4.v1.DirectCounterEntry.data)
  
  ::p4::v1::CounterData* temp = data_;
  data_ = NULL;
  return temp;
}
void DirectCounterEntry::set_allocated_data(::p4::v1::CounterData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.DirectCounterEntry.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CounterData::kByteCountFieldNumber;
const int CounterData::kPacketCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CounterData::CounterData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.CounterData)
}
CounterData::CounterData(const CounterData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&byte_count_, &from.byte_count_,
    reinterpret_cast<char*>(&packet_count_) -
    reinterpret_cast<char*>(&byte_count_) + sizeof(packet_count_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.CounterData)
}

void CounterData::SharedCtor() {
  ::memset(&byte_count_, 0, reinterpret_cast<char*>(&packet_count_) -
    reinterpret_cast<char*>(&byte_count_) + sizeof(packet_count_));
  _cached_size_ = 0;
}

CounterData::~CounterData() {
  // @@protoc_insertion_point(destructor:p4.v1.CounterData)
  SharedDtor();
}

void CounterData::SharedDtor() {
}

void CounterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterData::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[29].descriptor;
}

const CounterData& CounterData::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

CounterData* CounterData::New(::google::protobuf::Arena* arena) const {
  CounterData* n = new CounterData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CounterData)
  ::memset(&byte_count_, 0, reinterpret_cast<char*>(&packet_count_) -
    reinterpret_cast<char*>(&byte_count_) + sizeof(packet_count_));
}

bool CounterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.CounterData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 byte_count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &byte_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 packet_count = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packet_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.CounterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.CounterData)
  return false;
#undef DO_
}

void CounterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.CounterData)
  // int64 byte_count = 1;
  if (this->byte_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->byte_count(), output);
  }

  // int64 packet_count = 2;
  if (this->packet_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packet_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.CounterData)
}

::google::protobuf::uint8* CounterData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CounterData)
  // int64 byte_count = 1;
  if (this->byte_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->byte_count(), target);
  }

  // int64 packet_count = 2;
  if (this->packet_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->packet_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CounterData)
  return target;
}

size_t CounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CounterData)
  size_t total_size = 0;

  // int64 byte_count = 1;
  if (this->byte_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->byte_count());
  }

  // int64 packet_count = 2;
  if (this->packet_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->packet_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.CounterData)
  GOOGLE_DCHECK_NE(&from, this);
  const CounterData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CounterData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.CounterData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.CounterData)
    MergeFrom(*source);
  }
}

void CounterData::MergeFrom(const CounterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CounterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.byte_count() != 0) {
    set_byte_count(from.byte_count());
  }
  if (from.packet_count() != 0) {
    set_packet_count(from.packet_count());
  }
}

void CounterData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.CounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterData::CopyFrom(const CounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterData::IsInitialized() const {
  return true;
}

void CounterData::Swap(CounterData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CounterData::InternalSwap(CounterData* other) {
  std::swap(byte_count_, other->byte_count_);
  std::swap(packet_count_, other->packet_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CounterData::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CounterData

// int64 byte_count = 1;
void CounterData::clear_byte_count() {
  byte_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CounterData::byte_count() const {
  // @@protoc_insertion_point(field_get:p4.v1.CounterData.byte_count)
  return byte_count_;
}
void CounterData::set_byte_count(::google::protobuf::int64 value) {
  
  byte_count_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.CounterData.byte_count)
}

// int64 packet_count = 2;
void CounterData::clear_packet_count() {
  packet_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CounterData::packet_count() const {
  // @@protoc_insertion_point(field_get:p4.v1.CounterData.packet_count)
  return packet_count_;
}
void CounterData::set_packet_count(::google::protobuf::int64 value) {
  
  packet_count_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.CounterData.packet_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketReplicationEngineEntry::kMulticastGroupEntryFieldNumber;
const int PacketReplicationEngineEntry::kCloneSessionEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketReplicationEngineEntry::PacketReplicationEngineEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.PacketReplicationEngineEntry)
}
PacketReplicationEngineEntry::PacketReplicationEngineEntry(const PacketReplicationEngineEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kMulticastGroupEntry: {
      mutable_multicast_group_entry()->::p4::v1::MulticastGroupEntry::MergeFrom(from.multicast_group_entry());
      break;
    }
    case kCloneSessionEntry: {
      mutable_clone_session_entry()->::p4::v1::CloneSessionEntry::MergeFrom(from.clone_session_entry());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketReplicationEngineEntry)
}

void PacketReplicationEngineEntry::SharedCtor() {
  clear_has_type();
  _cached_size_ = 0;
}

PacketReplicationEngineEntry::~PacketReplicationEngineEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketReplicationEngineEntry)
  SharedDtor();
}

void PacketReplicationEngineEntry::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void PacketReplicationEngineEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketReplicationEngineEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[30].descriptor;
}

const PacketReplicationEngineEntry& PacketReplicationEngineEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketReplicationEngineEntry* PacketReplicationEngineEntry::New(::google::protobuf::Arena* arena) const {
  PacketReplicationEngineEntry* n = new PacketReplicationEngineEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketReplicationEngineEntry::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.PacketReplicationEngineEntry)
  switch (type_case()) {
    case kMulticastGroupEntry: {
      delete type_.multicast_group_entry_;
      break;
    }
    case kCloneSessionEntry: {
      delete type_.clone_session_entry_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void PacketReplicationEngineEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketReplicationEngineEntry)
  clear_type();
}

bool PacketReplicationEngineEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.PacketReplicationEngineEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multicast_group_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.CloneSessionEntry clone_session_entry = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clone_session_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.PacketReplicationEngineEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.PacketReplicationEngineEntry)
  return false;
#undef DO_
}

void PacketReplicationEngineEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.PacketReplicationEngineEntry)
  // .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
  if (has_multicast_group_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.multicast_group_entry_, output);
  }

  // .p4.v1.CloneSessionEntry clone_session_entry = 2;
  if (has_clone_session_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.clone_session_entry_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.PacketReplicationEngineEntry)
}

::google::protobuf::uint8* PacketReplicationEngineEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketReplicationEngineEntry)
  // .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
  if (has_multicast_group_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.multicast_group_entry_, false, target);
  }

  // .p4.v1.CloneSessionEntry clone_session_entry = 2;
  if (has_clone_session_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.clone_session_entry_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketReplicationEngineEntry)
  return target;
}

size_t PacketReplicationEngineEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketReplicationEngineEntry)
  size_t total_size = 0;

  switch (type_case()) {
    // .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
    case kMulticastGroupEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.multicast_group_entry_);
      break;
    }
    // .p4.v1.CloneSessionEntry clone_session_entry = 2;
    case kCloneSessionEntry: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.clone_session_entry_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketReplicationEngineEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.PacketReplicationEngineEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketReplicationEngineEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketReplicationEngineEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.PacketReplicationEngineEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.PacketReplicationEngineEntry)
    MergeFrom(*source);
  }
}

void PacketReplicationEngineEntry::MergeFrom(const PacketReplicationEngineEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketReplicationEngineEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.type_case()) {
    case kMulticastGroupEntry: {
      mutable_multicast_group_entry()->::p4::v1::MulticastGroupEntry::MergeFrom(from.multicast_group_entry());
      break;
    }
    case kCloneSessionEntry: {
      mutable_clone_session_entry()->::p4::v1::CloneSessionEntry::MergeFrom(from.clone_session_entry());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void PacketReplicationEngineEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.PacketReplicationEngineEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketReplicationEngineEntry::CopyFrom(const PacketReplicationEngineEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketReplicationEngineEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketReplicationEngineEntry::IsInitialized() const {
  return true;
}

void PacketReplicationEngineEntry::Swap(PacketReplicationEngineEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketReplicationEngineEntry::InternalSwap(PacketReplicationEngineEntry* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketReplicationEngineEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketReplicationEngineEntry

// .p4.v1.MulticastGroupEntry multicast_group_entry = 1;
bool PacketReplicationEngineEntry::has_multicast_group_entry() const {
  return type_case() == kMulticastGroupEntry;
}
void PacketReplicationEngineEntry::set_has_multicast_group_entry() {
  _oneof_case_[0] = kMulticastGroupEntry;
}
void PacketReplicationEngineEntry::clear_multicast_group_entry() {
  if (has_multicast_group_entry()) {
    delete type_.multicast_group_entry_;
    clear_has_type();
  }
}
 const ::p4::v1::MulticastGroupEntry& PacketReplicationEngineEntry::multicast_group_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketReplicationEngineEntry.multicast_group_entry)
  return has_multicast_group_entry()
      ? *type_.multicast_group_entry_
      : ::p4::v1::MulticastGroupEntry::default_instance();
}
::p4::v1::MulticastGroupEntry* PacketReplicationEngineEntry::mutable_multicast_group_entry() {
  if (!has_multicast_group_entry()) {
    clear_type();
    set_has_multicast_group_entry();
    type_.multicast_group_entry_ = new ::p4::v1::MulticastGroupEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketReplicationEngineEntry.multicast_group_entry)
  return type_.multicast_group_entry_;
}
::p4::v1::MulticastGroupEntry* PacketReplicationEngineEntry::release_multicast_group_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.PacketReplicationEngineEntry.multicast_group_entry)
  if (has_multicast_group_entry()) {
    clear_has_type();
    ::p4::v1::MulticastGroupEntry* temp = type_.multicast_group_entry_;
    type_.multicast_group_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PacketReplicationEngineEntry::set_allocated_multicast_group_entry(::p4::v1::MulticastGroupEntry* multicast_group_entry) {
  clear_type();
  if (multicast_group_entry) {
    set_has_multicast_group_entry();
    type_.multicast_group_entry_ = multicast_group_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketReplicationEngineEntry.multicast_group_entry)
}

// .p4.v1.CloneSessionEntry clone_session_entry = 2;
bool PacketReplicationEngineEntry::has_clone_session_entry() const {
  return type_case() == kCloneSessionEntry;
}
void PacketReplicationEngineEntry::set_has_clone_session_entry() {
  _oneof_case_[0] = kCloneSessionEntry;
}
void PacketReplicationEngineEntry::clear_clone_session_entry() {
  if (has_clone_session_entry()) {
    delete type_.clone_session_entry_;
    clear_has_type();
  }
}
 const ::p4::v1::CloneSessionEntry& PacketReplicationEngineEntry::clone_session_entry() const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketReplicationEngineEntry.clone_session_entry)
  return has_clone_session_entry()
      ? *type_.clone_session_entry_
      : ::p4::v1::CloneSessionEntry::default_instance();
}
::p4::v1::CloneSessionEntry* PacketReplicationEngineEntry::mutable_clone_session_entry() {
  if (!has_clone_session_entry()) {
    clear_type();
    set_has_clone_session_entry();
    type_.clone_session_entry_ = new ::p4::v1::CloneSessionEntry;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketReplicationEngineEntry.clone_session_entry)
  return type_.clone_session_entry_;
}
::p4::v1::CloneSessionEntry* PacketReplicationEngineEntry::release_clone_session_entry() {
  // @@protoc_insertion_point(field_release:p4.v1.PacketReplicationEngineEntry.clone_session_entry)
  if (has_clone_session_entry()) {
    clear_has_type();
    ::p4::v1::CloneSessionEntry* temp = type_.clone_session_entry_;
    type_.clone_session_entry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PacketReplicationEngineEntry::set_allocated_clone_session_entry(::p4::v1::CloneSessionEntry* clone_session_entry) {
  clear_type();
  if (clone_session_entry) {
    set_has_clone_session_entry();
    type_.clone_session_entry_ = clone_session_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketReplicationEngineEntry.clone_session_entry)
}

bool PacketReplicationEngineEntry::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void PacketReplicationEngineEntry::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
PacketReplicationEngineEntry::TypeCase PacketReplicationEngineEntry::type_case() const {
  return PacketReplicationEngineEntry::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Replica::kEgressPortFieldNumber;
const int Replica::kInstanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Replica::Replica()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Replica)
}
Replica::Replica(const Replica& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&egress_port_, &from.egress_port_,
    reinterpret_cast<char*>(&instance_) -
    reinterpret_cast<char*>(&egress_port_) + sizeof(instance_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.Replica)
}

void Replica::SharedCtor() {
  ::memset(&egress_port_, 0, reinterpret_cast<char*>(&instance_) -
    reinterpret_cast<char*>(&egress_port_) + sizeof(instance_));
  _cached_size_ = 0;
}

Replica::~Replica() {
  // @@protoc_insertion_point(destructor:p4.v1.Replica)
  SharedDtor();
}

void Replica::SharedDtor() {
}

void Replica::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Replica::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[31].descriptor;
}

const Replica& Replica::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Replica* Replica::New(::google::protobuf::Arena* arena) const {
  Replica* n = new Replica;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Replica::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Replica)
  ::memset(&egress_port_, 0, reinterpret_cast<char*>(&instance_) -
    reinterpret_cast<char*>(&egress_port_) + sizeof(instance_));
}

bool Replica::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Replica)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 egress_port = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &egress_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 instance = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Replica)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Replica)
  return false;
#undef DO_
}

void Replica::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Replica)
  // uint32 egress_port = 1;
  if (this->egress_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->egress_port(), output);
  }

  // uint32 instance = 2;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instance(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Replica)
}

::google::protobuf::uint8* Replica::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Replica)
  // uint32 egress_port = 1;
  if (this->egress_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->egress_port(), target);
  }

  // uint32 instance = 2;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Replica)
  return target;
}

size_t Replica::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Replica)
  size_t total_size = 0;

  // uint32 egress_port = 1;
  if (this->egress_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->egress_port());
  }

  // uint32 instance = 2;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->instance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Replica::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Replica)
  GOOGLE_DCHECK_NE(&from, this);
  const Replica* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Replica>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Replica)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Replica)
    MergeFrom(*source);
  }
}

void Replica::MergeFrom(const Replica& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Replica)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.egress_port() != 0) {
    set_egress_port(from.egress_port());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
}

void Replica::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Replica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replica::CopyFrom(const Replica& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Replica)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replica::IsInitialized() const {
  return true;
}

void Replica::Swap(Replica* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Replica::InternalSwap(Replica* other) {
  std::swap(egress_port_, other->egress_port_);
  std::swap(instance_, other->instance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Replica::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Replica

// uint32 egress_port = 1;
void Replica::clear_egress_port() {
  egress_port_ = 0u;
}
::google::protobuf::uint32 Replica::egress_port() const {
  // @@protoc_insertion_point(field_get:p4.v1.Replica.egress_port)
  return egress_port_;
}
void Replica::set_egress_port(::google::protobuf::uint32 value) {
  
  egress_port_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Replica.egress_port)
}

// uint32 instance = 2;
void Replica::clear_instance() {
  instance_ = 0u;
}
::google::protobuf::uint32 Replica::instance() const {
  // @@protoc_insertion_point(field_get:p4.v1.Replica.instance)
  return instance_;
}
void Replica::set_instance(::google::protobuf::uint32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Replica.instance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MulticastGroupEntry::kMulticastGroupIdFieldNumber;
const int MulticastGroupEntry::kReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MulticastGroupEntry::MulticastGroupEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.MulticastGroupEntry)
}
MulticastGroupEntry::MulticastGroupEntry(const MulticastGroupEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      replicas_(from.replicas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  multicast_group_id_ = from.multicast_group_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.MulticastGroupEntry)
}

void MulticastGroupEntry::SharedCtor() {
  multicast_group_id_ = 0u;
  _cached_size_ = 0;
}

MulticastGroupEntry::~MulticastGroupEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.MulticastGroupEntry)
  SharedDtor();
}

void MulticastGroupEntry::SharedDtor() {
}

void MulticastGroupEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MulticastGroupEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[32].descriptor;
}

const MulticastGroupEntry& MulticastGroupEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

MulticastGroupEntry* MulticastGroupEntry::New(::google::protobuf::Arena* arena) const {
  MulticastGroupEntry* n = new MulticastGroupEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MulticastGroupEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MulticastGroupEntry)
  replicas_.Clear();
  multicast_group_id_ = 0u;
}

bool MulticastGroupEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.MulticastGroupEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 multicast_group_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multicast_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.Replica replicas = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.MulticastGroupEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.MulticastGroupEntry)
  return false;
#undef DO_
}

void MulticastGroupEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.MulticastGroupEntry)
  // uint32 multicast_group_id = 1;
  if (this->multicast_group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->multicast_group_id(), output);
  }

  // repeated .p4.v1.Replica replicas = 2;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->replicas(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.MulticastGroupEntry)
}

::google::protobuf::uint8* MulticastGroupEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MulticastGroupEntry)
  // uint32 multicast_group_id = 1;
  if (this->multicast_group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->multicast_group_id(), target);
  }

  // repeated .p4.v1.Replica replicas = 2;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->replicas(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MulticastGroupEntry)
  return target;
}

size_t MulticastGroupEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MulticastGroupEntry)
  size_t total_size = 0;

  // repeated .p4.v1.Replica replicas = 2;
  {
    unsigned int count = this->replicas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(i));
    }
  }

  // uint32 multicast_group_id = 1;
  if (this->multicast_group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multicast_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MulticastGroupEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.MulticastGroupEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MulticastGroupEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MulticastGroupEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.MulticastGroupEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.MulticastGroupEntry)
    MergeFrom(*source);
  }
}

void MulticastGroupEntry::MergeFrom(const MulticastGroupEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MulticastGroupEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replicas_.MergeFrom(from.replicas_);
  if (from.multicast_group_id() != 0) {
    set_multicast_group_id(from.multicast_group_id());
  }
}

void MulticastGroupEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.MulticastGroupEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MulticastGroupEntry::CopyFrom(const MulticastGroupEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MulticastGroupEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulticastGroupEntry::IsInitialized() const {
  return true;
}

void MulticastGroupEntry::Swap(MulticastGroupEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MulticastGroupEntry::InternalSwap(MulticastGroupEntry* other) {
  replicas_.UnsafeArenaSwap(&other->replicas_);
  std::swap(multicast_group_id_, other->multicast_group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MulticastGroupEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MulticastGroupEntry

// uint32 multicast_group_id = 1;
void MulticastGroupEntry::clear_multicast_group_id() {
  multicast_group_id_ = 0u;
}
::google::protobuf::uint32 MulticastGroupEntry::multicast_group_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.MulticastGroupEntry.multicast_group_id)
  return multicast_group_id_;
}
void MulticastGroupEntry::set_multicast_group_id(::google::protobuf::uint32 value) {
  
  multicast_group_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.MulticastGroupEntry.multicast_group_id)
}

// repeated .p4.v1.Replica replicas = 2;
int MulticastGroupEntry::replicas_size() const {
  return replicas_.size();
}
void MulticastGroupEntry::clear_replicas() {
  replicas_.Clear();
}
const ::p4::v1::Replica& MulticastGroupEntry::replicas(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.MulticastGroupEntry.replicas)
  return replicas_.Get(index);
}
::p4::v1::Replica* MulticastGroupEntry::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.MulticastGroupEntry.replicas)
  return replicas_.Mutable(index);
}
::p4::v1::Replica* MulticastGroupEntry::add_replicas() {
  // @@protoc_insertion_point(field_add:p4.v1.MulticastGroupEntry.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::Replica >*
MulticastGroupEntry::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.MulticastGroupEntry.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::Replica >&
MulticastGroupEntry::replicas() const {
  // @@protoc_insertion_point(field_list:p4.v1.MulticastGroupEntry.replicas)
  return replicas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloneSessionEntry::kSessionIdFieldNumber;
const int CloneSessionEntry::kReplicasFieldNumber;
const int CloneSessionEntry::kClassOfServiceFieldNumber;
const int CloneSessionEntry::kPacketLengthBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloneSessionEntry::CloneSessionEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.CloneSessionEntry)
}
CloneSessionEntry::CloneSessionEntry(const CloneSessionEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      replicas_(from.replicas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    reinterpret_cast<char*>(&packet_length_bytes_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(packet_length_bytes_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.CloneSessionEntry)
}

void CloneSessionEntry::SharedCtor() {
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&packet_length_bytes_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(packet_length_bytes_));
  _cached_size_ = 0;
}

CloneSessionEntry::~CloneSessionEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.CloneSessionEntry)
  SharedDtor();
}

void CloneSessionEntry::SharedDtor() {
}

void CloneSessionEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloneSessionEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[33].descriptor;
}

const CloneSessionEntry& CloneSessionEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

CloneSessionEntry* CloneSessionEntry::New(::google::protobuf::Arena* arena) const {
  CloneSessionEntry* n = new CloneSessionEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloneSessionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CloneSessionEntry)
  replicas_.Clear();
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&packet_length_bytes_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(packet_length_bytes_));
}

bool CloneSessionEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.CloneSessionEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 session_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.Replica replicas = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 class_of_service = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 packet_length_bytes = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_length_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.CloneSessionEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.CloneSessionEntry)
  return false;
#undef DO_
}

void CloneSessionEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.CloneSessionEntry)
  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // repeated .p4.v1.Replica replicas = 2;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->replicas(i), output);
  }

  // uint32 class_of_service = 3;
  if (this->class_of_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->class_of_service(), output);
  }

  // int32 packet_length_bytes = 4;
  if (this->packet_length_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->packet_length_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.CloneSessionEntry)
}

::google::protobuf::uint8* CloneSessionEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CloneSessionEntry)
  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // repeated .p4.v1.Replica replicas = 2;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->replicas(i), false, target);
  }

  // uint32 class_of_service = 3;
  if (this->class_of_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->class_of_service(), target);
  }

  // int32 packet_length_bytes = 4;
  if (this->packet_length_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->packet_length_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CloneSessionEntry)
  return target;
}

size_t CloneSessionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CloneSessionEntry)
  size_t total_size = 0;

  // repeated .p4.v1.Replica replicas = 2;
  {
    unsigned int count = this->replicas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(i));
    }
  }

  // uint32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  // uint32 class_of_service = 3;
  if (this->class_of_service() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_of_service());
  }

  // int32 packet_length_bytes = 4;
  if (this->packet_length_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packet_length_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloneSessionEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.CloneSessionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CloneSessionEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloneSessionEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.CloneSessionEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.CloneSessionEntry)
    MergeFrom(*source);
  }
}

void CloneSessionEntry::MergeFrom(const CloneSessionEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CloneSessionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replicas_.MergeFrom(from.replicas_);
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.class_of_service() != 0) {
    set_class_of_service(from.class_of_service());
  }
  if (from.packet_length_bytes() != 0) {
    set_packet_length_bytes(from.packet_length_bytes());
  }
}

void CloneSessionEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.CloneSessionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloneSessionEntry::CopyFrom(const CloneSessionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CloneSessionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloneSessionEntry::IsInitialized() const {
  return true;
}

void CloneSessionEntry::Swap(CloneSessionEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloneSessionEntry::InternalSwap(CloneSessionEntry* other) {
  replicas_.UnsafeArenaSwap(&other->replicas_);
  std::swap(session_id_, other->session_id_);
  std::swap(class_of_service_, other->class_of_service_);
  std::swap(packet_length_bytes_, other->packet_length_bytes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloneSessionEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloneSessionEntry

// uint32 session_id = 1;
void CloneSessionEntry::clear_session_id() {
  session_id_ = 0u;
}
::google::protobuf::uint32 CloneSessionEntry::session_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.CloneSessionEntry.session_id)
  return session_id_;
}
void CloneSessionEntry::set_session_id(::google::protobuf::uint32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.CloneSessionEntry.session_id)
}

// repeated .p4.v1.Replica replicas = 2;
int CloneSessionEntry::replicas_size() const {
  return replicas_.size();
}
void CloneSessionEntry::clear_replicas() {
  replicas_.Clear();
}
const ::p4::v1::Replica& CloneSessionEntry::replicas(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.CloneSessionEntry.replicas)
  return replicas_.Get(index);
}
::p4::v1::Replica* CloneSessionEntry::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.CloneSessionEntry.replicas)
  return replicas_.Mutable(index);
}
::p4::v1::Replica* CloneSessionEntry::add_replicas() {
  // @@protoc_insertion_point(field_add:p4.v1.CloneSessionEntry.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::Replica >*
CloneSessionEntry::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.CloneSessionEntry.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::Replica >&
CloneSessionEntry::replicas() const {
  // @@protoc_insertion_point(field_list:p4.v1.CloneSessionEntry.replicas)
  return replicas_;
}

// uint32 class_of_service = 3;
void CloneSessionEntry::clear_class_of_service() {
  class_of_service_ = 0u;
}
::google::protobuf::uint32 CloneSessionEntry::class_of_service() const {
  // @@protoc_insertion_point(field_get:p4.v1.CloneSessionEntry.class_of_service)
  return class_of_service_;
}
void CloneSessionEntry::set_class_of_service(::google::protobuf::uint32 value) {
  
  class_of_service_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.CloneSessionEntry.class_of_service)
}

// int32 packet_length_bytes = 4;
void CloneSessionEntry::clear_packet_length_bytes() {
  packet_length_bytes_ = 0;
}
::google::protobuf::int32 CloneSessionEntry::packet_length_bytes() const {
  // @@protoc_insertion_point(field_get:p4.v1.CloneSessionEntry.packet_length_bytes)
  return packet_length_bytes_;
}
void CloneSessionEntry::set_packet_length_bytes(::google::protobuf::int32 value) {
  
  packet_length_bytes_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.CloneSessionEntry.packet_length_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueSetMember::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueSetMember::ValueSetMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ValueSetMember)
}
ValueSetMember::ValueSetMember(const ValueSetMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      match_(from.match_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.ValueSetMember)
}

void ValueSetMember::SharedCtor() {
  _cached_size_ = 0;
}

ValueSetMember::~ValueSetMember() {
  // @@protoc_insertion_point(destructor:p4.v1.ValueSetMember)
  SharedDtor();
}

void ValueSetMember::SharedDtor() {
}

void ValueSetMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueSetMember::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[34].descriptor;
}

const ValueSetMember& ValueSetMember::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValueSetMember* ValueSetMember::New(::google::protobuf::Arena* arena) const {
  ValueSetMember* n = new ValueSetMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueSetMember::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ValueSetMember)
  match_.Clear();
}

bool ValueSetMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ValueSetMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .p4.v1.FieldMatch match = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_match()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ValueSetMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ValueSetMember)
  return false;
#undef DO_
}

void ValueSetMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ValueSetMember)
  // repeated .p4.v1.FieldMatch match = 1;
  for (unsigned int i = 0, n = this->match_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->match(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ValueSetMember)
}

::google::protobuf::uint8* ValueSetMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ValueSetMember)
  // repeated .p4.v1.FieldMatch match = 1;
  for (unsigned int i = 0, n = this->match_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->match(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ValueSetMember)
  return target;
}

size_t ValueSetMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ValueSetMember)
  size_t total_size = 0;

  // repeated .p4.v1.FieldMatch match = 1;
  {
    unsigned int count = this->match_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueSetMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ValueSetMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueSetMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueSetMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ValueSetMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ValueSetMember)
    MergeFrom(*source);
  }
}

void ValueSetMember::MergeFrom(const ValueSetMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ValueSetMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_.MergeFrom(from.match_);
}

void ValueSetMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ValueSetMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueSetMember::CopyFrom(const ValueSetMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ValueSetMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSetMember::IsInitialized() const {
  return true;
}

void ValueSetMember::Swap(ValueSetMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueSetMember::InternalSwap(ValueSetMember* other) {
  match_.UnsafeArenaSwap(&other->match_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueSetMember::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueSetMember

// repeated .p4.v1.FieldMatch match = 1;
int ValueSetMember::match_size() const {
  return match_.size();
}
void ValueSetMember::clear_match() {
  match_.Clear();
}
const ::p4::v1::FieldMatch& ValueSetMember::match(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.ValueSetMember.match)
  return match_.Get(index);
}
::p4::v1::FieldMatch* ValueSetMember::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.ValueSetMember.match)
  return match_.Mutable(index);
}
::p4::v1::FieldMatch* ValueSetMember::add_match() {
  // @@protoc_insertion_point(field_add:p4.v1.ValueSetMember.match)
  return match_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::FieldMatch >*
ValueSetMember::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.ValueSetMember.match)
  return &match_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::FieldMatch >&
ValueSetMember::match() const {
  // @@protoc_insertion_point(field_list:p4.v1.ValueSetMember.match)
  return match_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueSetEntry::kValueSetIdFieldNumber;
const int ValueSetEntry::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueSetEntry::ValueSetEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ValueSetEntry)
}
ValueSetEntry::ValueSetEntry(const ValueSetEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_set_id_ = from.value_set_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ValueSetEntry)
}

void ValueSetEntry::SharedCtor() {
  value_set_id_ = 0u;
  _cached_size_ = 0;
}

ValueSetEntry::~ValueSetEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.ValueSetEntry)
  SharedDtor();
}

void ValueSetEntry::SharedDtor() {
}

void ValueSetEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValueSetEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[35].descriptor;
}

const ValueSetEntry& ValueSetEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ValueSetEntry* ValueSetEntry::New(::google::protobuf::Arena* arena) const {
  ValueSetEntry* n = new ValueSetEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValueSetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ValueSetEntry)
  members_.Clear();
  value_set_id_ = 0u;
}

bool ValueSetEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ValueSetEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 value_set_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_set_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.ValueSetMember members = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ValueSetEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ValueSetEntry)
  return false;
#undef DO_
}

void ValueSetEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ValueSetEntry)
  // uint32 value_set_id = 1;
  if (this->value_set_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value_set_id(), output);
  }

  // repeated .p4.v1.ValueSetMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ValueSetEntry)
}

::google::protobuf::uint8* ValueSetEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ValueSetEntry)
  // uint32 value_set_id = 1;
  if (this->value_set_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value_set_id(), target);
  }

  // repeated .p4.v1.ValueSetMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ValueSetEntry)
  return target;
}

size_t ValueSetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ValueSetEntry)
  size_t total_size = 0;

  // repeated .p4.v1.ValueSetMember members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // uint32 value_set_id = 1;
  if (this->value_set_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value_set_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValueSetEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ValueSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueSetEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ValueSetEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ValueSetEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ValueSetEntry)
    MergeFrom(*source);
  }
}

void ValueSetEntry::MergeFrom(const ValueSetEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ValueSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
  if (from.value_set_id() != 0) {
    set_value_set_id(from.value_set_id());
  }
}

void ValueSetEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ValueSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueSetEntry::CopyFrom(const ValueSetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ValueSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueSetEntry::IsInitialized() const {
  return true;
}

void ValueSetEntry::Swap(ValueSetEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueSetEntry::InternalSwap(ValueSetEntry* other) {
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(value_set_id_, other->value_set_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValueSetEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValueSetEntry

// uint32 value_set_id = 1;
void ValueSetEntry::clear_value_set_id() {
  value_set_id_ = 0u;
}
::google::protobuf::uint32 ValueSetEntry::value_set_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.ValueSetEntry.value_set_id)
  return value_set_id_;
}
void ValueSetEntry::set_value_set_id(::google::protobuf::uint32 value) {
  
  value_set_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ValueSetEntry.value_set_id)
}

// repeated .p4.v1.ValueSetMember members = 2;
int ValueSetEntry::members_size() const {
  return members_.size();
}
void ValueSetEntry::clear_members() {
  members_.Clear();
}
const ::p4::v1::ValueSetMember& ValueSetEntry::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.ValueSetEntry.members)
  return members_.Get(index);
}
::p4::v1::ValueSetMember* ValueSetEntry::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.ValueSetEntry.members)
  return members_.Mutable(index);
}
::p4::v1::ValueSetMember* ValueSetEntry::add_members() {
  // @@protoc_insertion_point(field_add:p4.v1.ValueSetEntry.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::ValueSetMember >*
ValueSetEntry::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.ValueSetEntry.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::ValueSetMember >&
ValueSetEntry::members() const {
  // @@protoc_insertion_point(field_list:p4.v1.ValueSetEntry.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterEntry::kRegisterIdFieldNumber;
const int RegisterEntry::kIndexFieldNumber;
const int RegisterEntry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterEntry::RegisterEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.RegisterEntry)
}
RegisterEntry::RegisterEntry(const RegisterEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index()) {
    index_ = new ::p4::v1::Index(*from.index_);
  } else {
    index_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::p4::v1::P4Data(*from.data_);
  } else {
    data_ = NULL;
  }
  register_id_ = from.register_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.RegisterEntry)
}

void RegisterEntry::SharedCtor() {
  ::memset(&index_, 0, reinterpret_cast<char*>(&register_id_) -
    reinterpret_cast<char*>(&index_) + sizeof(register_id_));
  _cached_size_ = 0;
}

RegisterEntry::~RegisterEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.RegisterEntry)
  SharedDtor();
}

void RegisterEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete index_;
  }
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void RegisterEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[36].descriptor;
}

const RegisterEntry& RegisterEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegisterEntry* RegisterEntry::New(::google::protobuf::Arena* arena) const {
  RegisterEntry* n = new RegisterEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.RegisterEntry)
  if (GetArenaNoVirtual() == NULL && index_ != NULL) {
    delete index_;
  }
  index_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  register_id_ = 0u;
}

bool RegisterEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.RegisterEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 register_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &register_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Index index = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4Data data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.RegisterEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.RegisterEntry)
  return false;
#undef DO_
}

void RegisterEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.RegisterEntry)
  // uint32 register_id = 1;
  if (this->register_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->register_id(), output);
  }

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->index_, output);
  }

  // .p4.v1.P4Data data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.RegisterEntry)
}

::google::protobuf::uint8* RegisterEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.RegisterEntry)
  // uint32 register_id = 1;
  if (this->register_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->register_id(), target);
  }

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->index_, false, target);
  }

  // .p4.v1.P4Data data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.RegisterEntry)
  return target;
}

size_t RegisterEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.RegisterEntry)
  size_t total_size = 0;

  // .p4.v1.Index index = 2;
  if (this->has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_);
  }

  // .p4.v1.P4Data data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // uint32 register_id = 1;
  if (this->register_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->register_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.RegisterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.RegisterEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.RegisterEntry)
    MergeFrom(*source);
  }
}

void RegisterEntry::MergeFrom(const RegisterEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.RegisterEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index()) {
    mutable_index()->::p4::v1::Index::MergeFrom(from.index());
  }
  if (from.has_data()) {
    mutable_data()->::p4::v1::P4Data::MergeFrom(from.data());
  }
  if (from.register_id() != 0) {
    set_register_id(from.register_id());
  }
}

void RegisterEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.RegisterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterEntry::CopyFrom(const RegisterEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.RegisterEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterEntry::IsInitialized() const {
  return true;
}

void RegisterEntry::Swap(RegisterEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterEntry::InternalSwap(RegisterEntry* other) {
  std::swap(index_, other->index_);
  std::swap(data_, other->data_);
  std::swap(register_id_, other->register_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterEntry

// uint32 register_id = 1;
void RegisterEntry::clear_register_id() {
  register_id_ = 0u;
}
::google::protobuf::uint32 RegisterEntry::register_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.RegisterEntry.register_id)
  return register_id_;
}
void RegisterEntry::set_register_id(::google::protobuf::uint32 value) {
  
  register_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.RegisterEntry.register_id)
}

// .p4.v1.Index index = 2;
bool RegisterEntry::has_index() const {
  return this != internal_default_instance() && index_ != NULL;
}
void RegisterEntry::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
const ::p4::v1::Index& RegisterEntry::index() const {
  // @@protoc_insertion_point(field_get:p4.v1.RegisterEntry.index)
  return index_ != NULL ? *index_
                         : *::p4::v1::Index::internal_default_instance();
}
::p4::v1::Index* RegisterEntry::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::p4::v1::Index;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.RegisterEntry.index)
  return index_;
}
::p4::v1::Index* RegisterEntry::release_index() {
  // @@protoc_insertion_point(field_release:p4.v1.RegisterEntry.index)
  
  ::p4::v1::Index* temp = index_;
  index_ = NULL;
  return temp;
}
void RegisterEntry::set_allocated_index(::p4::v1::Index* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RegisterEntry.index)
}

// .p4.v1.P4Data data = 3;
bool RegisterEntry::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void RegisterEntry::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::p4::v1::P4Data& RegisterEntry::data() const {
  // @@protoc_insertion_point(field_get:p4.v1.RegisterEntry.data)
  return data_ != NULL ? *data_
                         : *::p4::v1::P4Data::internal_default_instance();
}
::p4::v1::P4Data* RegisterEntry::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::p4::v1::P4Data;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.RegisterEntry.data)
  return data_;
}
::p4::v1::P4Data* RegisterEntry::release_data() {
  // @@protoc_insertion_point(field_release:p4.v1.RegisterEntry.data)
  
  ::p4::v1::P4Data* temp = data_;
  data_ = NULL;
  return temp;
}
void RegisterEntry::set_allocated_data(::p4::v1::P4Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.RegisterEntry.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigestEntry_Config::kMaxTimeoutNsFieldNumber;
const int DigestEntry_Config::kMaxListSizeFieldNumber;
const int DigestEntry_Config::kAckTimeoutNsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigestEntry_Config::DigestEntry_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.DigestEntry.Config)
}
DigestEntry_Config::DigestEntry_Config(const DigestEntry_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_timeout_ns_, &from.max_timeout_ns_,
    reinterpret_cast<char*>(&max_list_size_) -
    reinterpret_cast<char*>(&max_timeout_ns_) + sizeof(max_list_size_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestEntry.Config)
}

void DigestEntry_Config::SharedCtor() {
  ::memset(&max_timeout_ns_, 0, reinterpret_cast<char*>(&max_list_size_) -
    reinterpret_cast<char*>(&max_timeout_ns_) + sizeof(max_list_size_));
  _cached_size_ = 0;
}

DigestEntry_Config::~DigestEntry_Config() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestEntry.Config)
  SharedDtor();
}

void DigestEntry_Config::SharedDtor() {
}

void DigestEntry_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigestEntry_Config::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[37].descriptor;
}

const DigestEntry_Config& DigestEntry_Config::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

DigestEntry_Config* DigestEntry_Config::New(::google::protobuf::Arena* arena) const {
  DigestEntry_Config* n = new DigestEntry_Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DigestEntry_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestEntry.Config)
  ::memset(&max_timeout_ns_, 0, reinterpret_cast<char*>(&max_list_size_) -
    reinterpret_cast<char*>(&max_timeout_ns_) + sizeof(max_list_size_));
}

bool DigestEntry_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.DigestEntry.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_timeout_ns = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_timeout_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_list_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_list_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ack_timeout_ns = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ack_timeout_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.DigestEntry.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.DigestEntry.Config)
  return false;
#undef DO_
}

void DigestEntry_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.DigestEntry.Config)
  // int64 max_timeout_ns = 1;
  if (this->max_timeout_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_timeout_ns(), output);
  }

  // int32 max_list_size = 2;
  if (this->max_list_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_list_size(), output);
  }

  // int64 ack_timeout_ns = 3;
  if (this->ack_timeout_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ack_timeout_ns(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.DigestEntry.Config)
}

::google::protobuf::uint8* DigestEntry_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestEntry.Config)
  // int64 max_timeout_ns = 1;
  if (this->max_timeout_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_timeout_ns(), target);
  }

  // int32 max_list_size = 2;
  if (this->max_list_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_list_size(), target);
  }

  // int64 ack_timeout_ns = 3;
  if (this->ack_timeout_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ack_timeout_ns(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestEntry.Config)
  return target;
}

size_t DigestEntry_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestEntry.Config)
  size_t total_size = 0;

  // int64 max_timeout_ns = 1;
  if (this->max_timeout_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_timeout_ns());
  }

  // int64 ack_timeout_ns = 3;
  if (this->ack_timeout_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ack_timeout_ns());
  }

  // int32 max_list_size = 2;
  if (this->max_list_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_list_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigestEntry_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.DigestEntry.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const DigestEntry_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigestEntry_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.DigestEntry.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.DigestEntry.Config)
    MergeFrom(*source);
  }
}

void DigestEntry_Config::MergeFrom(const DigestEntry_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestEntry.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.max_timeout_ns() != 0) {
    set_max_timeout_ns(from.max_timeout_ns());
  }
  if (from.ack_timeout_ns() != 0) {
    set_ack_timeout_ns(from.ack_timeout_ns());
  }
  if (from.max_list_size() != 0) {
    set_max_list_size(from.max_list_size());
  }
}

void DigestEntry_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.DigestEntry.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigestEntry_Config::CopyFrom(const DigestEntry_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestEntry.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestEntry_Config::IsInitialized() const {
  return true;
}

void DigestEntry_Config::Swap(DigestEntry_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigestEntry_Config::InternalSwap(DigestEntry_Config* other) {
  std::swap(max_timeout_ns_, other->max_timeout_ns_);
  std::swap(ack_timeout_ns_, other->ack_timeout_ns_);
  std::swap(max_list_size_, other->max_list_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DigestEntry_Config::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DigestEntry_Config

// int64 max_timeout_ns = 1;
void DigestEntry_Config::clear_max_timeout_ns() {
  max_timeout_ns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DigestEntry_Config::max_timeout_ns() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestEntry.Config.max_timeout_ns)
  return max_timeout_ns_;
}
void DigestEntry_Config::set_max_timeout_ns(::google::protobuf::int64 value) {
  
  max_timeout_ns_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestEntry.Config.max_timeout_ns)
}

// int32 max_list_size = 2;
void DigestEntry_Config::clear_max_list_size() {
  max_list_size_ = 0;
}
::google::protobuf::int32 DigestEntry_Config::max_list_size() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestEntry.Config.max_list_size)
  return max_list_size_;
}
void DigestEntry_Config::set_max_list_size(::google::protobuf::int32 value) {
  
  max_list_size_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestEntry.Config.max_list_size)
}

// int64 ack_timeout_ns = 3;
void DigestEntry_Config::clear_ack_timeout_ns() {
  ack_timeout_ns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DigestEntry_Config::ack_timeout_ns() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestEntry.Config.ack_timeout_ns)
  return ack_timeout_ns_;
}
void DigestEntry_Config::set_ack_timeout_ns(::google::protobuf::int64 value) {
  
  ack_timeout_ns_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestEntry.Config.ack_timeout_ns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigestEntry::kDigestIdFieldNumber;
const int DigestEntry::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigestEntry::DigestEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.DigestEntry)
}
DigestEntry::DigestEntry(const DigestEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::p4::v1::DigestEntry_Config(*from.config_);
  } else {
    config_ = NULL;
  }
  digest_id_ = from.digest_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestEntry)
}

void DigestEntry::SharedCtor() {
  ::memset(&config_, 0, reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&config_) + sizeof(digest_id_));
  _cached_size_ = 0;
}

DigestEntry::~DigestEntry() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestEntry)
  SharedDtor();
}

void DigestEntry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void DigestEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigestEntry::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[38].descriptor;
}

const DigestEntry& DigestEntry::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

DigestEntry* DigestEntry::New(::google::protobuf::Arena* arena) const {
  DigestEntry* n = new DigestEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DigestEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestEntry)
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  digest_id_ = 0u;
}

bool DigestEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.DigestEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 digest_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &digest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.DigestEntry.Config config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.DigestEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.DigestEntry)
  return false;
#undef DO_
}

void DigestEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.DigestEntry)
  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->digest_id(), output);
  }

  // .p4.v1.DigestEntry.Config config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.DigestEntry)
}

::google::protobuf::uint8* DigestEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestEntry)
  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->digest_id(), target);
  }

  // .p4.v1.DigestEntry.Config config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestEntry)
  return target;
}

size_t DigestEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestEntry)
  size_t total_size = 0;

  // .p4.v1.DigestEntry.Config config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->digest_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigestEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.DigestEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const DigestEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigestEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.DigestEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.DigestEntry)
    MergeFrom(*source);
  }
}

void DigestEntry::MergeFrom(const DigestEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    mutable_config()->::p4::v1::DigestEntry_Config::MergeFrom(from.config());
  }
  if (from.digest_id() != 0) {
    set_digest_id(from.digest_id());
  }
}

void DigestEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.DigestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigestEntry::CopyFrom(const DigestEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestEntry::IsInitialized() const {
  return true;
}

void DigestEntry::Swap(DigestEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigestEntry::InternalSwap(DigestEntry* other) {
  std::swap(config_, other->config_);
  std::swap(digest_id_, other->digest_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DigestEntry::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DigestEntry

// uint32 digest_id = 1;
void DigestEntry::clear_digest_id() {
  digest_id_ = 0u;
}
::google::protobuf::uint32 DigestEntry::digest_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestEntry.digest_id)
  return digest_id_;
}
void DigestEntry::set_digest_id(::google::protobuf::uint32 value) {
  
  digest_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestEntry.digest_id)
}

// .p4.v1.DigestEntry.Config config = 2;
bool DigestEntry::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void DigestEntry::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::p4::v1::DigestEntry_Config& DigestEntry::config() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestEntry.config)
  return config_ != NULL ? *config_
                         : *::p4::v1::DigestEntry_Config::internal_default_instance();
}
::p4::v1::DigestEntry_Config* DigestEntry::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::p4::v1::DigestEntry_Config;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.DigestEntry.config)
  return config_;
}
::p4::v1::DigestEntry_Config* DigestEntry::release_config() {
  // @@protoc_insertion_point(field_release:p4.v1.DigestEntry.config)
  
  ::p4::v1::DigestEntry_Config* temp = config_;
  config_ = NULL;
  return temp;
}
void DigestEntry::set_allocated_config(::p4::v1::DigestEntry_Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.DigestEntry.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamMessageRequest::kArbitrationFieldNumber;
const int StreamMessageRequest::kPacketFieldNumber;
const int StreamMessageRequest::kDigestAckFieldNumber;
const int StreamMessageRequest::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamMessageRequest::StreamMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.StreamMessageRequest)
}
StreamMessageRequest::StreamMessageRequest(const StreamMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kArbitration: {
      mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from.arbitration());
      break;
    }
    case kPacket: {
      mutable_packet()->::p4::v1::PacketOut::MergeFrom(from.packet());
      break;
    }
    case kDigestAck: {
      mutable_digest_ack()->::p4::v1::DigestListAck::MergeFrom(from.digest_ack());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamMessageRequest)
}

void StreamMessageRequest::SharedCtor() {
  clear_has_update();
  _cached_size_ = 0;
}

StreamMessageRequest::~StreamMessageRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamMessageRequest)
  SharedDtor();
}

void StreamMessageRequest::SharedDtor() {
  if (has_update()) {
    clear_update();
  }
}

void StreamMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMessageRequest::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[39].descriptor;
}

const StreamMessageRequest& StreamMessageRequest::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamMessageRequest* StreamMessageRequest::New(::google::protobuf::Arena* arena) const {
  StreamMessageRequest* n = new StreamMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamMessageRequest::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.StreamMessageRequest)
  switch (update_case()) {
    case kArbitration: {
      delete update_.arbitration_;
      break;
    }
    case kPacket: {
      delete update_.packet_;
      break;
    }
    case kDigestAck: {
      delete update_.digest_ack_;
      break;
    }
    case kOther: {
      delete update_.other_;
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void StreamMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamMessageRequest)
  clear_update();
}

bool StreamMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.StreamMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.MasterArbitrationUpdate arbitration = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arbitration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.PacketOut packet = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.DigestListAck digest_ack = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digest_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any other = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.StreamMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.StreamMessageRequest)
  return false;
#undef DO_
}

void StreamMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.StreamMessageRequest)
  // .p4.v1.MasterArbitrationUpdate arbitration = 1;
  if (has_arbitration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *update_.arbitration_, output);
  }

  // .p4.v1.PacketOut packet = 2;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *update_.packet_, output);
  }

  // .p4.v1.DigestListAck digest_ack = 3;
  if (has_digest_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *update_.digest_ack_, output);
  }

  // .google.protobuf.Any other = 4;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *update_.other_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.StreamMessageRequest)
}

::google::protobuf::uint8* StreamMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamMessageRequest)
  // .p4.v1.MasterArbitrationUpdate arbitration = 1;
  if (has_arbitration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *update_.arbitration_, false, target);
  }

  // .p4.v1.PacketOut packet = 2;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *update_.packet_, false, target);
  }

  // .p4.v1.DigestListAck digest_ack = 3;
  if (has_digest_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *update_.digest_ack_, false, target);
  }

  // .google.protobuf.Any other = 4;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *update_.other_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamMessageRequest)
  return target;
}

size_t StreamMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamMessageRequest)
  size_t total_size = 0;

  switch (update_case()) {
    // .p4.v1.MasterArbitrationUpdate arbitration = 1;
    case kArbitration: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.arbitration_);
      break;
    }
    // .p4.v1.PacketOut packet = 2;
    case kPacket: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.packet_);
      break;
    }
    // .p4.v1.DigestListAck digest_ack = 3;
    case kDigestAck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.digest_ack_);
      break;
    }
    // .google.protobuf.Any other = 4;
    case kOther: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.other_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.StreamMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.StreamMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.StreamMessageRequest)
    MergeFrom(*source);
  }
}

void StreamMessageRequest::MergeFrom(const StreamMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.update_case()) {
    case kArbitration: {
      mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from.arbitration());
      break;
    }
    case kPacket: {
      mutable_packet()->::p4::v1::PacketOut::MergeFrom(from.packet());
      break;
    }
    case kDigestAck: {
      mutable_digest_ack()->::p4::v1::DigestListAck::MergeFrom(from.digest_ack());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void StreamMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.StreamMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessageRequest::CopyFrom(const StreamMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessageRequest::IsInitialized() const {
  return true;
}

void StreamMessageRequest::Swap(StreamMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamMessageRequest::InternalSwap(StreamMessageRequest* other) {
  std::swap(update_, other->update_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamMessageRequest::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamMessageRequest

// .p4.v1.MasterArbitrationUpdate arbitration = 1;
bool StreamMessageRequest::has_arbitration() const {
  return update_case() == kArbitration;
}
void StreamMessageRequest::set_has_arbitration() {
  _oneof_case_[0] = kArbitration;
}
void StreamMessageRequest::clear_arbitration() {
  if (has_arbitration()) {
    delete update_.arbitration_;
    clear_has_update();
  }
}
 const ::p4::v1::MasterArbitrationUpdate& StreamMessageRequest::arbitration() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageRequest.arbitration)
  return has_arbitration()
      ? *update_.arbitration_
      : ::p4::v1::MasterArbitrationUpdate::default_instance();
}
::p4::v1::MasterArbitrationUpdate* StreamMessageRequest::mutable_arbitration() {
  if (!has_arbitration()) {
    clear_update();
    set_has_arbitration();
    update_.arbitration_ = new ::p4::v1::MasterArbitrationUpdate;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageRequest.arbitration)
  return update_.arbitration_;
}
::p4::v1::MasterArbitrationUpdate* StreamMessageRequest::release_arbitration() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageRequest.arbitration)
  if (has_arbitration()) {
    clear_has_update();
    ::p4::v1::MasterArbitrationUpdate* temp = update_.arbitration_;
    update_.arbitration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageRequest::set_allocated_arbitration(::p4::v1::MasterArbitrationUpdate* arbitration) {
  clear_update();
  if (arbitration) {
    set_has_arbitration();
    update_.arbitration_ = arbitration;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.arbitration)
}

// .p4.v1.PacketOut packet = 2;
bool StreamMessageRequest::has_packet() const {
  return update_case() == kPacket;
}
void StreamMessageRequest::set_has_packet() {
  _oneof_case_[0] = kPacket;
}
void StreamMessageRequest::clear_packet() {
  if (has_packet()) {
    delete update_.packet_;
    clear_has_update();
  }
}
 const ::p4::v1::PacketOut& StreamMessageRequest::packet() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageRequest.packet)
  return has_packet()
      ? *update_.packet_
      : ::p4::v1::PacketOut::default_instance();
}
::p4::v1::PacketOut* StreamMessageRequest::mutable_packet() {
  if (!has_packet()) {
    clear_update();
    set_has_packet();
    update_.packet_ = new ::p4::v1::PacketOut;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageRequest.packet)
  return update_.packet_;
}
::p4::v1::PacketOut* StreamMessageRequest::release_packet() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageRequest.packet)
  if (has_packet()) {
    clear_has_update();
    ::p4::v1::PacketOut* temp = update_.packet_;
    update_.packet_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageRequest::set_allocated_packet(::p4::v1::PacketOut* packet) {
  clear_update();
  if (packet) {
    set_has_packet();
    update_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.packet)
}

// .p4.v1.DigestListAck digest_ack = 3;
bool StreamMessageRequest::has_digest_ack() const {
  return update_case() == kDigestAck;
}
void StreamMessageRequest::set_has_digest_ack() {
  _oneof_case_[0] = kDigestAck;
}
void StreamMessageRequest::clear_digest_ack() {
  if (has_digest_ack()) {
    delete update_.digest_ack_;
    clear_has_update();
  }
}
 const ::p4::v1::DigestListAck& StreamMessageRequest::digest_ack() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageRequest.digest_ack)
  return has_digest_ack()
      ? *update_.digest_ack_
      : ::p4::v1::DigestListAck::default_instance();
}
::p4::v1::DigestListAck* StreamMessageRequest::mutable_digest_ack() {
  if (!has_digest_ack()) {
    clear_update();
    set_has_digest_ack();
    update_.digest_ack_ = new ::p4::v1::DigestListAck;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageRequest.digest_ack)
  return update_.digest_ack_;
}
::p4::v1::DigestListAck* StreamMessageRequest::release_digest_ack() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageRequest.digest_ack)
  if (has_digest_ack()) {
    clear_has_update();
    ::p4::v1::DigestListAck* temp = update_.digest_ack_;
    update_.digest_ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageRequest::set_allocated_digest_ack(::p4::v1::DigestListAck* digest_ack) {
  clear_update();
  if (digest_ack) {
    set_has_digest_ack();
    update_.digest_ack_ = digest_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.digest_ack)
}

// .google.protobuf.Any other = 4;
bool StreamMessageRequest::has_other() const {
  return update_case() == kOther;
}
void StreamMessageRequest::set_has_other() {
  _oneof_case_[0] = kOther;
}
void StreamMessageRequest::clear_other() {
  if (has_other()) {
    delete update_.other_;
    clear_has_update();
  }
}
 const ::google::protobuf::Any& StreamMessageRequest::other() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageRequest.other)
  return has_other()
      ? *update_.other_
      : ::google::protobuf::Any::default_instance();
}
::google::protobuf::Any* StreamMessageRequest::mutable_other() {
  if (!has_other()) {
    clear_update();
    set_has_other();
    update_.other_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageRequest.other)
  return update_.other_;
}
::google::protobuf::Any* StreamMessageRequest::release_other() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageRequest.other)
  if (has_other()) {
    clear_has_update();
    ::google::protobuf::Any* temp = update_.other_;
    update_.other_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageRequest::set_allocated_other(::google::protobuf::Any* other) {
  clear_update();
  if (other) {
    set_has_other();
    update_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageRequest.other)
}

bool StreamMessageRequest::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
void StreamMessageRequest::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
StreamMessageRequest::UpdateCase StreamMessageRequest::update_case() const {
  return StreamMessageRequest::UpdateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketOut::kPayloadFieldNumber;
const int PacketOut::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketOut::PacketOut()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.PacketOut)
}
PacketOut::PacketOut(const PacketOut& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metadata_(from.metadata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketOut)
}

void PacketOut::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PacketOut::~PacketOut() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketOut)
  SharedDtor();
}

void PacketOut::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketOut::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[40].descriptor;
}

const PacketOut& PacketOut::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketOut* PacketOut::New(::google::protobuf::Arena* arena) const {
  PacketOut* n = new PacketOut;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketOut::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketOut)
  metadata_.Clear();
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PacketOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.PacketOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes payload = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.PacketMetadata metadata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.PacketOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.PacketOut)
  return false;
#undef DO_
}

void PacketOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.PacketOut)
  // bytes payload = 1;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  // repeated .p4.v1.PacketMetadata metadata = 2;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metadata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.PacketOut)
}

::google::protobuf::uint8* PacketOut::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketOut)
  // bytes payload = 1;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  // repeated .p4.v1.PacketMetadata metadata = 2;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->metadata(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketOut)
  return target;
}

size_t PacketOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketOut)
  size_t total_size = 0;

  // repeated .p4.v1.PacketMetadata metadata = 2;
  {
    unsigned int count = this->metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(i));
    }
  }

  // bytes payload = 1;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketOut::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.PacketOut)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketOut* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketOut>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.PacketOut)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.PacketOut)
    MergeFrom(*source);
  }
}

void PacketOut::MergeFrom(const PacketOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void PacketOut::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.PacketOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketOut::CopyFrom(const PacketOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketOut::IsInitialized() const {
  return true;
}

void PacketOut::Swap(PacketOut* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketOut::InternalSwap(PacketOut* other) {
  metadata_.UnsafeArenaSwap(&other->metadata_);
  payload_.Swap(&other->payload_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketOut::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketOut

// bytes payload = 1;
void PacketOut::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PacketOut::payload() const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketOut.payload)
  return payload_.GetNoArena();
}
void PacketOut::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.PacketOut.payload)
}
#if LANG_CXX11
void PacketOut::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.PacketOut.payload)
}
#endif
void PacketOut::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.PacketOut.payload)
}
void PacketOut::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.PacketOut.payload)
}
::std::string* PacketOut::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketOut.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketOut::release_payload() {
  // @@protoc_insertion_point(field_release:p4.v1.PacketOut.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketOut::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketOut.payload)
}

// repeated .p4.v1.PacketMetadata metadata = 2;
int PacketOut::metadata_size() const {
  return metadata_.size();
}
void PacketOut::clear_metadata() {
  metadata_.Clear();
}
const ::p4::v1::PacketMetadata& PacketOut::metadata(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketOut.metadata)
  return metadata_.Get(index);
}
::p4::v1::PacketMetadata* PacketOut::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketOut.metadata)
  return metadata_.Mutable(index);
}
::p4::v1::PacketMetadata* PacketOut::add_metadata() {
  // @@protoc_insertion_point(field_add:p4.v1.PacketOut.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::PacketMetadata >*
PacketOut::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.PacketOut.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::PacketMetadata >&
PacketOut::metadata() const {
  // @@protoc_insertion_point(field_list:p4.v1.PacketOut.metadata)
  return metadata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigestListAck::kDigestIdFieldNumber;
const int DigestListAck::kListIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigestListAck::DigestListAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.DigestListAck)
}
DigestListAck::DigestListAck(const DigestListAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&list_id_, &from.list_id_,
    reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_) + sizeof(digest_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestListAck)
}

void DigestListAck::SharedCtor() {
  ::memset(&list_id_, 0, reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_) + sizeof(digest_id_));
  _cached_size_ = 0;
}

DigestListAck::~DigestListAck() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestListAck)
  SharedDtor();
}

void DigestListAck::SharedDtor() {
}

void DigestListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigestListAck::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[41].descriptor;
}

const DigestListAck& DigestListAck::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

DigestListAck* DigestListAck::New(::google::protobuf::Arena* arena) const {
  DigestListAck* n = new DigestListAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DigestListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestListAck)
  ::memset(&list_id_, 0, reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_) + sizeof(digest_id_));
}

bool DigestListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.DigestListAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 digest_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &digest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 list_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &list_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.DigestListAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.DigestListAck)
  return false;
#undef DO_
}

void DigestListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.DigestListAck)
  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->digest_id(), output);
  }

  // uint64 list_id = 2;
  if (this->list_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->list_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.DigestListAck)
}

::google::protobuf::uint8* DigestListAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestListAck)
  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->digest_id(), target);
  }

  // uint64 list_id = 2;
  if (this->list_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->list_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestListAck)
  return target;
}

size_t DigestListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestListAck)
  size_t total_size = 0;

  // uint64 list_id = 2;
  if (this->list_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->list_id());
  }

  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->digest_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigestListAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.DigestListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const DigestListAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigestListAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.DigestListAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.DigestListAck)
    MergeFrom(*source);
  }
}

void DigestListAck::MergeFrom(const DigestListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.list_id() != 0) {
    set_list_id(from.list_id());
  }
  if (from.digest_id() != 0) {
    set_digest_id(from.digest_id());
  }
}

void DigestListAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.DigestListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigestListAck::CopyFrom(const DigestListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestListAck::IsInitialized() const {
  return true;
}

void DigestListAck::Swap(DigestListAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigestListAck::InternalSwap(DigestListAck* other) {
  std::swap(list_id_, other->list_id_);
  std::swap(digest_id_, other->digest_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DigestListAck::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DigestListAck

// uint32 digest_id = 1;
void DigestListAck::clear_digest_id() {
  digest_id_ = 0u;
}
::google::protobuf::uint32 DigestListAck::digest_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestListAck.digest_id)
  return digest_id_;
}
void DigestListAck::set_digest_id(::google::protobuf::uint32 value) {
  
  digest_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestListAck.digest_id)
}

// uint64 list_id = 2;
void DigestListAck::clear_list_id() {
  list_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DigestListAck::list_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestListAck.list_id)
  return list_id_;
}
void DigestListAck::set_list_id(::google::protobuf::uint64 value) {
  
  list_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestListAck.list_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamMessageResponse::kArbitrationFieldNumber;
const int StreamMessageResponse::kPacketFieldNumber;
const int StreamMessageResponse::kDigestFieldNumber;
const int StreamMessageResponse::kIdleTimeoutNotificationFieldNumber;
const int StreamMessageResponse::kOtherFieldNumber;
const int StreamMessageResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamMessageResponse::StreamMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.StreamMessageResponse)
}
StreamMessageResponse::StreamMessageResponse(const StreamMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kArbitration: {
      mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from.arbitration());
      break;
    }
    case kPacket: {
      mutable_packet()->::p4::v1::PacketIn::MergeFrom(from.packet());
      break;
    }
    case kDigest: {
      mutable_digest()->::p4::v1::DigestList::MergeFrom(from.digest());
      break;
    }
    case kIdleTimeoutNotification: {
      mutable_idle_timeout_notification()->::p4::v1::IdleTimeoutNotification::MergeFrom(from.idle_timeout_notification());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case kError: {
      mutable_error()->::p4::v1::StreamError::MergeFrom(from.error());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamMessageResponse)
}

void StreamMessageResponse::SharedCtor() {
  clear_has_update();
  _cached_size_ = 0;
}

StreamMessageResponse::~StreamMessageResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamMessageResponse)
  SharedDtor();
}

void StreamMessageResponse::SharedDtor() {
  if (has_update()) {
    clear_update();
  }
}

void StreamMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMessageResponse::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[42].descriptor;
}

const StreamMessageResponse& StreamMessageResponse::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamMessageResponse* StreamMessageResponse::New(::google::protobuf::Arena* arena) const {
  StreamMessageResponse* n = new StreamMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamMessageResponse::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.StreamMessageResponse)
  switch (update_case()) {
    case kArbitration: {
      delete update_.arbitration_;
      break;
    }
    case kPacket: {
      delete update_.packet_;
      break;
    }
    case kDigest: {
      delete update_.digest_;
      break;
    }
    case kIdleTimeoutNotification: {
      delete update_.idle_timeout_notification_;
      break;
    }
    case kOther: {
      delete update_.other_;
      break;
    }
    case kError: {
      delete update_.error_;
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void StreamMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamMessageResponse)
  clear_update();
}

bool StreamMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.StreamMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.MasterArbitrationUpdate arbitration = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arbitration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.PacketIn packet = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.DigestList digest = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idle_timeout_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any other = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.StreamError error = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.StreamMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.StreamMessageResponse)
  return false;
#undef DO_
}

void StreamMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.StreamMessageResponse)
  // .p4.v1.MasterArbitrationUpdate arbitration = 1;
  if (has_arbitration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *update_.arbitration_, output);
  }

  // .p4.v1.PacketIn packet = 2;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *update_.packet_, output);
  }

  // .p4.v1.DigestList digest = 3;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *update_.digest_, output);
  }

  // .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
  if (has_idle_timeout_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *update_.idle_timeout_notification_, output);
  }

  // .google.protobuf.Any other = 5;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *update_.other_, output);
  }

  // .p4.v1.StreamError error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *update_.error_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.StreamMessageResponse)
}

::google::protobuf::uint8* StreamMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamMessageResponse)
  // .p4.v1.MasterArbitrationUpdate arbitration = 1;
  if (has_arbitration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *update_.arbitration_, false, target);
  }

  // .p4.v1.PacketIn packet = 2;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *update_.packet_, false, target);
  }

  // .p4.v1.DigestList digest = 3;
  if (has_digest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *update_.digest_, false, target);
  }

  // .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
  if (has_idle_timeout_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *update_.idle_timeout_notification_, false, target);
  }

  // .google.protobuf.Any other = 5;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *update_.other_, false, target);
  }

  // .p4.v1.StreamError error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *update_.error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamMessageResponse)
  return target;
}

size_t StreamMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamMessageResponse)
  size_t total_size = 0;

  switch (update_case()) {
    // .p4.v1.MasterArbitrationUpdate arbitration = 1;
    case kArbitration: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.arbitration_);
      break;
    }
    // .p4.v1.PacketIn packet = 2;
    case kPacket: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.packet_);
      break;
    }
    // .p4.v1.DigestList digest = 3;
    case kDigest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.digest_);
      break;
    }
    // .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
    case kIdleTimeoutNotification: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.idle_timeout_notification_);
      break;
    }
    // .google.protobuf.Any other = 5;
    case kOther: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.other_);
      break;
    }
    // .p4.v1.StreamError error = 6;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *update_.error_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.StreamMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.StreamMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.StreamMessageResponse)
    MergeFrom(*source);
  }
}

void StreamMessageResponse::MergeFrom(const StreamMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.update_case()) {
    case kArbitration: {
      mutable_arbitration()->::p4::v1::MasterArbitrationUpdate::MergeFrom(from.arbitration());
      break;
    }
    case kPacket: {
      mutable_packet()->::p4::v1::PacketIn::MergeFrom(from.packet());
      break;
    }
    case kDigest: {
      mutable_digest()->::p4::v1::DigestList::MergeFrom(from.digest());
      break;
    }
    case kIdleTimeoutNotification: {
      mutable_idle_timeout_notification()->::p4::v1::IdleTimeoutNotification::MergeFrom(from.idle_timeout_notification());
      break;
    }
    case kOther: {
      mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
      break;
    }
    case kError: {
      mutable_error()->::p4::v1::StreamError::MergeFrom(from.error());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void StreamMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.StreamMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessageResponse::CopyFrom(const StreamMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessageResponse::IsInitialized() const {
  return true;
}

void StreamMessageResponse::Swap(StreamMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamMessageResponse::InternalSwap(StreamMessageResponse* other) {
  std::swap(update_, other->update_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamMessageResponse::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamMessageResponse

// .p4.v1.MasterArbitrationUpdate arbitration = 1;
bool StreamMessageResponse::has_arbitration() const {
  return update_case() == kArbitration;
}
void StreamMessageResponse::set_has_arbitration() {
  _oneof_case_[0] = kArbitration;
}
void StreamMessageResponse::clear_arbitration() {
  if (has_arbitration()) {
    delete update_.arbitration_;
    clear_has_update();
  }
}
 const ::p4::v1::MasterArbitrationUpdate& StreamMessageResponse::arbitration() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageResponse.arbitration)
  return has_arbitration()
      ? *update_.arbitration_
      : ::p4::v1::MasterArbitrationUpdate::default_instance();
}
::p4::v1::MasterArbitrationUpdate* StreamMessageResponse::mutable_arbitration() {
  if (!has_arbitration()) {
    clear_update();
    set_has_arbitration();
    update_.arbitration_ = new ::p4::v1::MasterArbitrationUpdate;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageResponse.arbitration)
  return update_.arbitration_;
}
::p4::v1::MasterArbitrationUpdate* StreamMessageResponse::release_arbitration() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageResponse.arbitration)
  if (has_arbitration()) {
    clear_has_update();
    ::p4::v1::MasterArbitrationUpdate* temp = update_.arbitration_;
    update_.arbitration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageResponse::set_allocated_arbitration(::p4::v1::MasterArbitrationUpdate* arbitration) {
  clear_update();
  if (arbitration) {
    set_has_arbitration();
    update_.arbitration_ = arbitration;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.arbitration)
}

// .p4.v1.PacketIn packet = 2;
bool StreamMessageResponse::has_packet() const {
  return update_case() == kPacket;
}
void StreamMessageResponse::set_has_packet() {
  _oneof_case_[0] = kPacket;
}
void StreamMessageResponse::clear_packet() {
  if (has_packet()) {
    delete update_.packet_;
    clear_has_update();
  }
}
 const ::p4::v1::PacketIn& StreamMessageResponse::packet() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageResponse.packet)
  return has_packet()
      ? *update_.packet_
      : ::p4::v1::PacketIn::default_instance();
}
::p4::v1::PacketIn* StreamMessageResponse::mutable_packet() {
  if (!has_packet()) {
    clear_update();
    set_has_packet();
    update_.packet_ = new ::p4::v1::PacketIn;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageResponse.packet)
  return update_.packet_;
}
::p4::v1::PacketIn* StreamMessageResponse::release_packet() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageResponse.packet)
  if (has_packet()) {
    clear_has_update();
    ::p4::v1::PacketIn* temp = update_.packet_;
    update_.packet_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageResponse::set_allocated_packet(::p4::v1::PacketIn* packet) {
  clear_update();
  if (packet) {
    set_has_packet();
    update_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.packet)
}

// .p4.v1.DigestList digest = 3;
bool StreamMessageResponse::has_digest() const {
  return update_case() == kDigest;
}
void StreamMessageResponse::set_has_digest() {
  _oneof_case_[0] = kDigest;
}
void StreamMessageResponse::clear_digest() {
  if (has_digest()) {
    delete update_.digest_;
    clear_has_update();
  }
}
 const ::p4::v1::DigestList& StreamMessageResponse::digest() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageResponse.digest)
  return has_digest()
      ? *update_.digest_
      : ::p4::v1::DigestList::default_instance();
}
::p4::v1::DigestList* StreamMessageResponse::mutable_digest() {
  if (!has_digest()) {
    clear_update();
    set_has_digest();
    update_.digest_ = new ::p4::v1::DigestList;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageResponse.digest)
  return update_.digest_;
}
::p4::v1::DigestList* StreamMessageResponse::release_digest() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageResponse.digest)
  if (has_digest()) {
    clear_has_update();
    ::p4::v1::DigestList* temp = update_.digest_;
    update_.digest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageResponse::set_allocated_digest(::p4::v1::DigestList* digest) {
  clear_update();
  if (digest) {
    set_has_digest();
    update_.digest_ = digest;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.digest)
}

// .p4.v1.IdleTimeoutNotification idle_timeout_notification = 4;
bool StreamMessageResponse::has_idle_timeout_notification() const {
  return update_case() == kIdleTimeoutNotification;
}
void StreamMessageResponse::set_has_idle_timeout_notification() {
  _oneof_case_[0] = kIdleTimeoutNotification;
}
void StreamMessageResponse::clear_idle_timeout_notification() {
  if (has_idle_timeout_notification()) {
    delete update_.idle_timeout_notification_;
    clear_has_update();
  }
}
 const ::p4::v1::IdleTimeoutNotification& StreamMessageResponse::idle_timeout_notification() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageResponse.idle_timeout_notification)
  return has_idle_timeout_notification()
      ? *update_.idle_timeout_notification_
      : ::p4::v1::IdleTimeoutNotification::default_instance();
}
::p4::v1::IdleTimeoutNotification* StreamMessageResponse::mutable_idle_timeout_notification() {
  if (!has_idle_timeout_notification()) {
    clear_update();
    set_has_idle_timeout_notification();
    update_.idle_timeout_notification_ = new ::p4::v1::IdleTimeoutNotification;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageResponse.idle_timeout_notification)
  return update_.idle_timeout_notification_;
}
::p4::v1::IdleTimeoutNotification* StreamMessageResponse::release_idle_timeout_notification() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageResponse.idle_timeout_notification)
  if (has_idle_timeout_notification()) {
    clear_has_update();
    ::p4::v1::IdleTimeoutNotification* temp = update_.idle_timeout_notification_;
    update_.idle_timeout_notification_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageResponse::set_allocated_idle_timeout_notification(::p4::v1::IdleTimeoutNotification* idle_timeout_notification) {
  clear_update();
  if (idle_timeout_notification) {
    set_has_idle_timeout_notification();
    update_.idle_timeout_notification_ = idle_timeout_notification;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.idle_timeout_notification)
}

// .google.protobuf.Any other = 5;
bool StreamMessageResponse::has_other() const {
  return update_case() == kOther;
}
void StreamMessageResponse::set_has_other() {
  _oneof_case_[0] = kOther;
}
void StreamMessageResponse::clear_other() {
  if (has_other()) {
    delete update_.other_;
    clear_has_update();
  }
}
 const ::google::protobuf::Any& StreamMessageResponse::other() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageResponse.other)
  return has_other()
      ? *update_.other_
      : ::google::protobuf::Any::default_instance();
}
::google::protobuf::Any* StreamMessageResponse::mutable_other() {
  if (!has_other()) {
    clear_update();
    set_has_other();
    update_.other_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageResponse.other)
  return update_.other_;
}
::google::protobuf::Any* StreamMessageResponse::release_other() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageResponse.other)
  if (has_other()) {
    clear_has_update();
    ::google::protobuf::Any* temp = update_.other_;
    update_.other_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageResponse::set_allocated_other(::google::protobuf::Any* other) {
  clear_update();
  if (other) {
    set_has_other();
    update_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.other)
}

// .p4.v1.StreamError error = 6;
bool StreamMessageResponse::has_error() const {
  return update_case() == kError;
}
void StreamMessageResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
void StreamMessageResponse::clear_error() {
  if (has_error()) {
    delete update_.error_;
    clear_has_update();
  }
}
 const ::p4::v1::StreamError& StreamMessageResponse::error() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamMessageResponse.error)
  return has_error()
      ? *update_.error_
      : ::p4::v1::StreamError::default_instance();
}
::p4::v1::StreamError* StreamMessageResponse::mutable_error() {
  if (!has_error()) {
    clear_update();
    set_has_error();
    update_.error_ = new ::p4::v1::StreamError;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamMessageResponse.error)
  return update_.error_;
}
::p4::v1::StreamError* StreamMessageResponse::release_error() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamMessageResponse.error)
  if (has_error()) {
    clear_has_update();
    ::p4::v1::StreamError* temp = update_.error_;
    update_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamMessageResponse::set_allocated_error(::p4::v1::StreamError* error) {
  clear_update();
  if (error) {
    set_has_error();
    update_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamMessageResponse.error)
}

bool StreamMessageResponse::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
void StreamMessageResponse::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
StreamMessageResponse::UpdateCase StreamMessageResponse::update_case() const {
  return StreamMessageResponse::UpdateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketIn::kPayloadFieldNumber;
const int PacketIn::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketIn::PacketIn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.PacketIn)
}
PacketIn::PacketIn(const PacketIn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metadata_(from.metadata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketIn)
}

void PacketIn::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PacketIn::~PacketIn() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketIn)
  SharedDtor();
}

void PacketIn::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketIn::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[43].descriptor;
}

const PacketIn& PacketIn::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketIn* PacketIn::New(::google::protobuf::Arena* arena) const {
  PacketIn* n = new PacketIn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketIn::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketIn)
  metadata_.Clear();
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PacketIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.PacketIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes payload = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.PacketMetadata metadata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.PacketIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.PacketIn)
  return false;
#undef DO_
}

void PacketIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.PacketIn)
  // bytes payload = 1;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  // repeated .p4.v1.PacketMetadata metadata = 2;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metadata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.PacketIn)
}

::google::protobuf::uint8* PacketIn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketIn)
  // bytes payload = 1;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  // repeated .p4.v1.PacketMetadata metadata = 2;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->metadata(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketIn)
  return target;
}

size_t PacketIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketIn)
  size_t total_size = 0;

  // repeated .p4.v1.PacketMetadata metadata = 2;
  {
    unsigned int count = this->metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(i));
    }
  }

  // bytes payload = 1;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketIn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.PacketIn)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketIn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketIn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.PacketIn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.PacketIn)
    MergeFrom(*source);
  }
}

void PacketIn::MergeFrom(const PacketIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void PacketIn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.PacketIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketIn::CopyFrom(const PacketIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketIn::IsInitialized() const {
  return true;
}

void PacketIn::Swap(PacketIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketIn::InternalSwap(PacketIn* other) {
  metadata_.UnsafeArenaSwap(&other->metadata_);
  payload_.Swap(&other->payload_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketIn::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketIn

// bytes payload = 1;
void PacketIn::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PacketIn::payload() const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketIn.payload)
  return payload_.GetNoArena();
}
void PacketIn::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.PacketIn.payload)
}
#if LANG_CXX11
void PacketIn::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.PacketIn.payload)
}
#endif
void PacketIn::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.PacketIn.payload)
}
void PacketIn::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.PacketIn.payload)
}
::std::string* PacketIn::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketIn.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketIn::release_payload() {
  // @@protoc_insertion_point(field_release:p4.v1.PacketIn.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketIn::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketIn.payload)
}

// repeated .p4.v1.PacketMetadata metadata = 2;
int PacketIn::metadata_size() const {
  return metadata_.size();
}
void PacketIn::clear_metadata() {
  metadata_.Clear();
}
const ::p4::v1::PacketMetadata& PacketIn::metadata(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketIn.metadata)
  return metadata_.Get(index);
}
::p4::v1::PacketMetadata* PacketIn::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketIn.metadata)
  return metadata_.Mutable(index);
}
::p4::v1::PacketMetadata* PacketIn::add_metadata() {
  // @@protoc_insertion_point(field_add:p4.v1.PacketIn.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::PacketMetadata >*
PacketIn::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.PacketIn.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::PacketMetadata >&
PacketIn::metadata() const {
  // @@protoc_insertion_point(field_list:p4.v1.PacketIn.metadata)
  return metadata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigestList::kDigestIdFieldNumber;
const int DigestList::kListIdFieldNumber;
const int DigestList::kDataFieldNumber;
const int DigestList::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigestList::DigestList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.DigestList)
}
DigestList::DigestList(const DigestList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&list_id_, &from.list_id_,
    reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_) + sizeof(digest_id_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestList)
}

void DigestList::SharedCtor() {
  ::memset(&list_id_, 0, reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_) + sizeof(digest_id_));
  _cached_size_ = 0;
}

DigestList::~DigestList() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestList)
  SharedDtor();
}

void DigestList::SharedDtor() {
}

void DigestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigestList::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[44].descriptor;
}

const DigestList& DigestList::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

DigestList* DigestList::New(::google::protobuf::Arena* arena) const {
  DigestList* n = new DigestList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DigestList::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestList)
  data_.Clear();
  ::memset(&list_id_, 0, reinterpret_cast<char*>(&digest_id_) -
    reinterpret_cast<char*>(&list_id_) + sizeof(digest_id_));
}

bool DigestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.DigestList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 digest_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &digest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 list_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &list_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .p4.v1.P4Data data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.DigestList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.DigestList)
  return false;
#undef DO_
}

void DigestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.DigestList)
  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->digest_id(), output);
  }

  // uint64 list_id = 2;
  if (this->list_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->list_id(), output);
  }

  // repeated .p4.v1.P4Data data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.DigestList)
}

::google::protobuf::uint8* DigestList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestList)
  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->digest_id(), target);
  }

  // uint64 list_id = 2;
  if (this->list_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->list_id(), target);
  }

  // repeated .p4.v1.P4Data data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->data(i), false, target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestList)
  return target;
}

size_t DigestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestList)
  size_t total_size = 0;

  // repeated .p4.v1.P4Data data = 3;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  // uint64 list_id = 2;
  if (this->list_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->list_id());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint32 digest_id = 1;
  if (this->digest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->digest_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigestList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.DigestList)
  GOOGLE_DCHECK_NE(&from, this);
  const DigestList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigestList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.DigestList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.DigestList)
    MergeFrom(*source);
  }
}

void DigestList::MergeFrom(const DigestList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  if (from.list_id() != 0) {
    set_list_id(from.list_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.digest_id() != 0) {
    set_digest_id(from.digest_id());
  }
}

void DigestList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.DigestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigestList::CopyFrom(const DigestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestList::IsInitialized() const {
  return true;
}

void DigestList::Swap(DigestList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigestList::InternalSwap(DigestList* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(list_id_, other->list_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(digest_id_, other->digest_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DigestList::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DigestList

// uint32 digest_id = 1;
void DigestList::clear_digest_id() {
  digest_id_ = 0u;
}
::google::protobuf::uint32 DigestList::digest_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestList.digest_id)
  return digest_id_;
}
void DigestList::set_digest_id(::google::protobuf::uint32 value) {
  
  digest_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestList.digest_id)
}

// uint64 list_id = 2;
void DigestList::clear_list_id() {
  list_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DigestList::list_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestList.list_id)
  return list_id_;
}
void DigestList::set_list_id(::google::protobuf::uint64 value) {
  
  list_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestList.list_id)
}

// repeated .p4.v1.P4Data data = 3;
int DigestList::data_size() const {
  return data_.size();
}
void DigestList::clear_data() {
  data_.Clear();
}
const ::p4::v1::P4Data& DigestList::data(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestList.data)
  return data_.Get(index);
}
::p4::v1::P4Data* DigestList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.DigestList.data)
  return data_.Mutable(index);
}
::p4::v1::P4Data* DigestList::add_data() {
  // @@protoc_insertion_point(field_add:p4.v1.DigestList.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >*
DigestList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.DigestList.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >&
DigestList::data() const {
  // @@protoc_insertion_point(field_list:p4.v1.DigestList.data)
  return data_;
}

// int64 timestamp = 4;
void DigestList::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DigestList::timestamp() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestList.timestamp)
  return timestamp_;
}
void DigestList::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.DigestList.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketMetadata::kMetadataIdFieldNumber;
const int PacketMetadata::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketMetadata::PacketMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.PacketMetadata)
}
PacketMetadata::PacketMetadata(const PacketMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  metadata_id_ = from.metadata_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketMetadata)
}

void PacketMetadata::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_id_ = 0u;
  _cached_size_ = 0;
}

PacketMetadata::~PacketMetadata() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketMetadata)
  SharedDtor();
}

void PacketMetadata::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PacketMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketMetadata::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[45].descriptor;
}

const PacketMetadata& PacketMetadata::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketMetadata* PacketMetadata::New(::google::protobuf::Arena* arena) const {
  PacketMetadata* n = new PacketMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketMetadata)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_id_ = 0u;
}

bool PacketMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.PacketMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 metadata_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metadata_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.PacketMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.PacketMetadata)
  return false;
#undef DO_
}

void PacketMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.PacketMetadata)
  // uint32 metadata_id = 1;
  if (this->metadata_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->metadata_id(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.PacketMetadata)
}

::google::protobuf::uint8* PacketMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketMetadata)
  // uint32 metadata_id = 1;
  if (this->metadata_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->metadata_id(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketMetadata)
  return target;
}

size_t PacketMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketMetadata)
  size_t total_size = 0;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // uint32 metadata_id = 1;
  if (this->metadata_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->metadata_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.PacketMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.PacketMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.PacketMetadata)
    MergeFrom(*source);
  }
}

void PacketMetadata::MergeFrom(const PacketMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.metadata_id() != 0) {
    set_metadata_id(from.metadata_id());
  }
}

void PacketMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.PacketMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketMetadata::CopyFrom(const PacketMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMetadata::IsInitialized() const {
  return true;
}

void PacketMetadata::Swap(PacketMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketMetadata::InternalSwap(PacketMetadata* other) {
  value_.Swap(&other->value_);
  std::swap(metadata_id_, other->metadata_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketMetadata::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketMetadata

// uint32 metadata_id = 1;
void PacketMetadata::clear_metadata_id() {
  metadata_id_ = 0u;
}
::google::protobuf::uint32 PacketMetadata::metadata_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketMetadata.metadata_id)
  return metadata_id_;
}
void PacketMetadata::set_metadata_id(::google::protobuf::uint32 value) {
  
  metadata_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.PacketMetadata.metadata_id)
}

// bytes value = 2;
void PacketMetadata::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PacketMetadata::value() const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketMetadata.value)
  return value_.GetNoArena();
}
void PacketMetadata::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.PacketMetadata.value)
}
#if LANG_CXX11
void PacketMetadata::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.PacketMetadata.value)
}
#endif
void PacketMetadata::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.PacketMetadata.value)
}
void PacketMetadata::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.PacketMetadata.value)
}
::std::string* PacketMetadata::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketMetadata.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PacketMetadata::release_value() {
  // @@protoc_insertion_point(field_release:p4.v1.PacketMetadata.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PacketMetadata::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketMetadata.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterArbitrationUpdate::kDeviceIdFieldNumber;
const int MasterArbitrationUpdate::kRoleFieldNumber;
const int MasterArbitrationUpdate::kElectionIdFieldNumber;
const int MasterArbitrationUpdate::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterArbitrationUpdate::MasterArbitrationUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.MasterArbitrationUpdate)
}
MasterArbitrationUpdate::MasterArbitrationUpdate(const MasterArbitrationUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_role()) {
    role_ = new ::p4::v1::Role(*from.role_);
  } else {
    role_ = NULL;
  }
  if (from.has_election_id()) {
    election_id_ = new ::p4::v1::Uint128(*from.election_id_);
  } else {
    election_id_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  device_id_ = from.device_id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.MasterArbitrationUpdate)
}

void MasterArbitrationUpdate::SharedCtor() {
  ::memset(&role_, 0, reinterpret_cast<char*>(&device_id_) -
    reinterpret_cast<char*>(&role_) + sizeof(device_id_));
  _cached_size_ = 0;
}

MasterArbitrationUpdate::~MasterArbitrationUpdate() {
  // @@protoc_insertion_point(destructor:p4.v1.MasterArbitrationUpdate)
  SharedDtor();
}

void MasterArbitrationUpdate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete role_;
  }
  if (this != internal_default_instance()) {
    delete election_id_;
  }
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void MasterArbitrationUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterArbitrationUpdate::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[46].descriptor;
}

const MasterArbitrationUpdate& MasterArbitrationUpdate::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

MasterArbitrationUpdate* MasterArbitrationUpdate::New(::google::protobuf::Arena* arena) const {
  MasterArbitrationUpdate* n = new MasterArbitrationUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterArbitrationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.MasterArbitrationUpdate)
  if (GetArenaNoVirtual() == NULL && role_ != NULL) {
    delete role_;
  }
  role_ = NULL;
  if (GetArenaNoVirtual() == NULL && election_id_ != NULL) {
    delete election_id_;
  }
  election_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  device_id_ = GOOGLE_ULONGLONG(0);
}

bool MasterArbitrationUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.MasterArbitrationUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 device_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Role role = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Uint128 election_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_election_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status status = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.MasterArbitrationUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.MasterArbitrationUpdate)
  return false;
#undef DO_
}

void MasterArbitrationUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.MasterArbitrationUpdate)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->device_id(), output);
  }

  // .p4.v1.Role role = 2;
  if (this->has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->role_, output);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->election_id_, output);
  }

  // .google.rpc.Status status = 4;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.MasterArbitrationUpdate)
}

::google::protobuf::uint8* MasterArbitrationUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.MasterArbitrationUpdate)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->device_id(), target);
  }

  // .p4.v1.Role role = 2;
  if (this->has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->role_, false, target);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->election_id_, false, target);
  }

  // .google.rpc.Status status = 4;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.MasterArbitrationUpdate)
  return target;
}

size_t MasterArbitrationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.MasterArbitrationUpdate)
  size_t total_size = 0;

  // .p4.v1.Role role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->role_);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->election_id_);
  }

  // .google.rpc.Status status = 4;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterArbitrationUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.MasterArbitrationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterArbitrationUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterArbitrationUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.MasterArbitrationUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.MasterArbitrationUpdate)
    MergeFrom(*source);
  }
}

void MasterArbitrationUpdate::MergeFrom(const MasterArbitrationUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.MasterArbitrationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_role()) {
    mutable_role()->::p4::v1::Role::MergeFrom(from.role());
  }
  if (from.has_election_id()) {
    mutable_election_id()->::p4::v1::Uint128::MergeFrom(from.election_id());
  }
  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void MasterArbitrationUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.MasterArbitrationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterArbitrationUpdate::CopyFrom(const MasterArbitrationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.MasterArbitrationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterArbitrationUpdate::IsInitialized() const {
  return true;
}

void MasterArbitrationUpdate::Swap(MasterArbitrationUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterArbitrationUpdate::InternalSwap(MasterArbitrationUpdate* other) {
  std::swap(role_, other->role_);
  std::swap(election_id_, other->election_id_);
  std::swap(status_, other->status_);
  std::swap(device_id_, other->device_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterArbitrationUpdate::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MasterArbitrationUpdate

// uint64 device_id = 1;
void MasterArbitrationUpdate::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MasterArbitrationUpdate::device_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.MasterArbitrationUpdate.device_id)
  return device_id_;
}
void MasterArbitrationUpdate::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.MasterArbitrationUpdate.device_id)
}

// .p4.v1.Role role = 2;
bool MasterArbitrationUpdate::has_role() const {
  return this != internal_default_instance() && role_ != NULL;
}
void MasterArbitrationUpdate::clear_role() {
  if (GetArenaNoVirtual() == NULL && role_ != NULL) delete role_;
  role_ = NULL;
}
const ::p4::v1::Role& MasterArbitrationUpdate::role() const {
  // @@protoc_insertion_point(field_get:p4.v1.MasterArbitrationUpdate.role)
  return role_ != NULL ? *role_
                         : *::p4::v1::Role::internal_default_instance();
}
::p4::v1::Role* MasterArbitrationUpdate::mutable_role() {
  
  if (role_ == NULL) {
    role_ = new ::p4::v1::Role;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.MasterArbitrationUpdate.role)
  return role_;
}
::p4::v1::Role* MasterArbitrationUpdate::release_role() {
  // @@protoc_insertion_point(field_release:p4.v1.MasterArbitrationUpdate.role)
  
  ::p4::v1::Role* temp = role_;
  role_ = NULL;
  return temp;
}
void MasterArbitrationUpdate::set_allocated_role(::p4::v1::Role* role) {
  delete role_;
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.MasterArbitrationUpdate.role)
}

// .p4.v1.Uint128 election_id = 3;
bool MasterArbitrationUpdate::has_election_id() const {
  return this != internal_default_instance() && election_id_ != NULL;
}
void MasterArbitrationUpdate::clear_election_id() {
  if (GetArenaNoVirtual() == NULL && election_id_ != NULL) delete election_id_;
  election_id_ = NULL;
}
const ::p4::v1::Uint128& MasterArbitrationUpdate::election_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.MasterArbitrationUpdate.election_id)
  return election_id_ != NULL ? *election_id_
                         : *::p4::v1::Uint128::internal_default_instance();
}
::p4::v1::Uint128* MasterArbitrationUpdate::mutable_election_id() {
  
  if (election_id_ == NULL) {
    election_id_ = new ::p4::v1::Uint128;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.MasterArbitrationUpdate.election_id)
  return election_id_;
}
::p4::v1::Uint128* MasterArbitrationUpdate::release_election_id() {
  // @@protoc_insertion_point(field_release:p4.v1.MasterArbitrationUpdate.election_id)
  
  ::p4::v1::Uint128* temp = election_id_;
  election_id_ = NULL;
  return temp;
}
void MasterArbitrationUpdate::set_allocated_election_id(::p4::v1::Uint128* election_id) {
  delete election_id_;
  election_id_ = election_id;
  if (election_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.MasterArbitrationUpdate.election_id)
}

// .google.rpc.Status status = 4;
bool MasterArbitrationUpdate::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void MasterArbitrationUpdate::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::google::rpc::Status& MasterArbitrationUpdate::status() const {
  // @@protoc_insertion_point(field_get:p4.v1.MasterArbitrationUpdate.status)
  return status_ != NULL ? *status_
                         : *::google::rpc::Status::internal_default_instance();
}
::google::rpc::Status* MasterArbitrationUpdate::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.MasterArbitrationUpdate.status)
  return status_;
}
::google::rpc::Status* MasterArbitrationUpdate::release_status() {
  // @@protoc_insertion_point(field_release:p4.v1.MasterArbitrationUpdate.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void MasterArbitrationUpdate::set_allocated_status(::google::rpc::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.MasterArbitrationUpdate.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Role::kIdFieldNumber;
const int Role::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Role::Role()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Role)
}
Role::Role(const Role& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::protobuf::Any(*from.config_);
  } else {
    config_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.Role)
}

void Role::SharedCtor() {
  ::memset(&config_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&config_) + sizeof(id_));
  _cached_size_ = 0;
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:p4.v1.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[47].descriptor;
}

const Role& Role::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Role* Role::New(::google::protobuf::Arena* arena) const {
  Role* n = new Role;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Role)
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Role)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // .google.protobuf.Any config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Role)
}

::google::protobuf::uint8* Role::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Role)
  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // .google.protobuf.Any config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Role)
  size_t total_size = 0;

  // .google.protobuf.Any config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Role)
  GOOGLE_DCHECK_NE(&from, this);
  const Role* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Role>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Role)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Role)
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Role)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Any::MergeFrom(from.config());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::Swap(Role* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Role::InternalSwap(Role* other) {
  std::swap(config_, other->config_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Role

// uint64 id = 1;
void Role::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Role::id() const {
  // @@protoc_insertion_point(field_get:p4.v1.Role.id)
  return id_;
}
void Role::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Role.id)
}

// .google.protobuf.Any config = 2;
bool Role::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void Role::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::protobuf::Any& Role::config() const {
  // @@protoc_insertion_point(field_get:p4.v1.Role.config)
  return config_ != NULL ? *config_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* Role::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Role.config)
  return config_;
}
::google::protobuf::Any* Role::release_config() {
  // @@protoc_insertion_point(field_release:p4.v1.Role.config)
  
  ::google::protobuf::Any* temp = config_;
  config_ = NULL;
  return temp;
}
void Role::set_allocated_config(::google::protobuf::Any* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Role.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdleTimeoutNotification::kTableEntryFieldNumber;
const int IdleTimeoutNotification::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdleTimeoutNotification::IdleTimeoutNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.IdleTimeoutNotification)
}
IdleTimeoutNotification::IdleTimeoutNotification(const IdleTimeoutNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      table_entry_(from.table_entry_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.IdleTimeoutNotification)
}

void IdleTimeoutNotification::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

IdleTimeoutNotification::~IdleTimeoutNotification() {
  // @@protoc_insertion_point(destructor:p4.v1.IdleTimeoutNotification)
  SharedDtor();
}

void IdleTimeoutNotification::SharedDtor() {
}

void IdleTimeoutNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdleTimeoutNotification::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[48].descriptor;
}

const IdleTimeoutNotification& IdleTimeoutNotification::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

IdleTimeoutNotification* IdleTimeoutNotification::New(::google::protobuf::Arena* arena) const {
  IdleTimeoutNotification* n = new IdleTimeoutNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdleTimeoutNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.IdleTimeoutNotification)
  table_entry_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool IdleTimeoutNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.IdleTimeoutNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .p4.v1.TableEntry table_entry = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_table_entry()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.IdleTimeoutNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.IdleTimeoutNotification)
  return false;
#undef DO_
}

void IdleTimeoutNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.IdleTimeoutNotification)
  // repeated .p4.v1.TableEntry table_entry = 1;
  for (unsigned int i = 0, n = this->table_entry_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_entry(i), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.IdleTimeoutNotification)
}

::google::protobuf::uint8* IdleTimeoutNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.IdleTimeoutNotification)
  // repeated .p4.v1.TableEntry table_entry = 1;
  for (unsigned int i = 0, n = this->table_entry_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->table_entry(i), false, target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.IdleTimeoutNotification)
  return target;
}

size_t IdleTimeoutNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.IdleTimeoutNotification)
  size_t total_size = 0;

  // repeated .p4.v1.TableEntry table_entry = 1;
  {
    unsigned int count = this->table_entry_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_entry(i));
    }
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdleTimeoutNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.IdleTimeoutNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const IdleTimeoutNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdleTimeoutNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.IdleTimeoutNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.IdleTimeoutNotification)
    MergeFrom(*source);
  }
}

void IdleTimeoutNotification::MergeFrom(const IdleTimeoutNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.IdleTimeoutNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_entry_.MergeFrom(from.table_entry_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void IdleTimeoutNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.IdleTimeoutNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdleTimeoutNotification::CopyFrom(const IdleTimeoutNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.IdleTimeoutNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdleTimeoutNotification::IsInitialized() const {
  return true;
}

void IdleTimeoutNotification::Swap(IdleTimeoutNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdleTimeoutNotification::InternalSwap(IdleTimeoutNotification* other) {
  table_entry_.UnsafeArenaSwap(&other->table_entry_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdleTimeoutNotification::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdleTimeoutNotification

// repeated .p4.v1.TableEntry table_entry = 1;
int IdleTimeoutNotification::table_entry_size() const {
  return table_entry_.size();
}
void IdleTimeoutNotification::clear_table_entry() {
  table_entry_.Clear();
}
const ::p4::v1::TableEntry& IdleTimeoutNotification::table_entry(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.IdleTimeoutNotification.table_entry)
  return table_entry_.Get(index);
}
::p4::v1::TableEntry* IdleTimeoutNotification::mutable_table_entry(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.IdleTimeoutNotification.table_entry)
  return table_entry_.Mutable(index);
}
::p4::v1::TableEntry* IdleTimeoutNotification::add_table_entry() {
  // @@protoc_insertion_point(field_add:p4.v1.IdleTimeoutNotification.table_entry)
  return table_entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::TableEntry >*
IdleTimeoutNotification::mutable_table_entry() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.IdleTimeoutNotification.table_entry)
  return &table_entry_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::TableEntry >&
IdleTimeoutNotification::table_entry() const {
  // @@protoc_insertion_point(field_list:p4.v1.IdleTimeoutNotification.table_entry)
  return table_entry_;
}

// int64 timestamp = 2;
void IdleTimeoutNotification::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 IdleTimeoutNotification::timestamp() const {
  // @@protoc_insertion_point(field_get:p4.v1.IdleTimeoutNotification.timestamp)
  return timestamp_;
}
void IdleTimeoutNotification::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.IdleTimeoutNotification.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamError::kCanonicalCodeFieldNumber;
const int StreamError::kMessageFieldNumber;
const int StreamError::kSpaceFieldNumber;
const int StreamError::kCodeFieldNumber;
const int StreamError::kPacketOutFieldNumber;
const int StreamError::kDigestListAckFieldNumber;
const int StreamError::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamError::StreamError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.StreamError)
}
StreamError::StreamError(const StreamError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.space().size() > 0) {
    space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.space_);
  }
  ::memcpy(&canonical_code_, &from.canonical_code_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_) + sizeof(code_));
  clear_has_details();
  switch (from.details_case()) {
    case kPacketOut: {
      mutable_packet_out()->::p4::v1::PacketOutError::MergeFrom(from.packet_out());
      break;
    }
    case kDigestListAck: {
      mutable_digest_list_ack()->::p4::v1::DigestListAckError::MergeFrom(from.digest_list_ack());
      break;
    }
    case kOther: {
      mutable_other()->::p4::v1::StreamOtherError::MergeFrom(from.other());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamError)
}

void StreamError::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&canonical_code_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_) + sizeof(code_));
  clear_has_details();
  _cached_size_ = 0;
}

StreamError::~StreamError() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamError)
  SharedDtor();
}

void StreamError::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_details()) {
    clear_details();
  }
}

void StreamError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamError::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[49].descriptor;
}

const StreamError& StreamError::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamError* StreamError::New(::google::protobuf::Arena* arena) const {
  StreamError* n = new StreamError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamError::clear_details() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.StreamError)
  switch (details_case()) {
    case kPacketOut: {
      delete details_.packet_out_;
      break;
    }
    case kDigestListAck: {
      delete details_.digest_list_ack_;
      break;
    }
    case kOther: {
      delete details_.other_;
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAILS_NOT_SET;
}


void StreamError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamError)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&canonical_code_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_) + sizeof(code_));
  clear_details();
}

bool StreamError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.StreamError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 canonical_code = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canonical_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.StreamError.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string space = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_space()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->space().data(), this->space().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.StreamError.space"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.PacketOutError packet_out = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.DigestListAckError digest_list_ack = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digest_list_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.StreamOtherError other = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.StreamError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.StreamError)
  return false;
#undef DO_
}

void StreamError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.StreamError)
  // int32 canonical_code = 1;
  if (this->canonical_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canonical_code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.StreamError.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // string space = 3;
  if (this->space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->space().data(), this->space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.StreamError.space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->space(), output);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // .p4.v1.PacketOutError packet_out = 5;
  if (has_packet_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *details_.packet_out_, output);
  }

  // .p4.v1.DigestListAckError digest_list_ack = 6;
  if (has_digest_list_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *details_.digest_list_ack_, output);
  }

  // .p4.v1.StreamOtherError other = 7;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *details_.other_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.StreamError)
}

::google::protobuf::uint8* StreamError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamError)
  // int32 canonical_code = 1;
  if (this->canonical_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canonical_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.StreamError.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // string space = 3;
  if (this->space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->space().data(), this->space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.StreamError.space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->space(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // .p4.v1.PacketOutError packet_out = 5;
  if (has_packet_out()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *details_.packet_out_, false, target);
  }

  // .p4.v1.DigestListAckError digest_list_ack = 6;
  if (has_digest_list_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *details_.digest_list_ack_, false, target);
  }

  // .p4.v1.StreamOtherError other = 7;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *details_.other_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamError)
  return target;
}

size_t StreamError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamError)
  size_t total_size = 0;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // string space = 3;
  if (this->space().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->space());
  }

  // int32 canonical_code = 1;
  if (this->canonical_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->canonical_code());
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  switch (details_case()) {
    // .p4.v1.PacketOutError packet_out = 5;
    case kPacketOut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *details_.packet_out_);
      break;
    }
    // .p4.v1.DigestListAckError digest_list_ack = 6;
    case kDigestListAck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *details_.digest_list_ack_);
      break;
    }
    // .p4.v1.StreamOtherError other = 7;
    case kOther: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *details_.other_);
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.StreamError)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.StreamError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.StreamError)
    MergeFrom(*source);
  }
}

void StreamError::MergeFrom(const StreamError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.space().size() > 0) {

    space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.space_);
  }
  if (from.canonical_code() != 0) {
    set_canonical_code(from.canonical_code());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  switch (from.details_case()) {
    case kPacketOut: {
      mutable_packet_out()->::p4::v1::PacketOutError::MergeFrom(from.packet_out());
      break;
    }
    case kDigestListAck: {
      mutable_digest_list_ack()->::p4::v1::DigestListAckError::MergeFrom(from.digest_list_ack());
      break;
    }
    case kOther: {
      mutable_other()->::p4::v1::StreamOtherError::MergeFrom(from.other());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
}

void StreamError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.StreamError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamError::CopyFrom(const StreamError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamError::IsInitialized() const {
  return true;
}

void StreamError::Swap(StreamError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamError::InternalSwap(StreamError* other) {
  message_.Swap(&other->message_);
  space_.Swap(&other->space_);
  std::swap(canonical_code_, other->canonical_code_);
  std::swap(code_, other->code_);
  std::swap(details_, other->details_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamError::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamError

// int32 canonical_code = 1;
void StreamError::clear_canonical_code() {
  canonical_code_ = 0;
}
::google::protobuf::int32 StreamError::canonical_code() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamError.canonical_code)
  return canonical_code_;
}
void StreamError::set_canonical_code(::google::protobuf::int32 value) {
  
  canonical_code_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.StreamError.canonical_code)
}

// string message = 2;
void StreamError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StreamError::message() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamError.message)
  return message_.GetNoArena();
}
void StreamError::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.StreamError.message)
}
#if LANG_CXX11
void StreamError::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.StreamError.message)
}
#endif
void StreamError::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.StreamError.message)
}
void StreamError::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.StreamError.message)
}
::std::string* StreamError::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamError::release_message() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamError.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.message)
}

// string space = 3;
void StreamError::clear_space() {
  space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StreamError::space() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamError.space)
  return space_.GetNoArena();
}
void StreamError::set_space(const ::std::string& value) {
  
  space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.StreamError.space)
}
#if LANG_CXX11
void StreamError::set_space(::std::string&& value) {
  
  space_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.StreamError.space)
}
#endif
void StreamError::set_space(const char* value) {
  
  space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.StreamError.space)
}
void StreamError::set_space(const char* value, size_t size) {
  
  space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.StreamError.space)
}
::std::string* StreamError::mutable_space() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamError.space)
  return space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreamError::release_space() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamError.space)
  
  return space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreamError::set_allocated_space(::std::string* space) {
  if (space != NULL) {
    
  } else {
    
  }
  space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), space);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.space)
}

// int32 code = 4;
void StreamError::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 StreamError::code() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamError.code)
  return code_;
}
void StreamError::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.StreamError.code)
}

// .p4.v1.PacketOutError packet_out = 5;
bool StreamError::has_packet_out() const {
  return details_case() == kPacketOut;
}
void StreamError::set_has_packet_out() {
  _oneof_case_[0] = kPacketOut;
}
void StreamError::clear_packet_out() {
  if (has_packet_out()) {
    delete details_.packet_out_;
    clear_has_details();
  }
}
 const ::p4::v1::PacketOutError& StreamError::packet_out() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamError.packet_out)
  return has_packet_out()
      ? *details_.packet_out_
      : ::p4::v1::PacketOutError::default_instance();
}
::p4::v1::PacketOutError* StreamError::mutable_packet_out() {
  if (!has_packet_out()) {
    clear_details();
    set_has_packet_out();
    details_.packet_out_ = new ::p4::v1::PacketOutError;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamError.packet_out)
  return details_.packet_out_;
}
::p4::v1::PacketOutError* StreamError::release_packet_out() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamError.packet_out)
  if (has_packet_out()) {
    clear_has_details();
    ::p4::v1::PacketOutError* temp = details_.packet_out_;
    details_.packet_out_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamError::set_allocated_packet_out(::p4::v1::PacketOutError* packet_out) {
  clear_details();
  if (packet_out) {
    set_has_packet_out();
    details_.packet_out_ = packet_out;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.packet_out)
}

// .p4.v1.DigestListAckError digest_list_ack = 6;
bool StreamError::has_digest_list_ack() const {
  return details_case() == kDigestListAck;
}
void StreamError::set_has_digest_list_ack() {
  _oneof_case_[0] = kDigestListAck;
}
void StreamError::clear_digest_list_ack() {
  if (has_digest_list_ack()) {
    delete details_.digest_list_ack_;
    clear_has_details();
  }
}
 const ::p4::v1::DigestListAckError& StreamError::digest_list_ack() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamError.digest_list_ack)
  return has_digest_list_ack()
      ? *details_.digest_list_ack_
      : ::p4::v1::DigestListAckError::default_instance();
}
::p4::v1::DigestListAckError* StreamError::mutable_digest_list_ack() {
  if (!has_digest_list_ack()) {
    clear_details();
    set_has_digest_list_ack();
    details_.digest_list_ack_ = new ::p4::v1::DigestListAckError;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamError.digest_list_ack)
  return details_.digest_list_ack_;
}
::p4::v1::DigestListAckError* StreamError::release_digest_list_ack() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamError.digest_list_ack)
  if (has_digest_list_ack()) {
    clear_has_details();
    ::p4::v1::DigestListAckError* temp = details_.digest_list_ack_;
    details_.digest_list_ack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamError::set_allocated_digest_list_ack(::p4::v1::DigestListAckError* digest_list_ack) {
  clear_details();
  if (digest_list_ack) {
    set_has_digest_list_ack();
    details_.digest_list_ack_ = digest_list_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.digest_list_ack)
}

// .p4.v1.StreamOtherError other = 7;
bool StreamError::has_other() const {
  return details_case() == kOther;
}
void StreamError::set_has_other() {
  _oneof_case_[0] = kOther;
}
void StreamError::clear_other() {
  if (has_other()) {
    delete details_.other_;
    clear_has_details();
  }
}
 const ::p4::v1::StreamOtherError& StreamError::other() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamError.other)
  return has_other()
      ? *details_.other_
      : ::p4::v1::StreamOtherError::default_instance();
}
::p4::v1::StreamOtherError* StreamError::mutable_other() {
  if (!has_other()) {
    clear_details();
    set_has_other();
    details_.other_ = new ::p4::v1::StreamOtherError;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamError.other)
  return details_.other_;
}
::p4::v1::StreamOtherError* StreamError::release_other() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamError.other)
  if (has_other()) {
    clear_has_details();
    ::p4::v1::StreamOtherError* temp = details_.other_;
    details_.other_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void StreamError::set_allocated_other(::p4::v1::StreamOtherError* other) {
  clear_details();
  if (other) {
    set_has_other();
    details_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamError.other)
}

bool StreamError::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
void StreamError::clear_has_details() {
  _oneof_case_[0] = DETAILS_NOT_SET;
}
StreamError::DetailsCase StreamError::details_case() const {
  return StreamError::DetailsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketOutError::kPacketOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketOutError::PacketOutError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.PacketOutError)
}
PacketOutError::PacketOutError(const PacketOutError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packet_out()) {
    packet_out_ = new ::p4::v1::PacketOut(*from.packet_out_);
  } else {
    packet_out_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.PacketOutError)
}

void PacketOutError::SharedCtor() {
  packet_out_ = NULL;
  _cached_size_ = 0;
}

PacketOutError::~PacketOutError() {
  // @@protoc_insertion_point(destructor:p4.v1.PacketOutError)
  SharedDtor();
}

void PacketOutError::SharedDtor() {
  if (this != internal_default_instance()) {
    delete packet_out_;
  }
}

void PacketOutError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketOutError::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[50].descriptor;
}

const PacketOutError& PacketOutError::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

PacketOutError* PacketOutError::New(::google::protobuf::Arena* arena) const {
  PacketOutError* n = new PacketOutError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketOutError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.PacketOutError)
  if (GetArenaNoVirtual() == NULL && packet_out_ != NULL) {
    delete packet_out_;
  }
  packet_out_ = NULL;
}

bool PacketOutError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.PacketOutError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.PacketOut packet_out = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.PacketOutError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.PacketOutError)
  return false;
#undef DO_
}

void PacketOutError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.PacketOutError)
  // .p4.v1.PacketOut packet_out = 1;
  if (this->has_packet_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->packet_out_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.PacketOutError)
}

::google::protobuf::uint8* PacketOutError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.PacketOutError)
  // .p4.v1.PacketOut packet_out = 1;
  if (this->has_packet_out()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->packet_out_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.PacketOutError)
  return target;
}

size_t PacketOutError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.PacketOutError)
  size_t total_size = 0;

  // .p4.v1.PacketOut packet_out = 1;
  if (this->has_packet_out()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->packet_out_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketOutError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.PacketOutError)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketOutError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketOutError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.PacketOutError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.PacketOutError)
    MergeFrom(*source);
  }
}

void PacketOutError::MergeFrom(const PacketOutError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.PacketOutError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packet_out()) {
    mutable_packet_out()->::p4::v1::PacketOut::MergeFrom(from.packet_out());
  }
}

void PacketOutError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.PacketOutError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketOutError::CopyFrom(const PacketOutError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.PacketOutError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketOutError::IsInitialized() const {
  return true;
}

void PacketOutError::Swap(PacketOutError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketOutError::InternalSwap(PacketOutError* other) {
  std::swap(packet_out_, other->packet_out_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketOutError::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketOutError

// .p4.v1.PacketOut packet_out = 1;
bool PacketOutError::has_packet_out() const {
  return this != internal_default_instance() && packet_out_ != NULL;
}
void PacketOutError::clear_packet_out() {
  if (GetArenaNoVirtual() == NULL && packet_out_ != NULL) delete packet_out_;
  packet_out_ = NULL;
}
const ::p4::v1::PacketOut& PacketOutError::packet_out() const {
  // @@protoc_insertion_point(field_get:p4.v1.PacketOutError.packet_out)
  return packet_out_ != NULL ? *packet_out_
                         : *::p4::v1::PacketOut::internal_default_instance();
}
::p4::v1::PacketOut* PacketOutError::mutable_packet_out() {
  
  if (packet_out_ == NULL) {
    packet_out_ = new ::p4::v1::PacketOut;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.PacketOutError.packet_out)
  return packet_out_;
}
::p4::v1::PacketOut* PacketOutError::release_packet_out() {
  // @@protoc_insertion_point(field_release:p4.v1.PacketOutError.packet_out)
  
  ::p4::v1::PacketOut* temp = packet_out_;
  packet_out_ = NULL;
  return temp;
}
void PacketOutError::set_allocated_packet_out(::p4::v1::PacketOut* packet_out) {
  delete packet_out_;
  packet_out_ = packet_out;
  if (packet_out) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.PacketOutError.packet_out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigestListAckError::kDigestListAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigestListAckError::DigestListAckError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.DigestListAckError)
}
DigestListAckError::DigestListAckError(const DigestListAckError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_digest_list_ack()) {
    digest_list_ack_ = new ::p4::v1::DigestListAck(*from.digest_list_ack_);
  } else {
    digest_list_ack_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.DigestListAckError)
}

void DigestListAckError::SharedCtor() {
  digest_list_ack_ = NULL;
  _cached_size_ = 0;
}

DigestListAckError::~DigestListAckError() {
  // @@protoc_insertion_point(destructor:p4.v1.DigestListAckError)
  SharedDtor();
}

void DigestListAckError::SharedDtor() {
  if (this != internal_default_instance()) {
    delete digest_list_ack_;
  }
}

void DigestListAckError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigestListAckError::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[51].descriptor;
}

const DigestListAckError& DigestListAckError::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

DigestListAckError* DigestListAckError::New(::google::protobuf::Arena* arena) const {
  DigestListAckError* n = new DigestListAckError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DigestListAckError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.DigestListAckError)
  if (GetArenaNoVirtual() == NULL && digest_list_ack_ != NULL) {
    delete digest_list_ack_;
  }
  digest_list_ack_ = NULL;
}

bool DigestListAckError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.DigestListAckError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.DigestListAck digest_list_ack = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_digest_list_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.DigestListAckError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.DigestListAckError)
  return false;
#undef DO_
}

void DigestListAckError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.DigestListAckError)
  // .p4.v1.DigestListAck digest_list_ack = 1;
  if (this->has_digest_list_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->digest_list_ack_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.DigestListAckError)
}

::google::protobuf::uint8* DigestListAckError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.DigestListAckError)
  // .p4.v1.DigestListAck digest_list_ack = 1;
  if (this->has_digest_list_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->digest_list_ack_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.DigestListAckError)
  return target;
}

size_t DigestListAckError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.DigestListAckError)
  size_t total_size = 0;

  // .p4.v1.DigestListAck digest_list_ack = 1;
  if (this->has_digest_list_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->digest_list_ack_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigestListAckError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.DigestListAckError)
  GOOGLE_DCHECK_NE(&from, this);
  const DigestListAckError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DigestListAckError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.DigestListAckError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.DigestListAckError)
    MergeFrom(*source);
  }
}

void DigestListAckError::MergeFrom(const DigestListAckError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.DigestListAckError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_digest_list_ack()) {
    mutable_digest_list_ack()->::p4::v1::DigestListAck::MergeFrom(from.digest_list_ack());
  }
}

void DigestListAckError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.DigestListAckError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigestListAckError::CopyFrom(const DigestListAckError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.DigestListAckError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigestListAckError::IsInitialized() const {
  return true;
}

void DigestListAckError::Swap(DigestListAckError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigestListAckError::InternalSwap(DigestListAckError* other) {
  std::swap(digest_list_ack_, other->digest_list_ack_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DigestListAckError::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DigestListAckError

// .p4.v1.DigestListAck digest_list_ack = 1;
bool DigestListAckError::has_digest_list_ack() const {
  return this != internal_default_instance() && digest_list_ack_ != NULL;
}
void DigestListAckError::clear_digest_list_ack() {
  if (GetArenaNoVirtual() == NULL && digest_list_ack_ != NULL) delete digest_list_ack_;
  digest_list_ack_ = NULL;
}
const ::p4::v1::DigestListAck& DigestListAckError::digest_list_ack() const {
  // @@protoc_insertion_point(field_get:p4.v1.DigestListAckError.digest_list_ack)
  return digest_list_ack_ != NULL ? *digest_list_ack_
                         : *::p4::v1::DigestListAck::internal_default_instance();
}
::p4::v1::DigestListAck* DigestListAckError::mutable_digest_list_ack() {
  
  if (digest_list_ack_ == NULL) {
    digest_list_ack_ = new ::p4::v1::DigestListAck;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.DigestListAckError.digest_list_ack)
  return digest_list_ack_;
}
::p4::v1::DigestListAck* DigestListAckError::release_digest_list_ack() {
  // @@protoc_insertion_point(field_release:p4.v1.DigestListAckError.digest_list_ack)
  
  ::p4::v1::DigestListAck* temp = digest_list_ack_;
  digest_list_ack_ = NULL;
  return temp;
}
void DigestListAckError::set_allocated_digest_list_ack(::p4::v1::DigestListAck* digest_list_ack) {
  delete digest_list_ack_;
  digest_list_ack_ = digest_list_ack;
  if (digest_list_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.DigestListAckError.digest_list_ack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamOtherError::kOtherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamOtherError::StreamOtherError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.StreamOtherError)
}
StreamOtherError::StreamOtherError(const StreamOtherError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_other()) {
    other_ = new ::google::protobuf::Any(*from.other_);
  } else {
    other_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.StreamOtherError)
}

void StreamOtherError::SharedCtor() {
  other_ = NULL;
  _cached_size_ = 0;
}

StreamOtherError::~StreamOtherError() {
  // @@protoc_insertion_point(destructor:p4.v1.StreamOtherError)
  SharedDtor();
}

void StreamOtherError::SharedDtor() {
  if (this != internal_default_instance()) {
    delete other_;
  }
}

void StreamOtherError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamOtherError::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[52].descriptor;
}

const StreamOtherError& StreamOtherError::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamOtherError* StreamOtherError::New(::google::protobuf::Arena* arena) const {
  StreamOtherError* n = new StreamOtherError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamOtherError::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.StreamOtherError)
  if (GetArenaNoVirtual() == NULL && other_ != NULL) {
    delete other_;
  }
  other_ = NULL;
}

bool StreamOtherError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.StreamOtherError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any other = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.StreamOtherError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.StreamOtherError)
  return false;
#undef DO_
}

void StreamOtherError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.StreamOtherError)
  // .google.protobuf.Any other = 1;
  if (this->has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->other_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.StreamOtherError)
}

::google::protobuf::uint8* StreamOtherError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.StreamOtherError)
  // .google.protobuf.Any other = 1;
  if (this->has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->other_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.StreamOtherError)
  return target;
}

size_t StreamOtherError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.StreamOtherError)
  size_t total_size = 0;

  // .google.protobuf.Any other = 1;
  if (this->has_other()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->other_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamOtherError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.StreamOtherError)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamOtherError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamOtherError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.StreamOtherError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.StreamOtherError)
    MergeFrom(*source);
  }
}

void StreamOtherError::MergeFrom(const StreamOtherError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.StreamOtherError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_other()) {
    mutable_other()->::google::protobuf::Any::MergeFrom(from.other());
  }
}

void StreamOtherError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.StreamOtherError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamOtherError::CopyFrom(const StreamOtherError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.StreamOtherError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOtherError::IsInitialized() const {
  return true;
}

void StreamOtherError::Swap(StreamOtherError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamOtherError::InternalSwap(StreamOtherError* other) {
  std::swap(other_, other->other_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamOtherError::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamOtherError

// .google.protobuf.Any other = 1;
bool StreamOtherError::has_other() const {
  return this != internal_default_instance() && other_ != NULL;
}
void StreamOtherError::clear_other() {
  if (GetArenaNoVirtual() == NULL && other_ != NULL) delete other_;
  other_ = NULL;
}
const ::google::protobuf::Any& StreamOtherError::other() const {
  // @@protoc_insertion_point(field_get:p4.v1.StreamOtherError.other)
  return other_ != NULL ? *other_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* StreamOtherError::mutable_other() {
  
  if (other_ == NULL) {
    other_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.StreamOtherError.other)
  return other_;
}
::google::protobuf::Any* StreamOtherError::release_other() {
  // @@protoc_insertion_point(field_release:p4.v1.StreamOtherError.other)
  
  ::google::protobuf::Any* temp = other_;
  other_ = NULL;
  return temp;
}
void StreamOtherError::set_allocated_other(::google::protobuf::Any* other) {
  delete other_;
  other_ = other;
  if (other) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.StreamOtherError.other)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uint128::kHighFieldNumber;
const int Uint128::kLowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uint128::Uint128()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Uint128)
}
Uint128::Uint128(const Uint128& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.Uint128)
}

void Uint128::SharedCtor() {
  ::memset(&high_, 0, reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_) + sizeof(low_));
  _cached_size_ = 0;
}

Uint128::~Uint128() {
  // @@protoc_insertion_point(destructor:p4.v1.Uint128)
  SharedDtor();
}

void Uint128::SharedDtor() {
}

void Uint128::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uint128::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[53].descriptor;
}

const Uint128& Uint128::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Uint128* Uint128::New(::google::protobuf::Arena* arena) const {
  Uint128* n = new Uint128;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uint128::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Uint128)
  ::memset(&high_, 0, reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_) + sizeof(low_));
}

bool Uint128::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Uint128)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 high = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 low = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Uint128)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Uint128)
  return false;
#undef DO_
}

void Uint128::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Uint128)
  // uint64 high = 1;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->high(), output);
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->low(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Uint128)
}

::google::protobuf::uint8* Uint128::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Uint128)
  // uint64 high = 1;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->high(), target);
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->low(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Uint128)
  return target;
}

size_t Uint128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Uint128)
  size_t total_size = 0;

  // uint64 high = 1;
  if (this->high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->high());
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->low());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uint128::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint128* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Uint128>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Uint128)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Uint128)
    MergeFrom(*source);
  }
}

void Uint128::MergeFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
}

void Uint128::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint128::CopyFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint128::IsInitialized() const {
  return true;
}

void Uint128::Swap(Uint128* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uint128::InternalSwap(Uint128* other) {
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uint128::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uint128

// uint64 high = 1;
void Uint128::clear_high() {
  high_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Uint128::high() const {
  // @@protoc_insertion_point(field_get:p4.v1.Uint128.high)
  return high_;
}
void Uint128::set_high(::google::protobuf::uint64 value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Uint128.high)
}

// uint64 low = 2;
void Uint128::clear_low() {
  low_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Uint128::low() const {
  // @@protoc_insertion_point(field_get:p4.v1.Uint128.low)
  return low_;
}
void Uint128::set_low(::google::protobuf::uint64 value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Uint128.low)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetForwardingPipelineConfigRequest::kDeviceIdFieldNumber;
const int SetForwardingPipelineConfigRequest::kRoleIdFieldNumber;
const int SetForwardingPipelineConfigRequest::kElectionIdFieldNumber;
const int SetForwardingPipelineConfigRequest::kActionFieldNumber;
const int SetForwardingPipelineConfigRequest::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetForwardingPipelineConfigRequest::SetForwardingPipelineConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.SetForwardingPipelineConfigRequest)
}
SetForwardingPipelineConfigRequest::SetForwardingPipelineConfigRequest(const SetForwardingPipelineConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_election_id()) {
    election_id_ = new ::p4::v1::Uint128(*from.election_id_);
  } else {
    election_id_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::p4::v1::ForwardingPipelineConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.SetForwardingPipelineConfigRequest)
}

void SetForwardingPipelineConfigRequest::SharedCtor() {
  ::memset(&election_id_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&election_id_) + sizeof(action_));
  _cached_size_ = 0;
}

SetForwardingPipelineConfigRequest::~SetForwardingPipelineConfigRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.SetForwardingPipelineConfigRequest)
  SharedDtor();
}

void SetForwardingPipelineConfigRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete election_id_;
  }
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void SetForwardingPipelineConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetForwardingPipelineConfigRequest::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[54].descriptor;
}

const SetForwardingPipelineConfigRequest& SetForwardingPipelineConfigRequest::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetForwardingPipelineConfigRequest* SetForwardingPipelineConfigRequest::New(::google::protobuf::Arena* arena) const {
  SetForwardingPipelineConfigRequest* n = new SetForwardingPipelineConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetForwardingPipelineConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.SetForwardingPipelineConfigRequest)
  if (GetArenaNoVirtual() == NULL && election_id_ != NULL) {
    delete election_id_;
  }
  election_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(action_));
}

bool SetForwardingPipelineConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.SetForwardingPipelineConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 device_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 role_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.Uint128 election_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_election_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::p4::v1::SetForwardingPipelineConfigRequest_Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.ForwardingPipelineConfig config = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.SetForwardingPipelineConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.SetForwardingPipelineConfigRequest)
  return false;
#undef DO_
}

void SetForwardingPipelineConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.SetForwardingPipelineConfigRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->device_id(), output);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->election_id_, output);
  }

  // .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // .p4.v1.ForwardingPipelineConfig config = 5;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.SetForwardingPipelineConfigRequest)
}

::google::protobuf::uint8* SetForwardingPipelineConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.SetForwardingPipelineConfigRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->device_id(), target);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->election_id_, false, target);
  }

  // .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // .p4.v1.ForwardingPipelineConfig config = 5;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.SetForwardingPipelineConfigRequest)
  return target;
}

size_t SetForwardingPipelineConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.SetForwardingPipelineConfigRequest)
  size_t total_size = 0;

  // .p4.v1.Uint128 election_id = 3;
  if (this->has_election_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->election_id_);
  }

  // .p4.v1.ForwardingPipelineConfig config = 5;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->role_id());
  }

  // .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetForwardingPipelineConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.SetForwardingPipelineConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetForwardingPipelineConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetForwardingPipelineConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.SetForwardingPipelineConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.SetForwardingPipelineConfigRequest)
    MergeFrom(*source);
  }
}

void SetForwardingPipelineConfigRequest::MergeFrom(const SetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.SetForwardingPipelineConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_election_id()) {
    mutable_election_id()->::p4::v1::Uint128::MergeFrom(from.election_id());
  }
  if (from.has_config()) {
    mutable_config()->::p4::v1::ForwardingPipelineConfig::MergeFrom(from.config());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.role_id() != 0) {
    set_role_id(from.role_id());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void SetForwardingPipelineConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.SetForwardingPipelineConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetForwardingPipelineConfigRequest::CopyFrom(const SetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.SetForwardingPipelineConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetForwardingPipelineConfigRequest::IsInitialized() const {
  return true;
}

void SetForwardingPipelineConfigRequest::Swap(SetForwardingPipelineConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetForwardingPipelineConfigRequest::InternalSwap(SetForwardingPipelineConfigRequest* other) {
  std::swap(election_id_, other->election_id_);
  std::swap(config_, other->config_);
  std::swap(device_id_, other->device_id_);
  std::swap(role_id_, other->role_id_);
  std::swap(action_, other->action_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetForwardingPipelineConfigRequest::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetForwardingPipelineConfigRequest

// uint64 device_id = 1;
void SetForwardingPipelineConfigRequest::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SetForwardingPipelineConfigRequest::device_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.SetForwardingPipelineConfigRequest.device_id)
  return device_id_;
}
void SetForwardingPipelineConfigRequest::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.SetForwardingPipelineConfigRequest.device_id)
}

// uint64 role_id = 2;
void SetForwardingPipelineConfigRequest::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SetForwardingPipelineConfigRequest::role_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.SetForwardingPipelineConfigRequest.role_id)
  return role_id_;
}
void SetForwardingPipelineConfigRequest::set_role_id(::google::protobuf::uint64 value) {
  
  role_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.SetForwardingPipelineConfigRequest.role_id)
}

// .p4.v1.Uint128 election_id = 3;
bool SetForwardingPipelineConfigRequest::has_election_id() const {
  return this != internal_default_instance() && election_id_ != NULL;
}
void SetForwardingPipelineConfigRequest::clear_election_id() {
  if (GetArenaNoVirtual() == NULL && election_id_ != NULL) delete election_id_;
  election_id_ = NULL;
}
const ::p4::v1::Uint128& SetForwardingPipelineConfigRequest::election_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.SetForwardingPipelineConfigRequest.election_id)
  return election_id_ != NULL ? *election_id_
                         : *::p4::v1::Uint128::internal_default_instance();
}
::p4::v1::Uint128* SetForwardingPipelineConfigRequest::mutable_election_id() {
  
  if (election_id_ == NULL) {
    election_id_ = new ::p4::v1::Uint128;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.SetForwardingPipelineConfigRequest.election_id)
  return election_id_;
}
::p4::v1::Uint128* SetForwardingPipelineConfigRequest::release_election_id() {
  // @@protoc_insertion_point(field_release:p4.v1.SetForwardingPipelineConfigRequest.election_id)
  
  ::p4::v1::Uint128* temp = election_id_;
  election_id_ = NULL;
  return temp;
}
void SetForwardingPipelineConfigRequest::set_allocated_election_id(::p4::v1::Uint128* election_id) {
  delete election_id_;
  election_id_ = election_id;
  if (election_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.SetForwardingPipelineConfigRequest.election_id)
}

// .p4.v1.SetForwardingPipelineConfigRequest.Action action = 4;
void SetForwardingPipelineConfigRequest::clear_action() {
  action_ = 0;
}
::p4::v1::SetForwardingPipelineConfigRequest_Action SetForwardingPipelineConfigRequest::action() const {
  // @@protoc_insertion_point(field_get:p4.v1.SetForwardingPipelineConfigRequest.action)
  return static_cast< ::p4::v1::SetForwardingPipelineConfigRequest_Action >(action_);
}
void SetForwardingPipelineConfigRequest::set_action(::p4::v1::SetForwardingPipelineConfigRequest_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.SetForwardingPipelineConfigRequest.action)
}

// .p4.v1.ForwardingPipelineConfig config = 5;
bool SetForwardingPipelineConfigRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void SetForwardingPipelineConfigRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::p4::v1::ForwardingPipelineConfig& SetForwardingPipelineConfigRequest::config() const {
  // @@protoc_insertion_point(field_get:p4.v1.SetForwardingPipelineConfigRequest.config)
  return config_ != NULL ? *config_
                         : *::p4::v1::ForwardingPipelineConfig::internal_default_instance();
}
::p4::v1::ForwardingPipelineConfig* SetForwardingPipelineConfigRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::p4::v1::ForwardingPipelineConfig;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.SetForwardingPipelineConfigRequest.config)
  return config_;
}
::p4::v1::ForwardingPipelineConfig* SetForwardingPipelineConfigRequest::release_config() {
  // @@protoc_insertion_point(field_release:p4.v1.SetForwardingPipelineConfigRequest.config)
  
  ::p4::v1::ForwardingPipelineConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void SetForwardingPipelineConfigRequest::set_allocated_config(::p4::v1::ForwardingPipelineConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.SetForwardingPipelineConfigRequest.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetForwardingPipelineConfigResponse::SetForwardingPipelineConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.SetForwardingPipelineConfigResponse)
}
SetForwardingPipelineConfigResponse::SetForwardingPipelineConfigResponse(const SetForwardingPipelineConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.SetForwardingPipelineConfigResponse)
}

void SetForwardingPipelineConfigResponse::SharedCtor() {
  _cached_size_ = 0;
}

SetForwardingPipelineConfigResponse::~SetForwardingPipelineConfigResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.SetForwardingPipelineConfigResponse)
  SharedDtor();
}

void SetForwardingPipelineConfigResponse::SharedDtor() {
}

void SetForwardingPipelineConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetForwardingPipelineConfigResponse::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[55].descriptor;
}

const SetForwardingPipelineConfigResponse& SetForwardingPipelineConfigResponse::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetForwardingPipelineConfigResponse* SetForwardingPipelineConfigResponse::New(::google::protobuf::Arena* arena) const {
  SetForwardingPipelineConfigResponse* n = new SetForwardingPipelineConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetForwardingPipelineConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.SetForwardingPipelineConfigResponse)
}

bool SetForwardingPipelineConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.SetForwardingPipelineConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.SetForwardingPipelineConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.SetForwardingPipelineConfigResponse)
  return false;
#undef DO_
}

void SetForwardingPipelineConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.SetForwardingPipelineConfigResponse)
  // @@protoc_insertion_point(serialize_end:p4.v1.SetForwardingPipelineConfigResponse)
}

::google::protobuf::uint8* SetForwardingPipelineConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.SetForwardingPipelineConfigResponse)
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.SetForwardingPipelineConfigResponse)
  return target;
}

size_t SetForwardingPipelineConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.SetForwardingPipelineConfigResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetForwardingPipelineConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.SetForwardingPipelineConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetForwardingPipelineConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetForwardingPipelineConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.SetForwardingPipelineConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.SetForwardingPipelineConfigResponse)
    MergeFrom(*source);
  }
}

void SetForwardingPipelineConfigResponse::MergeFrom(const SetForwardingPipelineConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.SetForwardingPipelineConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SetForwardingPipelineConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.SetForwardingPipelineConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetForwardingPipelineConfigResponse::CopyFrom(const SetForwardingPipelineConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.SetForwardingPipelineConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetForwardingPipelineConfigResponse::IsInitialized() const {
  return true;
}

void SetForwardingPipelineConfigResponse::Swap(SetForwardingPipelineConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetForwardingPipelineConfigResponse::InternalSwap(SetForwardingPipelineConfigResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetForwardingPipelineConfigResponse::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[55];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetForwardingPipelineConfigResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardingPipelineConfig_Cookie::kCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardingPipelineConfig_Cookie::ForwardingPipelineConfig_Cookie()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ForwardingPipelineConfig.Cookie)
}
ForwardingPipelineConfig_Cookie::ForwardingPipelineConfig_Cookie(const ForwardingPipelineConfig_Cookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cookie_ = from.cookie_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.ForwardingPipelineConfig.Cookie)
}

void ForwardingPipelineConfig_Cookie::SharedCtor() {
  cookie_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ForwardingPipelineConfig_Cookie::~ForwardingPipelineConfig_Cookie() {
  // @@protoc_insertion_point(destructor:p4.v1.ForwardingPipelineConfig.Cookie)
  SharedDtor();
}

void ForwardingPipelineConfig_Cookie::SharedDtor() {
}

void ForwardingPipelineConfig_Cookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardingPipelineConfig_Cookie::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[56].descriptor;
}

const ForwardingPipelineConfig_Cookie& ForwardingPipelineConfig_Cookie::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardingPipelineConfig_Cookie* ForwardingPipelineConfig_Cookie::New(::google::protobuf::Arena* arena) const {
  ForwardingPipelineConfig_Cookie* n = new ForwardingPipelineConfig_Cookie;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardingPipelineConfig_Cookie::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ForwardingPipelineConfig.Cookie)
  cookie_ = GOOGLE_ULONGLONG(0);
}

bool ForwardingPipelineConfig_Cookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ForwardingPipelineConfig.Cookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cookie = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ForwardingPipelineConfig.Cookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ForwardingPipelineConfig.Cookie)
  return false;
#undef DO_
}

void ForwardingPipelineConfig_Cookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ForwardingPipelineConfig.Cookie)
  // uint64 cookie = 1;
  if (this->cookie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cookie(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ForwardingPipelineConfig.Cookie)
}

::google::protobuf::uint8* ForwardingPipelineConfig_Cookie::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ForwardingPipelineConfig.Cookie)
  // uint64 cookie = 1;
  if (this->cookie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cookie(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ForwardingPipelineConfig.Cookie)
  return target;
}

size_t ForwardingPipelineConfig_Cookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ForwardingPipelineConfig.Cookie)
  size_t total_size = 0;

  // uint64 cookie = 1;
  if (this->cookie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cookie());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardingPipelineConfig_Cookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ForwardingPipelineConfig.Cookie)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardingPipelineConfig_Cookie* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardingPipelineConfig_Cookie>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ForwardingPipelineConfig.Cookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ForwardingPipelineConfig.Cookie)
    MergeFrom(*source);
  }
}

void ForwardingPipelineConfig_Cookie::MergeFrom(const ForwardingPipelineConfig_Cookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ForwardingPipelineConfig.Cookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cookie() != 0) {
    set_cookie(from.cookie());
  }
}

void ForwardingPipelineConfig_Cookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ForwardingPipelineConfig.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardingPipelineConfig_Cookie::CopyFrom(const ForwardingPipelineConfig_Cookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ForwardingPipelineConfig.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingPipelineConfig_Cookie::IsInitialized() const {
  return true;
}

void ForwardingPipelineConfig_Cookie::Swap(ForwardingPipelineConfig_Cookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardingPipelineConfig_Cookie::InternalSwap(ForwardingPipelineConfig_Cookie* other) {
  std::swap(cookie_, other->cookie_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardingPipelineConfig_Cookie::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[56];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardingPipelineConfig_Cookie

// uint64 cookie = 1;
void ForwardingPipelineConfig_Cookie::clear_cookie() {
  cookie_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ForwardingPipelineConfig_Cookie::cookie() const {
  // @@protoc_insertion_point(field_get:p4.v1.ForwardingPipelineConfig.Cookie.cookie)
  return cookie_;
}
void ForwardingPipelineConfig_Cookie::set_cookie(::google::protobuf::uint64 value) {
  
  cookie_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.ForwardingPipelineConfig.Cookie.cookie)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardingPipelineConfig::kP4InfoFieldNumber;
const int ForwardingPipelineConfig::kP4DeviceConfigFieldNumber;
const int ForwardingPipelineConfig::kCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardingPipelineConfig::ForwardingPipelineConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.ForwardingPipelineConfig)
}
ForwardingPipelineConfig::ForwardingPipelineConfig(const ForwardingPipelineConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  p4_device_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.p4_device_config().size() > 0) {
    p4_device_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p4_device_config_);
  }
  if (from.has_p4info()) {
    p4info_ = new ::p4::config::v1::P4Info(*from.p4info_);
  } else {
    p4info_ = NULL;
  }
  if (from.has_cookie()) {
    cookie_ = new ::p4::v1::ForwardingPipelineConfig_Cookie(*from.cookie_);
  } else {
    cookie_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.ForwardingPipelineConfig)
}

void ForwardingPipelineConfig::SharedCtor() {
  p4_device_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&p4info_, 0, reinterpret_cast<char*>(&cookie_) -
    reinterpret_cast<char*>(&p4info_) + sizeof(cookie_));
  _cached_size_ = 0;
}

ForwardingPipelineConfig::~ForwardingPipelineConfig() {
  // @@protoc_insertion_point(destructor:p4.v1.ForwardingPipelineConfig)
  SharedDtor();
}

void ForwardingPipelineConfig::SharedDtor() {
  p4_device_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete p4info_;
  }
  if (this != internal_default_instance()) {
    delete cookie_;
  }
}

void ForwardingPipelineConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardingPipelineConfig::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[57].descriptor;
}

const ForwardingPipelineConfig& ForwardingPipelineConfig::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardingPipelineConfig* ForwardingPipelineConfig::New(::google::protobuf::Arena* arena) const {
  ForwardingPipelineConfig* n = new ForwardingPipelineConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardingPipelineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.ForwardingPipelineConfig)
  p4_device_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && p4info_ != NULL) {
    delete p4info_;
  }
  p4info_ = NULL;
  if (GetArenaNoVirtual() == NULL && cookie_ != NULL) {
    delete cookie_;
  }
  cookie_ = NULL;
}

bool ForwardingPipelineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.ForwardingPipelineConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.config.v1.P4Info p4info = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p4info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes p4_device_config = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p4_device_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.ForwardingPipelineConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.ForwardingPipelineConfig)
  return false;
#undef DO_
}

void ForwardingPipelineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.ForwardingPipelineConfig)
  // .p4.config.v1.P4Info p4info = 1;
  if (this->has_p4info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->p4info_, output);
  }

  // bytes p4_device_config = 2;
  if (this->p4_device_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->p4_device_config(), output);
  }

  // .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
  if (this->has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cookie_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.ForwardingPipelineConfig)
}

::google::protobuf::uint8* ForwardingPipelineConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.ForwardingPipelineConfig)
  // .p4.config.v1.P4Info p4info = 1;
  if (this->has_p4info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->p4info_, false, target);
  }

  // bytes p4_device_config = 2;
  if (this->p4_device_config().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->p4_device_config(), target);
  }

  // .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
  if (this->has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cookie_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.ForwardingPipelineConfig)
  return target;
}

size_t ForwardingPipelineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.ForwardingPipelineConfig)
  size_t total_size = 0;

  // bytes p4_device_config = 2;
  if (this->p4_device_config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->p4_device_config());
  }

  // .p4.config.v1.P4Info p4info = 1;
  if (this->has_p4info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->p4info_);
  }

  // .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
  if (this->has_cookie()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cookie_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardingPipelineConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.ForwardingPipelineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardingPipelineConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardingPipelineConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.ForwardingPipelineConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.ForwardingPipelineConfig)
    MergeFrom(*source);
  }
}

void ForwardingPipelineConfig::MergeFrom(const ForwardingPipelineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.ForwardingPipelineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.p4_device_config().size() > 0) {

    p4_device_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p4_device_config_);
  }
  if (from.has_p4info()) {
    mutable_p4info()->::p4::config::v1::P4Info::MergeFrom(from.p4info());
  }
  if (from.has_cookie()) {
    mutable_cookie()->::p4::v1::ForwardingPipelineConfig_Cookie::MergeFrom(from.cookie());
  }
}

void ForwardingPipelineConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.ForwardingPipelineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardingPipelineConfig::CopyFrom(const ForwardingPipelineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.ForwardingPipelineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingPipelineConfig::IsInitialized() const {
  return true;
}

void ForwardingPipelineConfig::Swap(ForwardingPipelineConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardingPipelineConfig::InternalSwap(ForwardingPipelineConfig* other) {
  p4_device_config_.Swap(&other->p4_device_config_);
  std::swap(p4info_, other->p4info_);
  std::swap(cookie_, other->cookie_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardingPipelineConfig::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[57];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardingPipelineConfig

// .p4.config.v1.P4Info p4info = 1;
bool ForwardingPipelineConfig::has_p4info() const {
  return this != internal_default_instance() && p4info_ != NULL;
}
void ForwardingPipelineConfig::clear_p4info() {
  if (GetArenaNoVirtual() == NULL && p4info_ != NULL) delete p4info_;
  p4info_ = NULL;
}
const ::p4::config::v1::P4Info& ForwardingPipelineConfig::p4info() const {
  // @@protoc_insertion_point(field_get:p4.v1.ForwardingPipelineConfig.p4info)
  return p4info_ != NULL ? *p4info_
                         : *::p4::config::v1::P4Info::internal_default_instance();
}
::p4::config::v1::P4Info* ForwardingPipelineConfig::mutable_p4info() {
  
  if (p4info_ == NULL) {
    p4info_ = new ::p4::config::v1::P4Info;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.ForwardingPipelineConfig.p4info)
  return p4info_;
}
::p4::config::v1::P4Info* ForwardingPipelineConfig::release_p4info() {
  // @@protoc_insertion_point(field_release:p4.v1.ForwardingPipelineConfig.p4info)
  
  ::p4::config::v1::P4Info* temp = p4info_;
  p4info_ = NULL;
  return temp;
}
void ForwardingPipelineConfig::set_allocated_p4info(::p4::config::v1::P4Info* p4info) {
  delete p4info_;
  p4info_ = p4info;
  if (p4info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.ForwardingPipelineConfig.p4info)
}

// bytes p4_device_config = 2;
void ForwardingPipelineConfig::clear_p4_device_config() {
  p4_device_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardingPipelineConfig::p4_device_config() const {
  // @@protoc_insertion_point(field_get:p4.v1.ForwardingPipelineConfig.p4_device_config)
  return p4_device_config_.GetNoArena();
}
void ForwardingPipelineConfig::set_p4_device_config(const ::std::string& value) {
  
  p4_device_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.ForwardingPipelineConfig.p4_device_config)
}
#if LANG_CXX11
void ForwardingPipelineConfig::set_p4_device_config(::std::string&& value) {
  
  p4_device_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.ForwardingPipelineConfig.p4_device_config)
}
#endif
void ForwardingPipelineConfig::set_p4_device_config(const char* value) {
  
  p4_device_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.ForwardingPipelineConfig.p4_device_config)
}
void ForwardingPipelineConfig::set_p4_device_config(const void* value, size_t size) {
  
  p4_device_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.ForwardingPipelineConfig.p4_device_config)
}
::std::string* ForwardingPipelineConfig::mutable_p4_device_config() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.ForwardingPipelineConfig.p4_device_config)
  return p4_device_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardingPipelineConfig::release_p4_device_config() {
  // @@protoc_insertion_point(field_release:p4.v1.ForwardingPipelineConfig.p4_device_config)
  
  return p4_device_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardingPipelineConfig::set_allocated_p4_device_config(::std::string* p4_device_config) {
  if (p4_device_config != NULL) {
    
  } else {
    
  }
  p4_device_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p4_device_config);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.ForwardingPipelineConfig.p4_device_config)
}

// .p4.v1.ForwardingPipelineConfig.Cookie cookie = 3;
bool ForwardingPipelineConfig::has_cookie() const {
  return this != internal_default_instance() && cookie_ != NULL;
}
void ForwardingPipelineConfig::clear_cookie() {
  if (GetArenaNoVirtual() == NULL && cookie_ != NULL) delete cookie_;
  cookie_ = NULL;
}
const ::p4::v1::ForwardingPipelineConfig_Cookie& ForwardingPipelineConfig::cookie() const {
  // @@protoc_insertion_point(field_get:p4.v1.ForwardingPipelineConfig.cookie)
  return cookie_ != NULL ? *cookie_
                         : *::p4::v1::ForwardingPipelineConfig_Cookie::internal_default_instance();
}
::p4::v1::ForwardingPipelineConfig_Cookie* ForwardingPipelineConfig::mutable_cookie() {
  
  if (cookie_ == NULL) {
    cookie_ = new ::p4::v1::ForwardingPipelineConfig_Cookie;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.ForwardingPipelineConfig.cookie)
  return cookie_;
}
::p4::v1::ForwardingPipelineConfig_Cookie* ForwardingPipelineConfig::release_cookie() {
  // @@protoc_insertion_point(field_release:p4.v1.ForwardingPipelineConfig.cookie)
  
  ::p4::v1::ForwardingPipelineConfig_Cookie* temp = cookie_;
  cookie_ = NULL;
  return temp;
}
void ForwardingPipelineConfig::set_allocated_cookie(::p4::v1::ForwardingPipelineConfig_Cookie* cookie) {
  delete cookie_;
  cookie_ = cookie;
  if (cookie) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.ForwardingPipelineConfig.cookie)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetForwardingPipelineConfigRequest::kDeviceIdFieldNumber;
const int GetForwardingPipelineConfigRequest::kResponseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetForwardingPipelineConfigRequest::GetForwardingPipelineConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.GetForwardingPipelineConfigRequest)
}
GetForwardingPipelineConfigRequest::GetForwardingPipelineConfigRequest(const GetForwardingPipelineConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(response_type_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.GetForwardingPipelineConfigRequest)
}

void GetForwardingPipelineConfigRequest::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(response_type_));
  _cached_size_ = 0;
}

GetForwardingPipelineConfigRequest::~GetForwardingPipelineConfigRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.GetForwardingPipelineConfigRequest)
  SharedDtor();
}

void GetForwardingPipelineConfigRequest::SharedDtor() {
}

void GetForwardingPipelineConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetForwardingPipelineConfigRequest::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[58].descriptor;
}

const GetForwardingPipelineConfigRequest& GetForwardingPipelineConfigRequest::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetForwardingPipelineConfigRequest* GetForwardingPipelineConfigRequest::New(::google::protobuf::Arena* arena) const {
  GetForwardingPipelineConfigRequest* n = new GetForwardingPipelineConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetForwardingPipelineConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.GetForwardingPipelineConfigRequest)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&response_type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(response_type_));
}

bool GetForwardingPipelineConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.GetForwardingPipelineConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 device_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response_type(static_cast< ::p4::v1::GetForwardingPipelineConfigRequest_ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.GetForwardingPipelineConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.GetForwardingPipelineConfigRequest)
  return false;
#undef DO_
}

void GetForwardingPipelineConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.GetForwardingPipelineConfigRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->device_id(), output);
  }

  // .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
  if (this->response_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.GetForwardingPipelineConfigRequest)
}

::google::protobuf::uint8* GetForwardingPipelineConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.GetForwardingPipelineConfigRequest)
  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->device_id(), target);
  }

  // .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
  if (this->response_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.GetForwardingPipelineConfigRequest)
  return target;
}

size_t GetForwardingPipelineConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.GetForwardingPipelineConfigRequest)
  size_t total_size = 0;

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
  if (this->response_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetForwardingPipelineConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.GetForwardingPipelineConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetForwardingPipelineConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetForwardingPipelineConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.GetForwardingPipelineConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.GetForwardingPipelineConfigRequest)
    MergeFrom(*source);
  }
}

void GetForwardingPipelineConfigRequest::MergeFrom(const GetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.GetForwardingPipelineConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.response_type() != 0) {
    set_response_type(from.response_type());
  }
}

void GetForwardingPipelineConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.GetForwardingPipelineConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetForwardingPipelineConfigRequest::CopyFrom(const GetForwardingPipelineConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.GetForwardingPipelineConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardingPipelineConfigRequest::IsInitialized() const {
  return true;
}

void GetForwardingPipelineConfigRequest::Swap(GetForwardingPipelineConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetForwardingPipelineConfigRequest::InternalSwap(GetForwardingPipelineConfigRequest* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(response_type_, other->response_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetForwardingPipelineConfigRequest::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[58];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetForwardingPipelineConfigRequest

// uint64 device_id = 1;
void GetForwardingPipelineConfigRequest::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetForwardingPipelineConfigRequest::device_id() const {
  // @@protoc_insertion_point(field_get:p4.v1.GetForwardingPipelineConfigRequest.device_id)
  return device_id_;
}
void GetForwardingPipelineConfigRequest::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.GetForwardingPipelineConfigRequest.device_id)
}

// .p4.v1.GetForwardingPipelineConfigRequest.ResponseType response_type = 2;
void GetForwardingPipelineConfigRequest::clear_response_type() {
  response_type_ = 0;
}
::p4::v1::GetForwardingPipelineConfigRequest_ResponseType GetForwardingPipelineConfigRequest::response_type() const {
  // @@protoc_insertion_point(field_get:p4.v1.GetForwardingPipelineConfigRequest.response_type)
  return static_cast< ::p4::v1::GetForwardingPipelineConfigRequest_ResponseType >(response_type_);
}
void GetForwardingPipelineConfigRequest::set_response_type(::p4::v1::GetForwardingPipelineConfigRequest_ResponseType value) {
  
  response_type_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.GetForwardingPipelineConfigRequest.response_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetForwardingPipelineConfigResponse::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetForwardingPipelineConfigResponse::GetForwardingPipelineConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.GetForwardingPipelineConfigResponse)
}
GetForwardingPipelineConfigResponse::GetForwardingPipelineConfigResponse(const GetForwardingPipelineConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::p4::v1::ForwardingPipelineConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.GetForwardingPipelineConfigResponse)
}

void GetForwardingPipelineConfigResponse::SharedCtor() {
  config_ = NULL;
  _cached_size_ = 0;
}

GetForwardingPipelineConfigResponse::~GetForwardingPipelineConfigResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.GetForwardingPipelineConfigResponse)
  SharedDtor();
}

void GetForwardingPipelineConfigResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void GetForwardingPipelineConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetForwardingPipelineConfigResponse::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[59].descriptor;
}

const GetForwardingPipelineConfigResponse& GetForwardingPipelineConfigResponse::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetForwardingPipelineConfigResponse* GetForwardingPipelineConfigResponse::New(::google::protobuf::Arena* arena) const {
  GetForwardingPipelineConfigResponse* n = new GetForwardingPipelineConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetForwardingPipelineConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.GetForwardingPipelineConfigResponse)
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}

bool GetForwardingPipelineConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.GetForwardingPipelineConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .p4.v1.ForwardingPipelineConfig config = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.GetForwardingPipelineConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.GetForwardingPipelineConfigResponse)
  return false;
#undef DO_
}

void GetForwardingPipelineConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.GetForwardingPipelineConfigResponse)
  // .p4.v1.ForwardingPipelineConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.GetForwardingPipelineConfigResponse)
}

::google::protobuf::uint8* GetForwardingPipelineConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.GetForwardingPipelineConfigResponse)
  // .p4.v1.ForwardingPipelineConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.GetForwardingPipelineConfigResponse)
  return target;
}

size_t GetForwardingPipelineConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.GetForwardingPipelineConfigResponse)
  size_t total_size = 0;

  // .p4.v1.ForwardingPipelineConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetForwardingPipelineConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.GetForwardingPipelineConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetForwardingPipelineConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetForwardingPipelineConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.GetForwardingPipelineConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.GetForwardingPipelineConfigResponse)
    MergeFrom(*source);
  }
}

void GetForwardingPipelineConfigResponse::MergeFrom(const GetForwardingPipelineConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.GetForwardingPipelineConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    mutable_config()->::p4::v1::ForwardingPipelineConfig::MergeFrom(from.config());
  }
}

void GetForwardingPipelineConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.GetForwardingPipelineConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetForwardingPipelineConfigResponse::CopyFrom(const GetForwardingPipelineConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.GetForwardingPipelineConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetForwardingPipelineConfigResponse::IsInitialized() const {
  return true;
}

void GetForwardingPipelineConfigResponse::Swap(GetForwardingPipelineConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetForwardingPipelineConfigResponse::InternalSwap(GetForwardingPipelineConfigResponse* other) {
  std::swap(config_, other->config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetForwardingPipelineConfigResponse::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[59];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetForwardingPipelineConfigResponse

// .p4.v1.ForwardingPipelineConfig config = 1;
bool GetForwardingPipelineConfigResponse::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void GetForwardingPipelineConfigResponse::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::p4::v1::ForwardingPipelineConfig& GetForwardingPipelineConfigResponse::config() const {
  // @@protoc_insertion_point(field_get:p4.v1.GetForwardingPipelineConfigResponse.config)
  return config_ != NULL ? *config_
                         : *::p4::v1::ForwardingPipelineConfig::internal_default_instance();
}
::p4::v1::ForwardingPipelineConfig* GetForwardingPipelineConfigResponse::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::p4::v1::ForwardingPipelineConfig;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.GetForwardingPipelineConfigResponse.config)
  return config_;
}
::p4::v1::ForwardingPipelineConfig* GetForwardingPipelineConfigResponse::release_config() {
  // @@protoc_insertion_point(field_release:p4.v1.GetForwardingPipelineConfigResponse.config)
  
  ::p4::v1::ForwardingPipelineConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void GetForwardingPipelineConfigResponse::set_allocated_config(::p4::v1::ForwardingPipelineConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.GetForwardingPipelineConfigResponse.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCanonicalCodeFieldNumber;
const int Error::kMessageFieldNumber;
const int Error::kSpaceFieldNumber;
const int Error::kCodeFieldNumber;
const int Error::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.space().size() > 0) {
    space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.space_);
  }
  if (from.has_details()) {
    details_ = new ::google::protobuf::Any(*from.details_);
  } else {
    details_ = NULL;
  }
  ::memcpy(&canonical_code_, &from.canonical_code_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:p4.v1.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&details_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&details_) + sizeof(code_));
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:p4.v1.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete details_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[60].descriptor;
}

const Error& Error::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.Error)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && details_ != NULL) {
    delete details_;
  }
  details_ = NULL;
  ::memset(&canonical_code_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&canonical_code_) + sizeof(code_));
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 canonical_code = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canonical_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string space = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_space()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->space().data(), this->space().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.Error.space"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any details = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.Error)
  // int32 canonical_code = 1;
  if (this->canonical_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canonical_code(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // string space = 3;
  if (this->space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->space().data(), this->space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.Error.space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->space(), output);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // .google.protobuf.Any details = 5;
  if (this->has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->details_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.Error)
  // int32 canonical_code = 1;
  if (this->canonical_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canonical_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // string space = 3;
  if (this->space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->space().data(), this->space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.Error.space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->space(), target);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // .google.protobuf.Any details = 5;
  if (this->has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->details_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.Error)
  size_t total_size = 0;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // string space = 3;
  if (this->space().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->space());
  }

  // .google.protobuf.Any details = 5;
  if (this->has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->details_);
  }

  // int32 canonical_code = 1;
  if (this->canonical_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->canonical_code());
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.space().size() > 0) {

    space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.space_);
  }
  if (from.has_details()) {
    mutable_details()->::google::protobuf::Any::MergeFrom(from.details());
  }
  if (from.canonical_code() != 0) {
    set_canonical_code(from.canonical_code());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  message_.Swap(&other->message_);
  space_.Swap(&other->space_);
  std::swap(details_, other->details_);
  std::swap(canonical_code_, other->canonical_code_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[60];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// int32 canonical_code = 1;
void Error::clear_canonical_code() {
  canonical_code_ = 0;
}
::google::protobuf::int32 Error::canonical_code() const {
  // @@protoc_insertion_point(field_get:p4.v1.Error.canonical_code)
  return canonical_code_;
}
void Error::set_canonical_code(::google::protobuf::int32 value) {
  
  canonical_code_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Error.canonical_code)
}

// string message = 2;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:p4.v1.Error.message)
  return message_.GetNoArena();
}
void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.Error.message)
}
#if LANG_CXX11
void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.Error.message)
}
#endif
void Error::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.Error.message)
}
::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:p4.v1.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Error.message)
}

// string space = 3;
void Error::clear_space() {
  space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::space() const {
  // @@protoc_insertion_point(field_get:p4.v1.Error.space)
  return space_.GetNoArena();
}
void Error::set_space(const ::std::string& value) {
  
  space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.Error.space)
}
#if LANG_CXX11
void Error::set_space(::std::string&& value) {
  
  space_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.Error.space)
}
#endif
void Error::set_space(const char* value) {
  
  space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.Error.space)
}
void Error::set_space(const char* value, size_t size) {
  
  space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.Error.space)
}
::std::string* Error::mutable_space() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.Error.space)
  return space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_space() {
  // @@protoc_insertion_point(field_release:p4.v1.Error.space)
  
  return space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_space(::std::string* space) {
  if (space != NULL) {
    
  } else {
    
  }
  space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), space);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Error.space)
}

// int32 code = 4;
void Error::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:p4.v1.Error.code)
  return code_;
}
void Error::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.Error.code)
}

// .google.protobuf.Any details = 5;
bool Error::has_details() const {
  return this != internal_default_instance() && details_ != NULL;
}
void Error::clear_details() {
  if (GetArenaNoVirtual() == NULL && details_ != NULL) delete details_;
  details_ = NULL;
}
const ::google::protobuf::Any& Error::details() const {
  // @@protoc_insertion_point(field_get:p4.v1.Error.details)
  return details_ != NULL ? *details_
                         : *::google::protobuf::Any::internal_default_instance();
}
::google::protobuf::Any* Error::mutable_details() {
  
  if (details_ == NULL) {
    details_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.Error.details)
  return details_;
}
::google::protobuf::Any* Error::release_details() {
  // @@protoc_insertion_point(field_release:p4.v1.Error.details)
  
  ::google::protobuf::Any* temp = details_;
  details_ = NULL;
  return temp;
}
void Error::set_allocated_details(::google::protobuf::Any* details) {
  delete details_;
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.Error.details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CapabilitiesRequest::CapabilitiesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.CapabilitiesRequest)
}
CapabilitiesRequest::CapabilitiesRequest(const CapabilitiesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.CapabilitiesRequest)
}

void CapabilitiesRequest::SharedCtor() {
  _cached_size_ = 0;
}

CapabilitiesRequest::~CapabilitiesRequest() {
  // @@protoc_insertion_point(destructor:p4.v1.CapabilitiesRequest)
  SharedDtor();
}

void CapabilitiesRequest::SharedDtor() {
}

void CapabilitiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesRequest::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[61].descriptor;
}

const CapabilitiesRequest& CapabilitiesRequest::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

CapabilitiesRequest* CapabilitiesRequest::New(::google::protobuf::Arena* arena) const {
  CapabilitiesRequest* n = new CapabilitiesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CapabilitiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CapabilitiesRequest)
}

bool CapabilitiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.CapabilitiesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.CapabilitiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.CapabilitiesRequest)
  return false;
#undef DO_
}

void CapabilitiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.CapabilitiesRequest)
  // @@protoc_insertion_point(serialize_end:p4.v1.CapabilitiesRequest)
}

::google::protobuf::uint8* CapabilitiesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CapabilitiesRequest)
  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CapabilitiesRequest)
  return target;
}

size_t CapabilitiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CapabilitiesRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.CapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilitiesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CapabilitiesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.CapabilitiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.CapabilitiesRequest)
    MergeFrom(*source);
  }
}

void CapabilitiesRequest::MergeFrom(const CapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CapabilitiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CapabilitiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.CapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesRequest::CopyFrom(const CapabilitiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CapabilitiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesRequest::IsInitialized() const {
  return true;
}

void CapabilitiesRequest::Swap(CapabilitiesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CapabilitiesRequest::InternalSwap(CapabilitiesRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CapabilitiesRequest::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[61];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CapabilitiesRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CapabilitiesResponse::kP4RuntimeApiVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CapabilitiesResponse::CapabilitiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.CapabilitiesResponse)
}
CapabilitiesResponse::CapabilitiesResponse(const CapabilitiesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  p4runtime_api_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.p4runtime_api_version().size() > 0) {
    p4runtime_api_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p4runtime_api_version_);
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.CapabilitiesResponse)
}

void CapabilitiesResponse::SharedCtor() {
  p4runtime_api_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CapabilitiesResponse::~CapabilitiesResponse() {
  // @@protoc_insertion_point(destructor:p4.v1.CapabilitiesResponse)
  SharedDtor();
}

void CapabilitiesResponse::SharedDtor() {
  p4runtime_api_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CapabilitiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapabilitiesResponse::descriptor() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[62].descriptor;
}

const CapabilitiesResponse& CapabilitiesResponse::default_instance() {
  protobuf_p4_2fv1_2fp4runtime_2eproto::InitDefaults();
  return *internal_default_instance();
}

CapabilitiesResponse* CapabilitiesResponse::New(::google::protobuf::Arena* arena) const {
  CapabilitiesResponse* n = new CapabilitiesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CapabilitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.CapabilitiesResponse)
  p4runtime_api_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CapabilitiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.CapabilitiesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string p4runtime_api_version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_p4runtime_api_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->p4runtime_api_version().data(), this->p4runtime_api_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.CapabilitiesResponse.p4runtime_api_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.CapabilitiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.CapabilitiesResponse)
  return false;
#undef DO_
}

void CapabilitiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.CapabilitiesResponse)
  // string p4runtime_api_version = 1;
  if (this->p4runtime_api_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->p4runtime_api_version().data(), this->p4runtime_api_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.CapabilitiesResponse.p4runtime_api_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->p4runtime_api_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.CapabilitiesResponse)
}

::google::protobuf::uint8* CapabilitiesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.CapabilitiesResponse)
  // string p4runtime_api_version = 1;
  if (this->p4runtime_api_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->p4runtime_api_version().data(), this->p4runtime_api_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.CapabilitiesResponse.p4runtime_api_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->p4runtime_api_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.CapabilitiesResponse)
  return target;
}

size_t CapabilitiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.CapabilitiesResponse)
  size_t total_size = 0;

  // string p4runtime_api_version = 1;
  if (this->p4runtime_api_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->p4runtime_api_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapabilitiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.CapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CapabilitiesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CapabilitiesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.CapabilitiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.CapabilitiesResponse)
    MergeFrom(*source);
  }
}

void CapabilitiesResponse::MergeFrom(const CapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.CapabilitiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.p4runtime_api_version().size() > 0) {

    p4runtime_api_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p4runtime_api_version_);
  }
}

void CapabilitiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.CapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapabilitiesResponse::CopyFrom(const CapabilitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.CapabilitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilitiesResponse::IsInitialized() const {
  return true;
}

void CapabilitiesResponse::Swap(CapabilitiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CapabilitiesResponse::InternalSwap(CapabilitiesResponse* other) {
  p4runtime_api_version_.Swap(&other->p4runtime_api_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CapabilitiesResponse::GetMetadata() const {
  protobuf_p4_2fv1_2fp4runtime_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4runtime_2eproto::file_level_metadata[62];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CapabilitiesResponse

// string p4runtime_api_version = 1;
void CapabilitiesResponse::clear_p4runtime_api_version() {
  p4runtime_api_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CapabilitiesResponse::p4runtime_api_version() const {
  // @@protoc_insertion_point(field_get:p4.v1.CapabilitiesResponse.p4runtime_api_version)
  return p4runtime_api_version_.GetNoArena();
}
void CapabilitiesResponse::set_p4runtime_api_version(const ::std::string& value) {
  
  p4runtime_api_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.CapabilitiesResponse.p4runtime_api_version)
}
#if LANG_CXX11
void CapabilitiesResponse::set_p4runtime_api_version(::std::string&& value) {
  
  p4runtime_api_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.CapabilitiesResponse.p4runtime_api_version)
}
#endif
void CapabilitiesResponse::set_p4runtime_api_version(const char* value) {
  
  p4runtime_api_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.CapabilitiesResponse.p4runtime_api_version)
}
void CapabilitiesResponse::set_p4runtime_api_version(const char* value, size_t size) {
  
  p4runtime_api_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.CapabilitiesResponse.p4runtime_api_version)
}
::std::string* CapabilitiesResponse::mutable_p4runtime_api_version() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.CapabilitiesResponse.p4runtime_api_version)
  return p4runtime_api_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CapabilitiesResponse::release_p4runtime_api_version() {
  // @@protoc_insertion_point(field_release:p4.v1.CapabilitiesResponse.p4runtime_api_version)
  
  return p4runtime_api_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CapabilitiesResponse::set_allocated_p4runtime_api_version(::std::string* p4runtime_api_version) {
  if (p4runtime_api_version != NULL) {
    
  } else {
    
  }
  p4runtime_api_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p4runtime_api_version);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.CapabilitiesResponse.p4runtime_api_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace p4

// @@protoc_insertion_point(global_scope)
