// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/v1/p4data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "p4/v1/p4data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace p4 {
namespace v1 {
class P4DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<P4Data> {
  public:
  ::google::protobuf::internal::ArenaStringPtr bitstring_;
  const ::p4::v1::P4Varbit* varbit_;
  bool bool__;
  const ::p4::v1::P4StructLike* tuple_;
  const ::p4::v1::P4StructLike* struct__;
  const ::p4::v1::P4Header* header_;
  const ::p4::v1::P4HeaderUnion* header_union_;
  const ::p4::v1::P4HeaderStack* header_stack_;
  const ::p4::v1::P4HeaderUnionStack* header_union_stack_;
  ::google::protobuf::internal::ArenaStringPtr enum__;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr enum_value_;
} _P4Data_default_instance_;
class P4VarbitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<P4Varbit> {
} _P4Varbit_default_instance_;
class P4StructLikeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<P4StructLike> {
} _P4StructLike_default_instance_;
class P4HeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<P4Header> {
} _P4Header_default_instance_;
class P4HeaderUnionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<P4HeaderUnion> {
} _P4HeaderUnion_default_instance_;
class P4HeaderStackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<P4HeaderStack> {
} _P4HeaderStack_default_instance_;
class P4HeaderUnionStackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<P4HeaderUnionStack> {
} _P4HeaderUnionStack_default_instance_;

namespace protobuf_p4_2fv1_2fp4data_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Data, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Data, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), bitstring_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), varbit_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), bool__),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), tuple_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), struct__),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), header_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), header_union_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), header_stack_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), header_union_stack_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), enum__),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), error_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_P4Data_default_instance_), enum_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Data, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Varbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Varbit, bitstring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Varbit, bitwidth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4StructLike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4StructLike, members_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Header, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4Header, bitstrings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4HeaderUnion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4HeaderUnion, valid_header_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4HeaderUnion, valid_header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4HeaderStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4HeaderStack, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4HeaderUnionStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P4HeaderUnionStack, entries_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(P4Data)},
  { 17, -1, sizeof(P4Varbit)},
  { 23, -1, sizeof(P4StructLike)},
  { 28, -1, sizeof(P4Header)},
  { 34, -1, sizeof(P4HeaderUnion)},
  { 40, -1, sizeof(P4HeaderStack)},
  { 45, -1, sizeof(P4HeaderUnionStack)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_P4Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_P4Varbit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_P4StructLike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_P4Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_P4HeaderUnion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_P4HeaderStack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_P4HeaderUnionStack_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "p4/v1/p4data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _P4Data_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _P4Varbit_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _P4StructLike_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _P4Header_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _P4HeaderUnion_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _P4HeaderStack_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _P4HeaderUnionStack_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _P4Data_default_instance_.DefaultConstruct();
  _P4Varbit_default_instance_.DefaultConstruct();
  _P4StructLike_default_instance_.DefaultConstruct();
  _P4Header_default_instance_.DefaultConstruct();
  _P4HeaderUnion_default_instance_.DefaultConstruct();
  _P4HeaderStack_default_instance_.DefaultConstruct();
  _P4HeaderUnionStack_default_instance_.DefaultConstruct();
  _P4Data_default_instance_.bitstring_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _P4Data_default_instance_.varbit_ = const_cast< ::p4::v1::P4Varbit*>(
      ::p4::v1::P4Varbit::internal_default_instance());
  _P4Data_default_instance_.bool__ = false;
  _P4Data_default_instance_.tuple_ = const_cast< ::p4::v1::P4StructLike*>(
      ::p4::v1::P4StructLike::internal_default_instance());
  _P4Data_default_instance_.struct__ = const_cast< ::p4::v1::P4StructLike*>(
      ::p4::v1::P4StructLike::internal_default_instance());
  _P4Data_default_instance_.header_ = const_cast< ::p4::v1::P4Header*>(
      ::p4::v1::P4Header::internal_default_instance());
  _P4Data_default_instance_.header_union_ = const_cast< ::p4::v1::P4HeaderUnion*>(
      ::p4::v1::P4HeaderUnion::internal_default_instance());
  _P4Data_default_instance_.header_stack_ = const_cast< ::p4::v1::P4HeaderStack*>(
      ::p4::v1::P4HeaderStack::internal_default_instance());
  _P4Data_default_instance_.header_union_stack_ = const_cast< ::p4::v1::P4HeaderUnionStack*>(
      ::p4::v1::P4HeaderUnionStack::internal_default_instance());
  _P4Data_default_instance_.enum__.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _P4Data_default_instance_.error_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _P4Data_default_instance_.enum_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _P4HeaderUnion_default_instance_.get_mutable()->valid_header_ = const_cast< ::p4::v1::P4Header*>(
      ::p4::v1::P4Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022p4/v1/p4data.proto\022\005p4.v1\"\224\003\n\006P4Data\022\023"
      "\n\tbitstring\030\001 \001(\014H\000\022!\n\006varbit\030\002 \001(\0132\017.p4"
      ".v1.P4VarbitH\000\022\016\n\004bool\030\003 \001(\010H\000\022$\n\005tuple\030"
      "\004 \001(\0132\023.p4.v1.P4StructLikeH\000\022%\n\006struct\030\005"
      " \001(\0132\023.p4.v1.P4StructLikeH\000\022!\n\006header\030\006 "
      "\001(\0132\017.p4.v1.P4HeaderH\000\022,\n\014header_union\030\007"
      " \001(\0132\024.p4.v1.P4HeaderUnionH\000\022,\n\014header_s"
      "tack\030\010 \001(\0132\024.p4.v1.P4HeaderStackH\000\0227\n\022he"
      "ader_union_stack\030\t \001(\0132\031.p4.v1.P4HeaderU"
      "nionStackH\000\022\016\n\004enum\030\n \001(\tH\000\022\017\n\005error\030\013 \001"
      "(\tH\000\022\024\n\nenum_value\030\014 \001(\014H\000B\006\n\004data\"/\n\010P4"
      "Varbit\022\021\n\tbitstring\030\001 \001(\014\022\020\n\010bitwidth\030\002 "
      "\001(\005\".\n\014P4StructLike\022\036\n\007members\030\001 \003(\0132\r.p"
      "4.v1.P4Data\"0\n\010P4Header\022\020\n\010is_valid\030\001 \001("
      "\010\022\022\n\nbitstrings\030\002 \003(\014\"Q\n\rP4HeaderUnion\022\031"
      "\n\021valid_header_name\030\001 \001(\t\022%\n\014valid_heade"
      "r\030\002 \001(\0132\017.p4.v1.P4Header\"1\n\rP4HeaderStac"
      "k\022 \n\007entries\030\001 \003(\0132\017.p4.v1.P4Header\";\n\022P"
      "4HeaderUnionStack\022%\n\007entries\030\001 \003(\0132\024.p4."
      "v1.P4HeaderUnionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "p4/v1/p4data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_p4_2fv1_2fp4data_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P4Data::kBitstringFieldNumber;
const int P4Data::kVarbitFieldNumber;
const int P4Data::kBoolFieldNumber;
const int P4Data::kTupleFieldNumber;
const int P4Data::kStructFieldNumber;
const int P4Data::kHeaderFieldNumber;
const int P4Data::kHeaderUnionFieldNumber;
const int P4Data::kHeaderStackFieldNumber;
const int P4Data::kHeaderUnionStackFieldNumber;
const int P4Data::kEnumFieldNumber;
const int P4Data::kErrorFieldNumber;
const int P4Data::kEnumValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P4Data::P4Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.P4Data)
}
P4Data::P4Data(const P4Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kBitstring: {
      set_bitstring(from.bitstring());
      break;
    }
    case kVarbit: {
      mutable_varbit()->::p4::v1::P4Varbit::MergeFrom(from.varbit());
      break;
    }
    case kBool: {
      set_bool_(from.bool_());
      break;
    }
    case kTuple: {
      mutable_tuple()->::p4::v1::P4StructLike::MergeFrom(from.tuple());
      break;
    }
    case kStruct: {
      mutable_struct_()->::p4::v1::P4StructLike::MergeFrom(from.struct_());
      break;
    }
    case kHeader: {
      mutable_header()->::p4::v1::P4Header::MergeFrom(from.header());
      break;
    }
    case kHeaderUnion: {
      mutable_header_union()->::p4::v1::P4HeaderUnion::MergeFrom(from.header_union());
      break;
    }
    case kHeaderStack: {
      mutable_header_stack()->::p4::v1::P4HeaderStack::MergeFrom(from.header_stack());
      break;
    }
    case kHeaderUnionStack: {
      mutable_header_union_stack()->::p4::v1::P4HeaderUnionStack::MergeFrom(from.header_union_stack());
      break;
    }
    case kEnum: {
      set_enum_(from.enum_());
      break;
    }
    case kError: {
      set_error(from.error());
      break;
    }
    case kEnumValue: {
      set_enum_value(from.enum_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4Data)
}

void P4Data::SharedCtor() {
  clear_has_data();
  _cached_size_ = 0;
}

P4Data::~P4Data() {
  // @@protoc_insertion_point(destructor:p4.v1.P4Data)
  SharedDtor();
}

void P4Data::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void P4Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P4Data::descriptor() {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[0].descriptor;
}

const P4Data& P4Data::default_instance() {
  protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  return *internal_default_instance();
}

P4Data* P4Data::New(::google::protobuf::Arena* arena) const {
  P4Data* n = new P4Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P4Data::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:p4.v1.P4Data)
  switch (data_case()) {
    case kBitstring: {
      data_.bitstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kVarbit: {
      delete data_.varbit_;
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kTuple: {
      delete data_.tuple_;
      break;
    }
    case kStruct: {
      delete data_.struct__;
      break;
    }
    case kHeader: {
      delete data_.header_;
      break;
    }
    case kHeaderUnion: {
      delete data_.header_union_;
      break;
    }
    case kHeaderStack: {
      delete data_.header_stack_;
      break;
    }
    case kHeaderUnionStack: {
      delete data_.header_union_stack_;
      break;
    }
    case kEnum: {
      data_.enum__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kError: {
      data_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kEnumValue: {
      data_.enum_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void P4Data::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4Data)
  clear_data();
}

bool P4Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.P4Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes bitstring = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitstring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4Varbit varbit = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_varbit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool = 3;
      case 3: {
        if (tag == 24u) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_.bool__)));
          set_has_bool_();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4StructLike tuple = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4StructLike struct = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_struct_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4Header header = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4HeaderUnion header_union = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_union()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4HeaderStack header_stack = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_union_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enum = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enum_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enum_().data(), this->enum_().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.P4Data.enum"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.P4Data.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes enum_value = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_enum_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.P4Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.P4Data)
  return false;
#undef DO_
}

void P4Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.P4Data)
  // bytes bitstring = 1;
  if (has_bitstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bitstring(), output);
  }

  // .p4.v1.P4Varbit varbit = 2;
  if (has_varbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *data_.varbit_, output);
  }

  // bool bool = 3;
  if (has_bool_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bool_(), output);
  }

  // .p4.v1.P4StructLike tuple = 4;
  if (has_tuple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *data_.tuple_, output);
  }

  // .p4.v1.P4StructLike struct = 5;
  if (has_struct_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *data_.struct__, output);
  }

  // .p4.v1.P4Header header = 6;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *data_.header_, output);
  }

  // .p4.v1.P4HeaderUnion header_union = 7;
  if (has_header_union()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *data_.header_union_, output);
  }

  // .p4.v1.P4HeaderStack header_stack = 8;
  if (has_header_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *data_.header_stack_, output);
  }

  // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
  if (has_header_union_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *data_.header_union_stack_, output);
  }

  // string enum = 10;
  if (has_enum_()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enum_().data(), this->enum_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4Data.enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->enum_(), output);
  }

  // string error = 11;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4Data.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->error(), output);
  }

  // bytes enum_value = 12;
  if (has_enum_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->enum_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.P4Data)
}

::google::protobuf::uint8* P4Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4Data)
  // bytes bitstring = 1;
  if (has_bitstring()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bitstring(), target);
  }

  // .p4.v1.P4Varbit varbit = 2;
  if (has_varbit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *data_.varbit_, false, target);
  }

  // bool bool = 3;
  if (has_bool_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bool_(), target);
  }

  // .p4.v1.P4StructLike tuple = 4;
  if (has_tuple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *data_.tuple_, false, target);
  }

  // .p4.v1.P4StructLike struct = 5;
  if (has_struct_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *data_.struct__, false, target);
  }

  // .p4.v1.P4Header header = 6;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *data_.header_, false, target);
  }

  // .p4.v1.P4HeaderUnion header_union = 7;
  if (has_header_union()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *data_.header_union_, false, target);
  }

  // .p4.v1.P4HeaderStack header_stack = 8;
  if (has_header_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *data_.header_stack_, false, target);
  }

  // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
  if (has_header_union_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *data_.header_union_stack_, false, target);
  }

  // string enum = 10;
  if (has_enum_()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enum_().data(), this->enum_().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4Data.enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->enum_(), target);
  }

  // string error = 11;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4Data.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->error(), target);
  }

  // bytes enum_value = 12;
  if (has_enum_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->enum_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4Data)
  return target;
}

size_t P4Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4Data)
  size_t total_size = 0;

  switch (data_case()) {
    // bytes bitstring = 1;
    case kBitstring: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitstring());
      break;
    }
    // .p4.v1.P4Varbit varbit = 2;
    case kVarbit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.varbit_);
      break;
    }
    // bool bool = 3;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // .p4.v1.P4StructLike tuple = 4;
    case kTuple: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.tuple_);
      break;
    }
    // .p4.v1.P4StructLike struct = 5;
    case kStruct: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.struct__);
      break;
    }
    // .p4.v1.P4Header header = 6;
    case kHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.header_);
      break;
    }
    // .p4.v1.P4HeaderUnion header_union = 7;
    case kHeaderUnion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.header_union_);
      break;
    }
    // .p4.v1.P4HeaderStack header_stack = 8;
    case kHeaderStack: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.header_stack_);
      break;
    }
    // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
    case kHeaderUnionStack: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.header_union_stack_);
      break;
    }
    // string enum = 10;
    case kEnum: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enum_());
      break;
    }
    // string error = 11;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
      break;
    }
    // bytes enum_value = 12;
    case kEnumValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->enum_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P4Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.P4Data)
  GOOGLE_DCHECK_NE(&from, this);
  const P4Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const P4Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.P4Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.P4Data)
    MergeFrom(*source);
  }
}

void P4Data::MergeFrom(const P4Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.data_case()) {
    case kBitstring: {
      set_bitstring(from.bitstring());
      break;
    }
    case kVarbit: {
      mutable_varbit()->::p4::v1::P4Varbit::MergeFrom(from.varbit());
      break;
    }
    case kBool: {
      set_bool_(from.bool_());
      break;
    }
    case kTuple: {
      mutable_tuple()->::p4::v1::P4StructLike::MergeFrom(from.tuple());
      break;
    }
    case kStruct: {
      mutable_struct_()->::p4::v1::P4StructLike::MergeFrom(from.struct_());
      break;
    }
    case kHeader: {
      mutable_header()->::p4::v1::P4Header::MergeFrom(from.header());
      break;
    }
    case kHeaderUnion: {
      mutable_header_union()->::p4::v1::P4HeaderUnion::MergeFrom(from.header_union());
      break;
    }
    case kHeaderStack: {
      mutable_header_stack()->::p4::v1::P4HeaderStack::MergeFrom(from.header_stack());
      break;
    }
    case kHeaderUnionStack: {
      mutable_header_union_stack()->::p4::v1::P4HeaderUnionStack::MergeFrom(from.header_union_stack());
      break;
    }
    case kEnum: {
      set_enum_(from.enum_());
      break;
    }
    case kError: {
      set_error(from.error());
      break;
    }
    case kEnumValue: {
      set_enum_value(from.enum_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void P4Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.P4Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P4Data::CopyFrom(const P4Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4Data::IsInitialized() const {
  return true;
}

void P4Data::Swap(P4Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P4Data::InternalSwap(P4Data* other) {
  std::swap(data_, other->data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P4Data::GetMetadata() const {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P4Data

// bytes bitstring = 1;
bool P4Data::has_bitstring() const {
  return data_case() == kBitstring;
}
void P4Data::set_has_bitstring() {
  _oneof_case_[0] = kBitstring;
}
void P4Data::clear_bitstring() {
  if (has_bitstring()) {
    data_.bitstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& P4Data::bitstring() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.bitstring)
  if (has_bitstring()) {
    return data_.bitstring_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void P4Data::set_bitstring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bitstring)
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bitstring)
}
#if LANG_CXX11
void P4Data::set_bitstring(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bitstring)
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.bitstring)
}
#endif
void P4Data::set_bitstring(const char* value) {
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.bitstring)
}
void P4Data::set_bitstring(const void* value, size_t size) {
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.bitstring)
}
::std::string* P4Data::mutable_bitstring() {
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.bitstring)
  return data_.bitstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* P4Data::release_bitstring() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.bitstring)
  if (has_bitstring()) {
    clear_has_data();
    return data_.bitstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_bitstring(::std::string* bitstring) {
  if (!has_bitstring()) {
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (bitstring != NULL) {
    set_has_bitstring();
    data_.bitstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bitstring);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.bitstring)
}

// .p4.v1.P4Varbit varbit = 2;
bool P4Data::has_varbit() const {
  return data_case() == kVarbit;
}
void P4Data::set_has_varbit() {
  _oneof_case_[0] = kVarbit;
}
void P4Data::clear_varbit() {
  if (has_varbit()) {
    delete data_.varbit_;
    clear_has_data();
  }
}
 const ::p4::v1::P4Varbit& P4Data::varbit() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.varbit)
  return has_varbit()
      ? *data_.varbit_
      : ::p4::v1::P4Varbit::default_instance();
}
::p4::v1::P4Varbit* P4Data::mutable_varbit() {
  if (!has_varbit()) {
    clear_data();
    set_has_varbit();
    data_.varbit_ = new ::p4::v1::P4Varbit;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.varbit)
  return data_.varbit_;
}
::p4::v1::P4Varbit* P4Data::release_varbit() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.varbit)
  if (has_varbit()) {
    clear_has_data();
    ::p4::v1::P4Varbit* temp = data_.varbit_;
    data_.varbit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_varbit(::p4::v1::P4Varbit* varbit) {
  clear_data();
  if (varbit) {
    set_has_varbit();
    data_.varbit_ = varbit;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.varbit)
}

// bool bool = 3;
bool P4Data::has_bool_() const {
  return data_case() == kBool;
}
void P4Data::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
void P4Data::clear_bool_() {
  if (has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
bool P4Data::bool_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.bool)
  if (has_bool_()) {
    return data_.bool__;
  }
  return false;
}
void P4Data::set_bool_(bool value) {
  if (!has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bool)
}

// .p4.v1.P4StructLike tuple = 4;
bool P4Data::has_tuple() const {
  return data_case() == kTuple;
}
void P4Data::set_has_tuple() {
  _oneof_case_[0] = kTuple;
}
void P4Data::clear_tuple() {
  if (has_tuple()) {
    delete data_.tuple_;
    clear_has_data();
  }
}
 const ::p4::v1::P4StructLike& P4Data::tuple() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.tuple)
  return has_tuple()
      ? *data_.tuple_
      : ::p4::v1::P4StructLike::default_instance();
}
::p4::v1::P4StructLike* P4Data::mutable_tuple() {
  if (!has_tuple()) {
    clear_data();
    set_has_tuple();
    data_.tuple_ = new ::p4::v1::P4StructLike;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.tuple)
  return data_.tuple_;
}
::p4::v1::P4StructLike* P4Data::release_tuple() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.tuple)
  if (has_tuple()) {
    clear_has_data();
    ::p4::v1::P4StructLike* temp = data_.tuple_;
    data_.tuple_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_tuple(::p4::v1::P4StructLike* tuple) {
  clear_data();
  if (tuple) {
    set_has_tuple();
    data_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.tuple)
}

// .p4.v1.P4StructLike struct = 5;
bool P4Data::has_struct_() const {
  return data_case() == kStruct;
}
void P4Data::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
void P4Data::clear_struct_() {
  if (has_struct_()) {
    delete data_.struct__;
    clear_has_data();
  }
}
 const ::p4::v1::P4StructLike& P4Data::struct_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.struct)
  return has_struct_()
      ? *data_.struct__
      : ::p4::v1::P4StructLike::default_instance();
}
::p4::v1::P4StructLike* P4Data::mutable_struct_() {
  if (!has_struct_()) {
    clear_data();
    set_has_struct_();
    data_.struct__ = new ::p4::v1::P4StructLike;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.struct)
  return data_.struct__;
}
::p4::v1::P4StructLike* P4Data::release_struct_() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.struct)
  if (has_struct_()) {
    clear_has_data();
    ::p4::v1::P4StructLike* temp = data_.struct__;
    data_.struct__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_struct_(::p4::v1::P4StructLike* struct_) {
  clear_data();
  if (struct_) {
    set_has_struct_();
    data_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.struct)
}

// .p4.v1.P4Header header = 6;
bool P4Data::has_header() const {
  return data_case() == kHeader;
}
void P4Data::set_has_header() {
  _oneof_case_[0] = kHeader;
}
void P4Data::clear_header() {
  if (has_header()) {
    delete data_.header_;
    clear_has_data();
  }
}
 const ::p4::v1::P4Header& P4Data::header() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header)
  return has_header()
      ? *data_.header_
      : ::p4::v1::P4Header::default_instance();
}
::p4::v1::P4Header* P4Data::mutable_header() {
  if (!has_header()) {
    clear_data();
    set_has_header();
    data_.header_ = new ::p4::v1::P4Header;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header)
  return data_.header_;
}
::p4::v1::P4Header* P4Data::release_header() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header)
  if (has_header()) {
    clear_has_data();
    ::p4::v1::P4Header* temp = data_.header_;
    data_.header_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_header(::p4::v1::P4Header* header) {
  clear_data();
  if (header) {
    set_has_header();
    data_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header)
}

// .p4.v1.P4HeaderUnion header_union = 7;
bool P4Data::has_header_union() const {
  return data_case() == kHeaderUnion;
}
void P4Data::set_has_header_union() {
  _oneof_case_[0] = kHeaderUnion;
}
void P4Data::clear_header_union() {
  if (has_header_union()) {
    delete data_.header_union_;
    clear_has_data();
  }
}
 const ::p4::v1::P4HeaderUnion& P4Data::header_union() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_union)
  return has_header_union()
      ? *data_.header_union_
      : ::p4::v1::P4HeaderUnion::default_instance();
}
::p4::v1::P4HeaderUnion* P4Data::mutable_header_union() {
  if (!has_header_union()) {
    clear_data();
    set_has_header_union();
    data_.header_union_ = new ::p4::v1::P4HeaderUnion;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_union)
  return data_.header_union_;
}
::p4::v1::P4HeaderUnion* P4Data::release_header_union() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_union)
  if (has_header_union()) {
    clear_has_data();
    ::p4::v1::P4HeaderUnion* temp = data_.header_union_;
    data_.header_union_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_header_union(::p4::v1::P4HeaderUnion* header_union) {
  clear_data();
  if (header_union) {
    set_has_header_union();
    data_.header_union_ = header_union;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header_union)
}

// .p4.v1.P4HeaderStack header_stack = 8;
bool P4Data::has_header_stack() const {
  return data_case() == kHeaderStack;
}
void P4Data::set_has_header_stack() {
  _oneof_case_[0] = kHeaderStack;
}
void P4Data::clear_header_stack() {
  if (has_header_stack()) {
    delete data_.header_stack_;
    clear_has_data();
  }
}
 const ::p4::v1::P4HeaderStack& P4Data::header_stack() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_stack)
  return has_header_stack()
      ? *data_.header_stack_
      : ::p4::v1::P4HeaderStack::default_instance();
}
::p4::v1::P4HeaderStack* P4Data::mutable_header_stack() {
  if (!has_header_stack()) {
    clear_data();
    set_has_header_stack();
    data_.header_stack_ = new ::p4::v1::P4HeaderStack;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_stack)
  return data_.header_stack_;
}
::p4::v1::P4HeaderStack* P4Data::release_header_stack() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_stack)
  if (has_header_stack()) {
    clear_has_data();
    ::p4::v1::P4HeaderStack* temp = data_.header_stack_;
    data_.header_stack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_header_stack(::p4::v1::P4HeaderStack* header_stack) {
  clear_data();
  if (header_stack) {
    set_has_header_stack();
    data_.header_stack_ = header_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header_stack)
}

// .p4.v1.P4HeaderUnionStack header_union_stack = 9;
bool P4Data::has_header_union_stack() const {
  return data_case() == kHeaderUnionStack;
}
void P4Data::set_has_header_union_stack() {
  _oneof_case_[0] = kHeaderUnionStack;
}
void P4Data::clear_header_union_stack() {
  if (has_header_union_stack()) {
    delete data_.header_union_stack_;
    clear_has_data();
  }
}
 const ::p4::v1::P4HeaderUnionStack& P4Data::header_union_stack() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_union_stack)
  return has_header_union_stack()
      ? *data_.header_union_stack_
      : ::p4::v1::P4HeaderUnionStack::default_instance();
}
::p4::v1::P4HeaderUnionStack* P4Data::mutable_header_union_stack() {
  if (!has_header_union_stack()) {
    clear_data();
    set_has_header_union_stack();
    data_.header_union_stack_ = new ::p4::v1::P4HeaderUnionStack;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_union_stack)
  return data_.header_union_stack_;
}
::p4::v1::P4HeaderUnionStack* P4Data::release_header_union_stack() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_union_stack)
  if (has_header_union_stack()) {
    clear_has_data();
    ::p4::v1::P4HeaderUnionStack* temp = data_.header_union_stack_;
    data_.header_union_stack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_header_union_stack(::p4::v1::P4HeaderUnionStack* header_union_stack) {
  clear_data();
  if (header_union_stack) {
    set_has_header_union_stack();
    data_.header_union_stack_ = header_union_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.header_union_stack)
}

// string enum = 10;
bool P4Data::has_enum_() const {
  return data_case() == kEnum;
}
void P4Data::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
void P4Data::clear_enum_() {
  if (has_enum_()) {
    data_.enum__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& P4Data::enum_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.enum)
  if (has_enum_()) {
    return data_.enum__.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void P4Data::set_enum_(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum)
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum)
}
#if LANG_CXX11
void P4Data::set_enum_(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum)
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.enum)
}
#endif
void P4Data::set_enum_(const char* value) {
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.enum)
}
void P4Data::set_enum_(const char* value, size_t size) {
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.enum)
}
::std::string* P4Data::mutable_enum_() {
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.enum)
  return data_.enum__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* P4Data::release_enum_() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.enum)
  if (has_enum_()) {
    clear_has_data();
    return data_.enum__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_enum_(::std::string* enum_) {
  if (!has_enum_()) {
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (enum_ != NULL) {
    set_has_enum_();
    data_.enum__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        enum_);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.enum)
}

// string error = 11;
bool P4Data::has_error() const {
  return data_case() == kError;
}
void P4Data::set_has_error() {
  _oneof_case_[0] = kError;
}
void P4Data::clear_error() {
  if (has_error()) {
    data_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& P4Data::error() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.error)
  if (has_error()) {
    return data_.error_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void P4Data::set_error(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.error)
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.error)
}
#if LANG_CXX11
void P4Data::set_error(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.error)
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.error)
}
#endif
void P4Data::set_error(const char* value) {
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.error)
}
void P4Data::set_error(const char* value, size_t size) {
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.error)
}
::std::string* P4Data::mutable_error() {
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.error)
  return data_.error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* P4Data::release_error() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.error)
  if (has_error()) {
    clear_has_data();
    return data_.error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_error(::std::string* error) {
  if (!has_error()) {
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (error != NULL) {
    set_has_error();
    data_.error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        error);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.error)
}

// bytes enum_value = 12;
bool P4Data::has_enum_value() const {
  return data_case() == kEnumValue;
}
void P4Data::set_has_enum_value() {
  _oneof_case_[0] = kEnumValue;
}
void P4Data::clear_enum_value() {
  if (has_enum_value()) {
    data_.enum_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
const ::std::string& P4Data::enum_value() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.enum_value)
  if (has_enum_value()) {
    return data_.enum_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void P4Data::set_enum_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum_value)
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum_value)
}
#if LANG_CXX11
void P4Data::set_enum_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum_value)
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.enum_value)
}
#endif
void P4Data::set_enum_value(const char* value) {
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.enum_value)
}
void P4Data::set_enum_value(const void* value, size_t size) {
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.enum_value)
}
::std::string* P4Data::mutable_enum_value() {
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.enum_value)
  return data_.enum_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* P4Data::release_enum_value() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.enum_value)
  if (has_enum_value()) {
    clear_has_data();
    return data_.enum_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void P4Data::set_allocated_enum_value(::std::string* enum_value) {
  if (!has_enum_value()) {
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (enum_value != NULL) {
    set_has_enum_value();
    data_.enum_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        enum_value);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.enum_value)
}

bool P4Data::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void P4Data::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
P4Data::DataCase P4Data::data_case() const {
  return P4Data::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P4Varbit::kBitstringFieldNumber;
const int P4Varbit::kBitwidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P4Varbit::P4Varbit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.P4Varbit)
}
P4Varbit::P4Varbit(const P4Varbit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bitstring().size() > 0) {
    bitstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitstring_);
  }
  bitwidth_ = from.bitwidth_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4Varbit)
}

void P4Varbit::SharedCtor() {
  bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitwidth_ = 0;
  _cached_size_ = 0;
}

P4Varbit::~P4Varbit() {
  // @@protoc_insertion_point(destructor:p4.v1.P4Varbit)
  SharedDtor();
}

void P4Varbit::SharedDtor() {
  bitstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void P4Varbit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P4Varbit::descriptor() {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[1].descriptor;
}

const P4Varbit& P4Varbit::default_instance() {
  protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  return *internal_default_instance();
}

P4Varbit* P4Varbit::New(::google::protobuf::Arena* arena) const {
  P4Varbit* n = new P4Varbit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P4Varbit::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4Varbit)
  bitstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitwidth_ = 0;
}

bool P4Varbit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.P4Varbit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes bitstring = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitstring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bitwidth = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.P4Varbit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.P4Varbit)
  return false;
#undef DO_
}

void P4Varbit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.P4Varbit)
  // bytes bitstring = 1;
  if (this->bitstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bitstring(), output);
  }

  // int32 bitwidth = 2;
  if (this->bitwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bitwidth(), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.P4Varbit)
}

::google::protobuf::uint8* P4Varbit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4Varbit)
  // bytes bitstring = 1;
  if (this->bitstring().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bitstring(), target);
  }

  // int32 bitwidth = 2;
  if (this->bitwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bitwidth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4Varbit)
  return target;
}

size_t P4Varbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4Varbit)
  size_t total_size = 0;

  // bytes bitstring = 1;
  if (this->bitstring().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bitstring());
  }

  // int32 bitwidth = 2;
  if (this->bitwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bitwidth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P4Varbit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.P4Varbit)
  GOOGLE_DCHECK_NE(&from, this);
  const P4Varbit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const P4Varbit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.P4Varbit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.P4Varbit)
    MergeFrom(*source);
  }
}

void P4Varbit::MergeFrom(const P4Varbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4Varbit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.bitstring().size() > 0) {

    bitstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bitstring_);
  }
  if (from.bitwidth() != 0) {
    set_bitwidth(from.bitwidth());
  }
}

void P4Varbit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.P4Varbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P4Varbit::CopyFrom(const P4Varbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4Varbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4Varbit::IsInitialized() const {
  return true;
}

void P4Varbit::Swap(P4Varbit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P4Varbit::InternalSwap(P4Varbit* other) {
  bitstring_.Swap(&other->bitstring_);
  std::swap(bitwidth_, other->bitwidth_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P4Varbit::GetMetadata() const {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P4Varbit

// bytes bitstring = 1;
void P4Varbit::clear_bitstring() {
  bitstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& P4Varbit::bitstring() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Varbit.bitstring)
  return bitstring_.GetNoArena();
}
void P4Varbit::set_bitstring(const ::std::string& value) {
  
  bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Varbit.bitstring)
}
#if LANG_CXX11
void P4Varbit::set_bitstring(::std::string&& value) {
  
  bitstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Varbit.bitstring)
}
#endif
void P4Varbit::set_bitstring(const char* value) {
  
  bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Varbit.bitstring)
}
void P4Varbit::set_bitstring(const void* value, size_t size) {
  
  bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Varbit.bitstring)
}
::std::string* P4Varbit::mutable_bitstring() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Varbit.bitstring)
  return bitstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* P4Varbit::release_bitstring() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Varbit.bitstring)
  
  return bitstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void P4Varbit::set_allocated_bitstring(::std::string* bitstring) {
  if (bitstring != NULL) {
    
  } else {
    
  }
  bitstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitstring);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Varbit.bitstring)
}

// int32 bitwidth = 2;
void P4Varbit::clear_bitwidth() {
  bitwidth_ = 0;
}
::google::protobuf::int32 P4Varbit::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Varbit.bitwidth)
  return bitwidth_;
}
void P4Varbit::set_bitwidth(::google::protobuf::int32 value) {
  
  bitwidth_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.P4Varbit.bitwidth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P4StructLike::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P4StructLike::P4StructLike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.P4StructLike)
}
P4StructLike::P4StructLike(const P4StructLike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4StructLike)
}

void P4StructLike::SharedCtor() {
  _cached_size_ = 0;
}

P4StructLike::~P4StructLike() {
  // @@protoc_insertion_point(destructor:p4.v1.P4StructLike)
  SharedDtor();
}

void P4StructLike::SharedDtor() {
}

void P4StructLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P4StructLike::descriptor() {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[2].descriptor;
}

const P4StructLike& P4StructLike::default_instance() {
  protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  return *internal_default_instance();
}

P4StructLike* P4StructLike::New(::google::protobuf::Arena* arena) const {
  P4StructLike* n = new P4StructLike;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P4StructLike::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4StructLike)
  members_.Clear();
}

bool P4StructLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.P4StructLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .p4.v1.P4Data members = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.P4StructLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.P4StructLike)
  return false;
#undef DO_
}

void P4StructLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.P4StructLike)
  // repeated .p4.v1.P4Data members = 1;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.P4StructLike)
}

::google::protobuf::uint8* P4StructLike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4StructLike)
  // repeated .p4.v1.P4Data members = 1;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->members(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4StructLike)
  return target;
}

size_t P4StructLike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4StructLike)
  size_t total_size = 0;

  // repeated .p4.v1.P4Data members = 1;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P4StructLike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.P4StructLike)
  GOOGLE_DCHECK_NE(&from, this);
  const P4StructLike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const P4StructLike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.P4StructLike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.P4StructLike)
    MergeFrom(*source);
  }
}

void P4StructLike::MergeFrom(const P4StructLike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4StructLike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
}

void P4StructLike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.P4StructLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P4StructLike::CopyFrom(const P4StructLike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4StructLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4StructLike::IsInitialized() const {
  return true;
}

void P4StructLike::Swap(P4StructLike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P4StructLike::InternalSwap(P4StructLike* other) {
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P4StructLike::GetMetadata() const {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P4StructLike

// repeated .p4.v1.P4Data members = 1;
int P4StructLike::members_size() const {
  return members_.size();
}
void P4StructLike::clear_members() {
  members_.Clear();
}
const ::p4::v1::P4Data& P4StructLike::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4StructLike.members)
  return members_.Get(index);
}
::p4::v1::P4Data* P4StructLike::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4StructLike.members)
  return members_.Mutable(index);
}
::p4::v1::P4Data* P4StructLike::add_members() {
  // @@protoc_insertion_point(field_add:p4.v1.P4StructLike.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >*
P4StructLike::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4StructLike.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >&
P4StructLike::members() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4StructLike.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P4Header::kIsValidFieldNumber;
const int P4Header::kBitstringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P4Header::P4Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.P4Header)
}
P4Header::P4Header(const P4Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bitstrings_(from.bitstrings_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4Header)
}

void P4Header::SharedCtor() {
  is_valid_ = false;
  _cached_size_ = 0;
}

P4Header::~P4Header() {
  // @@protoc_insertion_point(destructor:p4.v1.P4Header)
  SharedDtor();
}

void P4Header::SharedDtor() {
}

void P4Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P4Header::descriptor() {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[3].descriptor;
}

const P4Header& P4Header::default_instance() {
  protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  return *internal_default_instance();
}

P4Header* P4Header::New(::google::protobuf::Arena* arena) const {
  P4Header* n = new P4Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P4Header::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4Header)
  bitstrings_.Clear();
  is_valid_ = false;
}

bool P4Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.P4Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_valid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes bitstrings = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_bitstrings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.P4Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.P4Header)
  return false;
#undef DO_
}

void P4Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.P4Header)
  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_valid(), output);
  }

  // repeated bytes bitstrings = 2;
  for (int i = 0; i < this->bitstrings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bitstrings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.P4Header)
}

::google::protobuf::uint8* P4Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4Header)
  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_valid(), target);
  }

  // repeated bytes bitstrings = 2;
  for (int i = 0; i < this->bitstrings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->bitstrings(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4Header)
  return target;
}

size_t P4Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4Header)
  size_t total_size = 0;

  // repeated bytes bitstrings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bitstrings_size());
  for (int i = 0; i < this->bitstrings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->bitstrings(i));
  }

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P4Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.P4Header)
  GOOGLE_DCHECK_NE(&from, this);
  const P4Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const P4Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.P4Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.P4Header)
    MergeFrom(*source);
  }
}

void P4Header::MergeFrom(const P4Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bitstrings_.MergeFrom(from.bitstrings_);
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
}

void P4Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.P4Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P4Header::CopyFrom(const P4Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4Header::IsInitialized() const {
  return true;
}

void P4Header::Swap(P4Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P4Header::InternalSwap(P4Header* other) {
  bitstrings_.UnsafeArenaSwap(&other->bitstrings_);
  std::swap(is_valid_, other->is_valid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P4Header::GetMetadata() const {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P4Header

// bool is_valid = 1;
void P4Header::clear_is_valid() {
  is_valid_ = false;
}
bool P4Header::is_valid() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Header.is_valid)
  return is_valid_;
}
void P4Header::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.is_valid)
}

// repeated bytes bitstrings = 2;
int P4Header::bitstrings_size() const {
  return bitstrings_.size();
}
void P4Header::clear_bitstrings() {
  bitstrings_.Clear();
}
const ::std::string& P4Header::bitstrings(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Header.bitstrings)
  return bitstrings_.Get(index);
}
::std::string* P4Header::mutable_bitstrings(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Header.bitstrings)
  return bitstrings_.Mutable(index);
}
void P4Header::set_bitstrings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.bitstrings)
  bitstrings_.Mutable(index)->assign(value);
}
void P4Header::set_bitstrings(int index, const char* value) {
  bitstrings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Header.bitstrings)
}
void P4Header::set_bitstrings(int index, const void* value, size_t size) {
  bitstrings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Header.bitstrings)
}
::std::string* P4Header::add_bitstrings() {
  // @@protoc_insertion_point(field_add_mutable:p4.v1.P4Header.bitstrings)
  return bitstrings_.Add();
}
void P4Header::add_bitstrings(const ::std::string& value) {
  bitstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.v1.P4Header.bitstrings)
}
void P4Header::add_bitstrings(const char* value) {
  bitstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.v1.P4Header.bitstrings)
}
void P4Header::add_bitstrings(const void* value, size_t size) {
  bitstrings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.v1.P4Header.bitstrings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
P4Header::bitstrings() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4Header.bitstrings)
  return bitstrings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
P4Header::mutable_bitstrings() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4Header.bitstrings)
  return &bitstrings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P4HeaderUnion::kValidHeaderNameFieldNumber;
const int P4HeaderUnion::kValidHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P4HeaderUnion::P4HeaderUnion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.P4HeaderUnion)
}
P4HeaderUnion::P4HeaderUnion(const P4HeaderUnion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valid_header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.valid_header_name().size() > 0) {
    valid_header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valid_header_name_);
  }
  if (from.has_valid_header()) {
    valid_header_ = new ::p4::v1::P4Header(*from.valid_header_);
  } else {
    valid_header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4HeaderUnion)
}

void P4HeaderUnion::SharedCtor() {
  valid_header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valid_header_ = NULL;
  _cached_size_ = 0;
}

P4HeaderUnion::~P4HeaderUnion() {
  // @@protoc_insertion_point(destructor:p4.v1.P4HeaderUnion)
  SharedDtor();
}

void P4HeaderUnion::SharedDtor() {
  valid_header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete valid_header_;
  }
}

void P4HeaderUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P4HeaderUnion::descriptor() {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[4].descriptor;
}

const P4HeaderUnion& P4HeaderUnion::default_instance() {
  protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  return *internal_default_instance();
}

P4HeaderUnion* P4HeaderUnion::New(::google::protobuf::Arena* arena) const {
  P4HeaderUnion* n = new P4HeaderUnion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P4HeaderUnion::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4HeaderUnion)
  valid_header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && valid_header_ != NULL) {
    delete valid_header_;
  }
  valid_header_ = NULL;
}

bool P4HeaderUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.P4HeaderUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string valid_header_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valid_header_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valid_header_name().data(), this->valid_header_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "p4.v1.P4HeaderUnion.valid_header_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .p4.v1.P4Header valid_header = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.P4HeaderUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.P4HeaderUnion)
  return false;
#undef DO_
}

void P4HeaderUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.P4HeaderUnion)
  // string valid_header_name = 1;
  if (this->valid_header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_header_name().data(), this->valid_header_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4HeaderUnion.valid_header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->valid_header_name(), output);
  }

  // .p4.v1.P4Header valid_header = 2;
  if (this->has_valid_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->valid_header_, output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.P4HeaderUnion)
}

::google::protobuf::uint8* P4HeaderUnion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4HeaderUnion)
  // string valid_header_name = 1;
  if (this->valid_header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valid_header_name().data(), this->valid_header_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "p4.v1.P4HeaderUnion.valid_header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->valid_header_name(), target);
  }

  // .p4.v1.P4Header valid_header = 2;
  if (this->has_valid_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->valid_header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4HeaderUnion)
  return target;
}

size_t P4HeaderUnion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4HeaderUnion)
  size_t total_size = 0;

  // string valid_header_name = 1;
  if (this->valid_header_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->valid_header_name());
  }

  // .p4.v1.P4Header valid_header = 2;
  if (this->has_valid_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P4HeaderUnion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.P4HeaderUnion)
  GOOGLE_DCHECK_NE(&from, this);
  const P4HeaderUnion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const P4HeaderUnion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.P4HeaderUnion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.P4HeaderUnion)
    MergeFrom(*source);
  }
}

void P4HeaderUnion::MergeFrom(const P4HeaderUnion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4HeaderUnion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.valid_header_name().size() > 0) {

    valid_header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valid_header_name_);
  }
  if (from.has_valid_header()) {
    mutable_valid_header()->::p4::v1::P4Header::MergeFrom(from.valid_header());
  }
}

void P4HeaderUnion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.P4HeaderUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P4HeaderUnion::CopyFrom(const P4HeaderUnion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4HeaderUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderUnion::IsInitialized() const {
  return true;
}

void P4HeaderUnion::Swap(P4HeaderUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P4HeaderUnion::InternalSwap(P4HeaderUnion* other) {
  valid_header_name_.Swap(&other->valid_header_name_);
  std::swap(valid_header_, other->valid_header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P4HeaderUnion::GetMetadata() const {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P4HeaderUnion

// string valid_header_name = 1;
void P4HeaderUnion::clear_valid_header_name() {
  valid_header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& P4HeaderUnion::valid_header_name() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnion.valid_header_name)
  return valid_header_name_.GetNoArena();
}
void P4HeaderUnion::set_valid_header_name(const ::std::string& value) {
  
  valid_header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4HeaderUnion.valid_header_name)
}
#if LANG_CXX11
void P4HeaderUnion::set_valid_header_name(::std::string&& value) {
  
  valid_header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4HeaderUnion.valid_header_name)
}
#endif
void P4HeaderUnion::set_valid_header_name(const char* value) {
  
  valid_header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4HeaderUnion.valid_header_name)
}
void P4HeaderUnion::set_valid_header_name(const char* value, size_t size) {
  
  valid_header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4HeaderUnion.valid_header_name)
}
::std::string* P4HeaderUnion::mutable_valid_header_name() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnion.valid_header_name)
  return valid_header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* P4HeaderUnion::release_valid_header_name() {
  // @@protoc_insertion_point(field_release:p4.v1.P4HeaderUnion.valid_header_name)
  
  return valid_header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void P4HeaderUnion::set_allocated_valid_header_name(::std::string* valid_header_name) {
  if (valid_header_name != NULL) {
    
  } else {
    
  }
  valid_header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valid_header_name);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4HeaderUnion.valid_header_name)
}

// .p4.v1.P4Header valid_header = 2;
bool P4HeaderUnion::has_valid_header() const {
  return this != internal_default_instance() && valid_header_ != NULL;
}
void P4HeaderUnion::clear_valid_header() {
  if (GetArenaNoVirtual() == NULL && valid_header_ != NULL) delete valid_header_;
  valid_header_ = NULL;
}
const ::p4::v1::P4Header& P4HeaderUnion::valid_header() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnion.valid_header)
  return valid_header_ != NULL ? *valid_header_
                         : *::p4::v1::P4Header::internal_default_instance();
}
::p4::v1::P4Header* P4HeaderUnion::mutable_valid_header() {
  
  if (valid_header_ == NULL) {
    valid_header_ = new ::p4::v1::P4Header;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnion.valid_header)
  return valid_header_;
}
::p4::v1::P4Header* P4HeaderUnion::release_valid_header() {
  // @@protoc_insertion_point(field_release:p4.v1.P4HeaderUnion.valid_header)
  
  ::p4::v1::P4Header* temp = valid_header_;
  valid_header_ = NULL;
  return temp;
}
void P4HeaderUnion::set_allocated_valid_header(::p4::v1::P4Header* valid_header) {
  delete valid_header_;
  valid_header_ = valid_header;
  if (valid_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4HeaderUnion.valid_header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P4HeaderStack::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P4HeaderStack::P4HeaderStack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.P4HeaderStack)
}
P4HeaderStack::P4HeaderStack(const P4HeaderStack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4HeaderStack)
}

void P4HeaderStack::SharedCtor() {
  _cached_size_ = 0;
}

P4HeaderStack::~P4HeaderStack() {
  // @@protoc_insertion_point(destructor:p4.v1.P4HeaderStack)
  SharedDtor();
}

void P4HeaderStack::SharedDtor() {
}

void P4HeaderStack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P4HeaderStack::descriptor() {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[5].descriptor;
}

const P4HeaderStack& P4HeaderStack::default_instance() {
  protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  return *internal_default_instance();
}

P4HeaderStack* P4HeaderStack::New(::google::protobuf::Arena* arena) const {
  P4HeaderStack* n = new P4HeaderStack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P4HeaderStack::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4HeaderStack)
  entries_.Clear();
}

bool P4HeaderStack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.P4HeaderStack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .p4.v1.P4Header entries = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.P4HeaderStack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.P4HeaderStack)
  return false;
#undef DO_
}

void P4HeaderStack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.P4HeaderStack)
  // repeated .p4.v1.P4Header entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.P4HeaderStack)
}

::google::protobuf::uint8* P4HeaderStack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4HeaderStack)
  // repeated .p4.v1.P4Header entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4HeaderStack)
  return target;
}

size_t P4HeaderStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4HeaderStack)
  size_t total_size = 0;

  // repeated .p4.v1.P4Header entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P4HeaderStack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.P4HeaderStack)
  GOOGLE_DCHECK_NE(&from, this);
  const P4HeaderStack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const P4HeaderStack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.P4HeaderStack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.P4HeaderStack)
    MergeFrom(*source);
  }
}

void P4HeaderStack::MergeFrom(const P4HeaderStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4HeaderStack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
}

void P4HeaderStack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.P4HeaderStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P4HeaderStack::CopyFrom(const P4HeaderStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4HeaderStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderStack::IsInitialized() const {
  return true;
}

void P4HeaderStack::Swap(P4HeaderStack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P4HeaderStack::InternalSwap(P4HeaderStack* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P4HeaderStack::GetMetadata() const {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P4HeaderStack

// repeated .p4.v1.P4Header entries = 1;
int P4HeaderStack::entries_size() const {
  return entries_.size();
}
void P4HeaderStack::clear_entries() {
  entries_.Clear();
}
const ::p4::v1::P4Header& P4HeaderStack::entries(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderStack.entries)
  return entries_.Get(index);
}
::p4::v1::P4Header* P4HeaderStack::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderStack.entries)
  return entries_.Mutable(index);
}
::p4::v1::P4Header* P4HeaderStack::add_entries() {
  // @@protoc_insertion_point(field_add:p4.v1.P4HeaderStack.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::P4Header >*
P4HeaderStack::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4HeaderStack.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Header >&
P4HeaderStack::entries() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4HeaderStack.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int P4HeaderUnionStack::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

P4HeaderUnionStack::P4HeaderUnionStack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:p4.v1.P4HeaderUnionStack)
}
P4HeaderUnionStack::P4HeaderUnionStack(const P4HeaderUnionStack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:p4.v1.P4HeaderUnionStack)
}

void P4HeaderUnionStack::SharedCtor() {
  _cached_size_ = 0;
}

P4HeaderUnionStack::~P4HeaderUnionStack() {
  // @@protoc_insertion_point(destructor:p4.v1.P4HeaderUnionStack)
  SharedDtor();
}

void P4HeaderUnionStack::SharedDtor() {
}

void P4HeaderUnionStack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P4HeaderUnionStack::descriptor() {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[6].descriptor;
}

const P4HeaderUnionStack& P4HeaderUnionStack::default_instance() {
  protobuf_p4_2fv1_2fp4data_2eproto::InitDefaults();
  return *internal_default_instance();
}

P4HeaderUnionStack* P4HeaderUnionStack::New(::google::protobuf::Arena* arena) const {
  P4HeaderUnionStack* n = new P4HeaderUnionStack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void P4HeaderUnionStack::Clear() {
// @@protoc_insertion_point(message_clear_start:p4.v1.P4HeaderUnionStack)
  entries_.Clear();
}

bool P4HeaderUnionStack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:p4.v1.P4HeaderUnionStack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .p4.v1.P4HeaderUnion entries = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:p4.v1.P4HeaderUnionStack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:p4.v1.P4HeaderUnionStack)
  return false;
#undef DO_
}

void P4HeaderUnionStack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:p4.v1.P4HeaderUnionStack)
  // repeated .p4.v1.P4HeaderUnion entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:p4.v1.P4HeaderUnionStack)
}

::google::protobuf::uint8* P4HeaderUnionStack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:p4.v1.P4HeaderUnionStack)
  // repeated .p4.v1.P4HeaderUnion entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:p4.v1.P4HeaderUnionStack)
  return target;
}

size_t P4HeaderUnionStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:p4.v1.P4HeaderUnionStack)
  size_t total_size = 0;

  // repeated .p4.v1.P4HeaderUnion entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P4HeaderUnionStack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:p4.v1.P4HeaderUnionStack)
  GOOGLE_DCHECK_NE(&from, this);
  const P4HeaderUnionStack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const P4HeaderUnionStack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:p4.v1.P4HeaderUnionStack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:p4.v1.P4HeaderUnionStack)
    MergeFrom(*source);
  }
}

void P4HeaderUnionStack::MergeFrom(const P4HeaderUnionStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:p4.v1.P4HeaderUnionStack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
}

void P4HeaderUnionStack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:p4.v1.P4HeaderUnionStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P4HeaderUnionStack::CopyFrom(const P4HeaderUnionStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:p4.v1.P4HeaderUnionStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P4HeaderUnionStack::IsInitialized() const {
  return true;
}

void P4HeaderUnionStack::Swap(P4HeaderUnionStack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void P4HeaderUnionStack::InternalSwap(P4HeaderUnionStack* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata P4HeaderUnionStack::GetMetadata() const {
  protobuf_p4_2fv1_2fp4data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_p4_2fv1_2fp4data_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// P4HeaderUnionStack

// repeated .p4.v1.P4HeaderUnion entries = 1;
int P4HeaderUnionStack::entries_size() const {
  return entries_.size();
}
void P4HeaderUnionStack::clear_entries() {
  entries_.Clear();
}
const ::p4::v1::P4HeaderUnion& P4HeaderUnionStack::entries(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnionStack.entries)
  return entries_.Get(index);
}
::p4::v1::P4HeaderUnion* P4HeaderUnionStack::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnionStack.entries)
  return entries_.Mutable(index);
}
::p4::v1::P4HeaderUnion* P4HeaderUnionStack::add_entries() {
  // @@protoc_insertion_point(field_add:p4.v1.P4HeaderUnionStack.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::p4::v1::P4HeaderUnion >*
P4HeaderUnionStack::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4HeaderUnionStack.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4HeaderUnion >&
P4HeaderUnionStack::entries() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4HeaderUnionStack.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace p4

// @@protoc_insertion_point(global_scope)
